{
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PMD",
          "version": "7.8.0",
          "informationUri": "https://docs.pmd-code.org/latest/",
          "rules": [
            {
              "id": "UseUtilityClass",
              "shortDescription": {
                "text": "This utility class has a non-private constructor"
              },
              "fullDescription": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#useutilityclass",
              "help": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "CompareObjectsWithEquals",
              "shortDescription": {
                "text": "Use equals() to compare object references."
              },
              "fullDescription": {
                "text": "\nUse `equals()` to compare object references; avoid comparing them with `==`.\n\nSince comparing objects with named constants is useful in some cases (eg, when\ndefining constants for sentinel values), the rule ignores comparisons against\nfields with all-caps name (eg `this == SENTINEL`), which is a common naming\nconvention for constant fields.\n\nYou may allow some types to be compared by reference by listing the exceptions\nin the `typesThatCompareByReference` property.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#compareobjectswithequals",
              "help": {
                "text": "\nUse `equals()` to compare object references; avoid comparing them with `==`.\n\nSince comparing objects with named constants is useful in some cases (eg, when\ndefining constants for sentinel values), the rule ignores comparisons against\nfields with all-caps name (eg `this == SENTINEL`), which is a common naming\nconvention for constant fields.\n\nYou may allow some types to be compared by reference by listing the exceptions\nin the `typesThatCompareByReference` property.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnnecessaryConstructor",
              "shortDescription": {
                "text": "Avoid unnecessary constructors - the compiler will generate these for you"
              },
              "fullDescription": {
                "text": "\nThis rule detects when a constructor is not necessary; i.e., when there is only one constructor and the\nconstructor is identical to the default constructor. The default constructor should has same access\nmodifier as the declaring class. In an enum type, the default constructor is implicitly private.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryconstructor",
              "help": {
                "text": "\nThis rule detects when a constructor is not necessary; i.e., when there is only one constructor and the\nconstructor is identical to the default constructor. The default constructor should has same access\nmodifier as the declaring class. In an enum type, the default constructor is implicitly private.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_Aarch_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_IA64_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_IA64_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_PPC_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_PPC_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_RISCV_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_RISCV_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_X86_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'init_X86_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ReturnEmptyCollectionRatherThanNull",
              "shortDescription": {
                "text": "Return an empty collection rather than null."
              },
              "fullDescription": {
                "text": "\nFor any method that returns an collection (such as an array, Collection or Map), it is better to return\nan empty one rather than a null reference. This removes the need for null checking all results and avoids\ninadvertent NullPointerExceptions.\n\nSee Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#returnemptycollectionratherthannull",
              "help": {
                "text": "\nFor any method that returns an collection (such as an array, Collection or Map), it is better to return\nan empty one rather than a null reference. This removes the need for null checking all results and avoids\ninadvertent NullPointerExceptions.\n\nSee Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 1,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UseEqualsToCompareStrings",
              "shortDescription": {
                "text": "Use equals() to compare strings instead of '==' or '!='"
              },
              "fullDescription": {
                "text": "\nUsing '==' or '!=' to compare strings is only reliable if the interned string (`String#intern()`)\nis used on both sides.\n\nUse the `equals()` method instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#useequalstocomparestrings",
              "help": {
                "text": "\nUsing '==' or '!=' to compare strings is only reliable if the interned string (`String#intern()`)\nis used on both sides.\n\nUse the `equals()` method instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "SingletonClassReturningNewInstance",
              "shortDescription": {
                "text": "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
              },
              "fullDescription": {
                "text": "\n            A singleton class should only ever have one instance. Failure to check\n            whether an instance has already been created may result in multiple\n            instances being created.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance",
              "help": {
                "text": "\n            A singleton class should only ever have one instance. Failure to check\n            whether an instance has already been created may result in multiple\n            instances being created.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 2,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UncommentedEmptyConstructor",
              "shortDescription": {
                "text": "Document empty constructor"
              },
              "fullDescription": {
                "text": "\nUncommented Empty Constructor finds instances where a constructor does not\ncontain statements, but there is no comment. By explicitly commenting empty\nconstructors it is easier to distinguish between intentional (commented)\nand unintentional empty constructors.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_documentation.html#uncommentedemptyconstructor",
              "help": {
                "text": "\nUncommented Empty Constructor finds instances where a constructor does not\ncontain statements, but there is no comment. By explicitly commenting empty\nconstructors it is easier to distinguish between intentional (commented)\nand unintentional empty constructors.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'LinkedHashSet'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'binaryToHexDigitMsb0_4bits' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "GenericsNaming",
              "shortDescription": {
                "text": "Generics names should be a one letter long and upper case."
              },
              "fullDescription": {
                "text": "\nNames for references to generic values should be limited to a single uppercase letter.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#genericsnaming",
              "help": {
                "text": "\nNames for references to generic values should be limited to a single uppercase letter.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidCatchingThrowable",
              "shortDescription": {
                "text": "A catch statement should never catch throwable since it includes errors."
              },
              "fullDescription": {
                "text": "\nCatching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as\nOutOfMemoryError that should be exposed and managed separately.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidcatchingthrowable",
              "help": {
                "text": "\nCatching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as\nOutOfMemoryError that should be exposed and managed separately.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `resources[i]::run`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'CONST_BYTE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'CONST_SHORT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "SuspiciousEqualsMethodName",
              "shortDescription": {
                "text": "The method name and parameter number are suspiciously close to equals(Object)"
              },
              "fullDescription": {
                "text": "\nThe method name and parameter number are suspiciously close to `Object.equals`, which can denote an\nintention to override it. However, the method does not override `Object.equals`, but overloads it instead.\nOverloading `Object.equals` method is confusing for other programmers, error-prone and hard to maintain,\nespecially when using inheritance, because `@Override` annotations used in subclasses can provide a false\nsense of security. For more information on `Object.equals` method, see Effective Java, 3rd Edition,\nItem 10: Obey the general contract when overriding equals.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#suspiciousequalsmethodname",
              "help": {
                "text": "\nThe method name and parameter number are suspiciously close to `Object.equals`, which can denote an\nintention to override it. However, the method does not override `Object.equals`, but overloads it instead.\nOverloading `Object.equals` method is confusing for other programmers, error-prone and hard to maintain,\nespecially when using inheritance, because `@Override` annotations used in subclasses can provide a false\nsense of security. For more information on `Object.equals` method, see Effective Java, 3rd Edition,\nItem 10: Obey the general contract when overriding equals.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 2,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "SimplifyBooleanReturns",
              "shortDescription": {
                "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
              },
              "fullDescription": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#simplifybooleanreturns",
              "help": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'TreeSet'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "NonExhaustiveSwitch",
              "shortDescription": {
                "text": "Switch statements or expressions should be exhaustive, add a default case (or missing enum branches)"
              },
              "fullDescription": {
                "text": "\n            Switch statements should be exhaustive, to make their control flow\n            easier to follow. This can be achieved by adding a `default` case, or,\n            if the switch is on an enum type, by ensuring there is one switch branch\n            for each enum constant.\n\n            This rule doesn't consider Switch Statements, that use Pattern Matching, since for these the\n            compiler already ensures that all cases are covered. The same is true for Switch Expressions,\n            which are also not considered by this rule.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#nonexhaustiveswitch",
              "help": {
                "text": "\n            Switch statements should be exhaustive, to make their control flow\n            easier to follow. This can be achieved by adding a `default` case, or,\n            if the switch is on an enum type, by ensuring there is one switch branch\n            for each enum constant.\n\n            This rule doesn't consider Switch Statements, that use Pattern Matching, since for these the\n            compiler already ensures that all cases are covered. The same is true for Switch Expressions,\n            which are also not considered by this rule.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "SimplifyBooleanReturns",
              "shortDescription": {
                "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
              },
              "fullDescription": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#simplifybooleanreturns",
              "help": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "PreserveStackTrace",
              "shortDescription": {
                "text": "Thrown exception does not preserve the stack trace of exception 'ex' on all code paths"
              },
              "fullDescription": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#preservestacktrace",
              "help": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "SimplifyBooleanReturns",
              "shortDescription": {
                "text": "This if statement can be replaced by `return {condition} || {elseBranch};`"
              },
              "fullDescription": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#simplifybooleanreturns",
              "help": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'DEFAULT_SCALING_FACTOR' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidBranchingStatementAsLastInLoop",
              "shortDescription": {
                "text": "Avoid using a branching statement as the last in a loop."
              },
              "fullDescription": {
                "text": "\nUsing a branching statement as the last part of a loop may be a bug, and/or is confusing.\nEnsure that the usage is not a bug, or consider using another approach.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop",
              "help": {
                "text": "\nUsing a branching statement as the last part of a loop may be a bug, and/or is confusing.\nEnsure that the usage is not a bug, or consider using another approach.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 2,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UseLocaleWithCaseConversions",
              "shortDescription": {
                "text": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
              },
              "fullDescription": {
                "text": "\nWhen doing `String::toLowerCase()/toUpperCase()` conversions, use an explicit locale argument to specify the case\ntransformation rules.\n\nUsing `String::toLowerCase()` without arguments implicitly uses `Locale::getDefault()`.\nThe problem is that the default locale depends on the current JVM setup (and usually on the system in which\nit is running). Using the system default may be exactly what you want (e.g. if you are manipulating strings\nyou got through standard input), but it may as well not be the case (e.g. if you are getting the string over\nthe network or a file, and the encoding is well-defined and independent of the environment). In the latter case,\nusing the default locale makes the case transformation brittle, as it may yield unexpected results on a machine\nwhose locale has other case translation rules. For example, in Turkish, the uppercase form of `i` is `İ` (U+0130,\nnot ASCII) and not `I` (U+0049) as in English.\n\nThe rule is intended to *force* developers to think about locales when dealing with strings. By taking a\nconscious decision about the choice of locale at the time of writing, you reduce the risk of surprising\nbehaviour down the line, and communicate your intent to future readers.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#uselocalewithcaseconversions",
              "help": {
                "text": "\nWhen doing `String::toLowerCase()/toUpperCase()` conversions, use an explicit locale argument to specify the case\ntransformation rules.\n\nUsing `String::toLowerCase()` without arguments implicitly uses `Locale::getDefault()`.\nThe problem is that the default locale depends on the current JVM setup (and usually on the system in which\nit is running). Using the system default may be exactly what you want (e.g. if you are manipulating strings\nyou got through standard input), but it may as well not be the case (e.g. if you are getting the string over\nthe network or a file, and the encoding is well-defined and independent of the environment). In the latter case,\nusing the default locale makes the case transformation brittle, as it may yield unexpected results on a machine\nwhose locale has other case translation rules. For example, in Turkish, the uppercase form of `i` is `İ` (U+0130,\nnot ASCII) and not `I` (U+0049) as in English.\n\nThe rule is intended to *force* developers to think about locales when dealing with strings. By taking a\nconscious decision about the choice of locale at the time of writing, you reduce the risk of surprising\nbehaviour down the line, and communicate your intent to future readers.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "ForLoopCanBeForeach",
              "shortDescription": {
                "text": "This for loop can be replaced by a foreach loop"
              },
              "fullDescription": {
                "text": "\nReports loops that can be safely replaced with the foreach syntax. The rule considers loops over\nlists, arrays and iterators. A loop is safe to replace if it only uses the index variable to\naccess an element of the list or array, only has one update statement, and loops through *every*\nelement of the list or array left to right.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#forloopcanbeforeach",
              "help": {
                "text": "\nReports loops that can be safely replaced with the foreach syntax. The rule considers loops over\nlists, arrays and iterators. A loop is safe to replace if it only uses the index variable to\naccess an element of the list or array, only has one update statement, and loops through *every*\nelement of the list or array left to right.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "AssignmentInOperand",
              "shortDescription": {
                "text": "Avoid assignments in operands"
              },
              "fullDescription": {
                "text": "\nAvoid assignments in operands; this can make code more complicated and harder to read.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#assignmentinoperand",
              "help": {
                "text": "\nAvoid assignments in operands; this can make code more complicated and harder to read.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LiteralsFirstInComparisons",
              "shortDescription": {
                "text": "Position literals first in String comparisons"
              },
              "fullDescription": {
                "text": "\n            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions\n            can be avoided, they will just return false. Note that switching literal positions for compareTo and\n            compareToIgnoreCase may change the result, see examples.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#literalsfirstincomparisons",
              "help": {
                "text": "\n            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions\n            can be avoided, they will just return false. Note that switching literal positions for compareTo and\n            compareToIgnoreCase may change the result, see examples.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "AvoidThreadGroup",
              "shortDescription": {
                "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
              },
              "fullDescription": {
                "text": "\nAvoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment\nit contains methods that are not thread-safe.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_multithreading.html#avoidthreadgroup",
              "help": {
                "text": "\nAvoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment\nit contains methods that are not thread-safe.\n        "
              },
              "properties": {
                "ruleset": "Multithreading",
                "priority": 3,
                "tags": [
                  "Multithreading"
                ]
              }
            },
            {
              "id": "EmptyCatchBlock",
              "shortDescription": {
                "text": "Avoid empty catch blocks"
              },
              "fullDescription": {
                "text": "\nEmpty Catch Block finds instances where an exception is caught, but nothing is done.\nIn most circumstances, this swallows an exception which should either be acted on\nor reported.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#emptycatchblock",
              "help": {
                "text": "\nEmpty Catch Block finds instances where an exception is caught, but nothing is done.\nIn most circumstances, this swallows an exception which should either be acted on\nor reported.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AvoidAccessibilityAlteration",
              "shortDescription": {
                "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
              },
              "fullDescription": {
                "text": "\nMethods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also\nreturn private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`.\nThis gives access to normally protected data which violates the principle of encapsulation.\n\nThis rule detects calls to `setAccessible` and finds possible accessibility alterations.\nIf the call to `setAccessible` is wrapped within a `PrivilegedAction`, then the access alteration\nis assumed to be deliberate and is not reported.\n\nNote that with Java 17 the Security Manager, which is used for `PrivilegedAction` execution,\nis deprecated: [JEP 411: Deprecate the Security Manager for Removal](https://openjdk.org/jeps/411).\nFor future-proof code, deliberate access alteration should be suppressed using the usual\nsuppression methods (e.g. by using `@SuppressWarnings` annotation).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidaccessibilityalteration",
              "help": {
                "text": "\nMethods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also\nreturn private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`.\nThis gives access to normally protected data which violates the principle of encapsulation.\n\nThis rule detects calls to `setAccessible` and finds possible accessibility alterations.\nIf the call to `setAccessible` is wrapped within a `PrivilegedAction`, then the access alteration\nis assumed to be deliberate and is not reported.\n\nNote that with Java 17 the Security Manager, which is used for `PrivilegedAction` execution,\nis deprecated: [JEP 411: Deprecate the Security Manager for Removal](https://openjdk.org/jeps/411).\nFor future-proof code, deliberate access alteration should be suppressed using the usual\nsuppression methods (e.g. by using `@SuppressWarnings` annotation).\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AvoidUsingVolatile",
              "shortDescription": {
                "text": "Use of modifier volatile is not recommended."
              },
              "fullDescription": {
                "text": "\nUse of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires\na good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,\nthe volatile keyword should not be used for maintenance purpose and portability.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_multithreading.html#avoidusingvolatile",
              "help": {
                "text": "\nUse of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires\na good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,\nthe volatile keyword should not be used for maintenance purpose and portability.\n        "
              },
              "properties": {
                "ruleset": "Multithreading",
                "priority": 2,
                "tags": [
                  "Multithreading"
                ]
              }
            },
            {
              "id": "AvoidStringBufferField",
              "shortDescription": {
                "text": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
              },
              "fullDescription": {
                "text": "\nStringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks\nif held within objects with long lifetimes.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#avoidstringbufferfield",
              "help": {
                "text": "\nStringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks\nif held within objects with long lifetimes.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'WeakHashMap'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
              "shortDescription": {
                "text": "This class has only private constructors and may be final"
              },
              "fullDescription": {
                "text": "\nReports classes that may be made final because they cannot be extended from outside\ntheir compilation unit anyway. This is because all their constructors are private,\nso a subclass could not call the super constructor.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal",
              "help": {
                "text": "\nReports classes that may be made final because they cannot be extended from outside\ntheir compilation unit anyway. This is because all their constructors are private,\nso a subclass could not call the super constructor.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 1,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this ExecutorService object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "PreserveStackTrace",
              "shortDescription": {
                "text": "Thrown exception does not preserve the stack trace of exception 'cex' on all code paths"
              },
              "fullDescription": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#preservestacktrace",
              "help": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "PreserveStackTrace",
              "shortDescription": {
                "text": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths"
              },
              "fullDescription": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#preservestacktrace",
              "help": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "AvoidInstanceofChecksInCatchClause",
              "shortDescription": {
                "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
              },
              "fullDescription": {
                "text": "\nEach caught exception type should be handled in its own catch clause.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause",
              "help": {
                "text": "\nEach caught exception type should be handled in its own catch clause.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this ScheduledThreadPoolExecutor object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "OneDeclarationPerLine",
              "shortDescription": {
                "text": "Use one line for each declaration, it enhances code readability."
              },
              "fullDescription": {
                "text": "\nJava allows the use of several variables declaration of the same type on one line.\nHowever, it can lead to quite messy code. This rule looks for several declarations on the same line.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#onedeclarationperline",
              "help": {
                "text": "\nJava allows the use of several variables declaration of the same type on one line.\nHowever, it can lead to quite messy code. This rule looks for several declarations on the same line.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 4,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LogicInversion",
              "shortDescription": {
                "text": "Use opposite operator instead of the logic complement operator."
              },
              "fullDescription": {
                "text": "\nUse opposite operator instead of negating the whole expression with a logic complement operator.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#logicinversion",
              "help": {
                "text": "\nUse opposite operator instead of negating the whole expression with a logic complement operator.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'TreeMap'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'TypeUtils': 'anyToString' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MissingOverride",
              "shortDescription": {
                "text": "The method 'isEmpty()' is missing an @Override annotation."
              },
              "fullDescription": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#missingoverride",
              "help": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloneMethodReturnTypeMustMatchClassName",
              "shortDescription": {
                "text": "The return type of the clone() method must be the class name when implements Cloneable"
              },
              "fullDescription": {
                "text": "\nIf a class implements `Cloneable` the return type of the method `clone()` must be the class name. That way, the caller\nof the clone method doesn't need to cast the returned clone to the correct type.\n\nNote: Such a covariant return type is only possible with Java 1.5 or higher.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname",
              "help": {
                "text": "\nIf a class implements `Cloneable` the return type of the method `clone()` must be the class name. That way, the caller\nof the clone method doesn't need to cast the returned clone to the correct type.\n\nNote: Such a covariant return type is only possible with Java 1.5 or higher.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'APOS_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'APOS_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'BASIC_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'BASIC_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'HTML40_EXTENDED_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'HTML40_EXTENDED_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'ISO8859_1_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'ISO8859_1_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'JAVA_CTRL_CHARS_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'JAVA_CTRL_CHARS_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "SingleMethodSingleton",
              "shortDescription": {
                "text": "Class contains multiple getInstance methods. Please review."
              },
              "fullDescription": {
                "text": "\nSome classes contain overloaded getInstance. The problem with overloaded getInstance methods\nis that the instance created using the overloaded method is not cached and so,\nfor each call and new objects will be created for every invocation.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#singlemethodsingleton",
              "help": {
                "text": "\nSome classes contain overloaded getInstance. The problem with overloaded getInstance methods\nis that the instance created using the overloaded method is not cached and so,\nfor each call and new objects will be created for every invocation.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 2,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "ImplicitSwitchFallThrough",
              "shortDescription": {
                "text": "This switch case may be reached by fallthrough from the previous case"
              },
              "fullDescription": {
                "text": "\nSwitch statements without break or return statements for each case option\nmay indicate problematic behaviour. Empty cases are ignored as these indicate\nan intentional fall-through.\n\nYou can ignore a violation by commenting `// fallthrough` before the case label\nwhich is reached by fallthrough, or with `@SuppressWarnings(\"fallthrough\")`.\n\nThis rule has been renamed from \"MissingBreakInSwitch\" in PMD 6.37.0.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#implicitswitchfallthrough",
              "help": {
                "text": "\nSwitch statements without break or return statements for each case option\nmay indicate problematic behaviour. Empty cases are ignored as these indicate\nan intentional fall-through.\n\nYou can ignore a violation by commenting `// fallthrough` before the case label\nwhich is reached by fallthrough, or with `@SuppressWarnings(\"fallthrough\")`.\n\nThis rule has been renamed from \"MissingBreakInSwitch\" in PMD 6.37.0.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "DefaultLabelNotLastInSwitch",
              "shortDescription": {
                "text": "The default label should be the last label in a switch statement or expression"
              },
              "fullDescription": {
                "text": "\nBy convention, the default label should be the last label in a switch statement or switch expression.\n\nNote: This rule has been renamed from \"DefaultLabelNotLastInSwitchStmt\" with PMD 7.7.0.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#defaultlabelnotlastinswitch",
              "help": {
                "text": "\nBy convention, the default label should be the last label in a switch statement or switch expression.\n\nNote: This rule has been renamed from \"DefaultLabelNotLastInSwitchStmt\" with PMD 7.7.0.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'Iso8601_Rule' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'ERAs' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'AmPmStrings' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "DoNotExtendJavaLangThrowable",
              "shortDescription": {
                "text": "Exceptions should not extend java.lang.Throwable"
              },
              "fullDescription": {
                "text": "\nExtend Exception or RuntimeException instead of Throwable.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#donotextendjavalangthrowable",
              "help": {
                "text": "\nExtend Exception or RuntimeException instead of Throwable.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSetAll_IntFunction' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSetAll_Supplier' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_LANG_1261' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "OverrideBothEqualsAndHashcode",
              "shortDescription": {
                "text": "Ensure you override both equals() and hashCode()"
              },
              "fullDescription": {
                "text": "\nOverride both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#overridebothequalsandhashcode",
              "help": {
                "text": "\nOverride both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_byte' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_double' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_float' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_long' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToObject_short' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_boolean_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_byte' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_byte_byte' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_double' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_double_double' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_float' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_float_float' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_intNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_long' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_long_long' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_short' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToPrimitive_short_short' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToStringArray_array' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToStringArray_array_string' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_booleanValues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_forEach' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isFalse_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isNotFalse_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isNotTrue_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isTrue_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_negate_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_primitiveValues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_int_int_int_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_Integer_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_Integer_Integer_Integer_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_Integer_Integer_Integer_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_String_String_String_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBoolean_String_String_String_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanDefaultIfNull_Boolean_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_int_int_int_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer_Integer_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_String_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_String_String_String_String_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toBooleanObject_String_String_String_String_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toInteger_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toInteger_boolean_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toInteger_Boolean_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toIntegerObject_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toIntegerObject_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toIntegerObject_boolean_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toIntegerObject_Boolean_Integer_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toString_boolean_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toString_Boolean_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringOnOff_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringOnOff_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringTrueFalse_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringTrueFalse_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringYesNo_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringYesNo_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_values' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAnd_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_validInput_1item' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_validInput_2ItemsNullsTreatedAsFalse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_primitive_validInput_1item' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOneHot_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOr_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_object_validInput_1items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_primitive_validInput_1items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testXor_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMustBeSupportedJava1_3_1_and_above' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_is' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isIn_Normal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isIn_Reversed' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isIn_Same' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isNot' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isNotIn_Normal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isNotIn_Reversed' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructorAccessors_isNotIn_Same' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_Char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_Charrange' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testEquals_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_combo' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_comboNegated' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_oddCombinations' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_oddDash' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_oddNegate' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_simple' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetInstance_Stringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCount_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCount_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDelete_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDelete_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testKeep_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testKeep_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSqueeze_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSqueeze_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'run_CharSet' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'run_CharUtils_isAsciiNumeric' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'run_inlined_CharUtils_isAsciiNumeric' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAscii_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiAlpha_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiAlphaLower_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiAlphanumeric_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiAlphaUpper_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiControl_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiNumeric_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiPrintable_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToChar_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToChar_Character_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToChar_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToChar_String_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharacterObject_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharacterObject_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToIntValue_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToIntValue_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToIntValue_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToIntValue_Character_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToUnicodeEscaped_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToUnicodeEscaped_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharset_Charset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharset_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_ClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "it is recommended to wrap resource 'classLoader' in try-with-resource declaration directly"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URLClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_convertClassesToClassNames_List' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_convertClassNamesToClasses_List' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAbbreviatedName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAbbreviatedName_Class_NegativeLen' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAbbreviatedName_Class_ZeroLen' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAbbreviatedName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAbbreviatedName_TooLongHint' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAllInterfaces_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getAllSuperclasses_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getCanonicalName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "InstantiationToGetClass",
              "shortDescription": {
                "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
              },
              "fullDescription": {
                "text": "\nAvoid instantiating an object just to call getClass() on it; use the .class public member instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#instantiationtogetclass",
              "help": {
                "text": "\nAvoid instantiating an object just to call getClass() on it; use the .class public member instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 4,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getCanonicalName_Class_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getPackageCanonicalName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getPackageCanonicalName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getPackageCanonicalName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getPackageName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getPackageName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getPackageName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getShortCanonicalName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getShortCanonicalName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getShortCanonicalName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'org.apache.commons.lang3': 'ClassUtilsTest' is already in scope because it is declared in an enclosing type"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getShortClassName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getShortClassName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getShortClassName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getSimpleName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getSimpleName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getSimpleName_Object_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_Autoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_ClassArray_ClassArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_ClassArray_ClassArray_Autoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_ClassArray_ClassArray_NoAutoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_DefaultUnboxing_Widening' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_NoAutoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_Unboxing_Widening' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isAssignable_Widening' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isInnerClass_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToClass_object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBinaryBeMsb0ToHexDigit_2args' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBinaryToHexDigit_2args' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBinaryToHexDigitMsb0_4bits_2args' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBinaryToHexDigitMsb0_bits' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_longClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_longClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nonEnumClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nullArrayElement' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nullClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nullElement' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVector_nullIterable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectorFromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nonEnumClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nullArrayElement' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nullClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nullElement' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectors_nullIterable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_generateBitVectorsFromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnum_defaultEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnum_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnum_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase_defaultEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumList' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumMap' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumMap_keyFunction' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getEnumSystemProperty' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getFirstEnumIgnoreCase_defaultEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isValidEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isValidEnum_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isValidEnumIgnoreCase' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isValidEnumIgnoreCase_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_processBitVector' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_processBitVector_longClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_processBitVector_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_processBitVectors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_processBitVectors_longClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_processBitVectors_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBiConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBiConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBiPredicate_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBiPredicate_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableCallable_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableCallable_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailablePredicate_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailablePredicate_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableSupplier_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableSupplier_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocaleLookupList_Locale' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocaleLookupList_LocaleLocale' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToLocale_1Part' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToLocale_2Part' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToLocale_3Part' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToLocale_Locale_defaults' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testComparatorMedian_emptyItems' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testComparatorMedian_nullComparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testComparatorMedian_nullItems' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_FLAG' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_BYTE1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_BYTE2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_CHAR' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_SHORT1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_SHORT2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_INT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_LONG1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_LONG2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_FLOAT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_DOUBLE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MAGIC_STRING' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testHashCodeMulti_multiple_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testHashCodeMulti_multiple_likeList' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testHashCodeMulti_multiple_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMedian_emptyItems' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMedian_nullItems' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_Object_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_String_Supplier' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_Supplier_Supplier' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'DUMMY' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemoveAll_StringPattern' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemoveAll_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemoveFirst_StringPattern' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemoveFirst_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemovePattern_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceAll_StringPatternString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceAll_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceFirst_StringPatternString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceFirst_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplacePattern_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused method parameters such as 'in'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this OutputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UselessParentheses",
              "shortDescription": {
                "text": "Useless parentheses."
              },
              "fullDescription": {
                "text": "\n            Parenthesized expressions are used to override the default operator precedence\n            rules. Parentheses whose removal would not change the relative nesting of operators\n            are unnecessary, because they don't change the semantics of the enclosing expression.\n\n            Some parentheses that strictly speaking are unnecessary, may still be considered useful\n            for readability. This rule allows to ignore violations on two kinds of unnecessary parentheses:\n            - \"Clarifying\" parentheses, which separate operators of difference precedence. While\n            unnecessary, they make precedence rules explicit, which may be useful for rarely used\n            operators. For example:\n            ```java\n                (a + b) & c // is equivalent to `a + b & c`, but probably clearer\n            ```\n            Unset the property `ignoreClarifying` to report them.\n\n            - \"Balancing\" parentheses, which are unnecessary but visually balance out another pair\n            of parentheses around an equality operator. For example, those two expressions are equivalent:\n            ```java\n                (a == null) != (b == null)\n                a == null != (b == null)\n            ```\n            The parentheses on the right are required, and the parentheses on the left are\n            just more visually pleasing. Unset the property `ignoreBalancing` to report them.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#uselessparentheses",
              "help": {
                "text": "\n            Parenthesized expressions are used to override the default operator precedence\n            rules. Parentheses whose removal would not change the relative nesting of operators\n            are unnecessary, because they don't change the semantics of the enclosing expression.\n\n            Some parentheses that strictly speaking are unnecessary, may still be considered useful\n            for readability. This rule allows to ignore violations on two kinds of unnecessary parentheses:\n            - \"Clarifying\" parentheses, which separate operators of difference precedence. While\n            unnecessary, they make precedence rules explicit, which may be useful for rarely used\n            operators. For example:\n            ```java\n                (a + b) & c // is equivalent to `a + b & c`, but probably clearer\n            ```\n            Unset the property `ignoreClarifying` to report them.\n\n            - \"Balancing\" parentheses, which are unnecessary but visually balance out another pair\n            of parentheses around an equality operator. For example, those two expressions are equivalent:\n            ```java\n                (a == null) != (b == null)\n                a == null != (b == null)\n            ```\n            The parentheses on the right are required, and the parentheses on the left are\n            just more visually pleasing. Unset the property `ignoreBalancing` to report them.\n\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_StringWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_StringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringCharArrayWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringCharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAny_StringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAnyIgnoreCase_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsIgnoreCase_LocaleIndependence' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsIgnoreCase_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsNone_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsNone_CharArrayWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsNone_CharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsNone_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsNone_StringWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsNone_StringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsOnly_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsOnly_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCompare_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCompare_StringStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCompareIgnoreCase_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCompareIgnoreCase_StringStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_charInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'CODE_POINT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAny_StringCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAny_StringCharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAny_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAny_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAny_StringStringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringCharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringStringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfIgnoreCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfIgnoreCase_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG1241_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG1241_2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_charInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOfAny_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOfIgnoreCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOfIgnoreCase_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsAsciiPrintable_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCountMatches_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCountMatches_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLeft_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMid_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRight_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstring_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstring_StringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringAfter_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringAfter_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringAfterLast_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringAfterLast_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringBefore_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringBefore_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringBeforeLast_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringBetween_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringBetween_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSubstringsBetween_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAbbreviate_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAbbreviate_StringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAbbreviate_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAbbreviate_StringStringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCenter_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCenter_StringIntChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCenter_StringIntString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefault_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefault_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfBlank_CharBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfBlank_StringBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfBlank_StringBuilders' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfBlank_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfEmpty_CharBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfEmpty_StringBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfEmpty_StringBuilders' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDefaultIfEmpty_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteWhitespace_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'StringUtilsTest': 'WHITESPACE' is already in scope because it is declared in an enclosing type"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'StringUtilsTest': 'NON_WHITESPACE' is already in scope because it is declared in an enclosing type"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDifference_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDifferenceAt_StringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDifferenceAt_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetBytes_Charset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetBytes_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetCommonPrefix_StringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFuzzyDistance_NullNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFuzzyDistance_NullStringLocale' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFuzzyDistance_StringNullLoclae' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFuzzyDistance_StringStringNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetIfBlank_StringStringSupplier' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetIfEmpty_StringStringSupplier' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_NullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_NullString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_StringNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_NullString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_NullStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringNullInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringStringNegativeInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayCharSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfBooleans' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfChars' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfDoubles' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfFloats' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfInts' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfLongs' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayOfShorts' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayString_EmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_ArrayString_NonEmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_IterableChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_IterableString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_IteratorChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_IteratorString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_List_CharDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_List_EmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_List_NonEmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_Objectarray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testJoin_Objects' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLeftPad_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLeftPad_StringIntChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLeftPad_StringIntString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLength_CharBuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testOverlay_StringStringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemove_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemove_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemoveIgnoreCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRepeat_CharInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRepeat_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRepeat_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StringStringArrayStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StringStringArrayStringArrayBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StringStringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceChars_StringCharChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceChars_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceIgnoreCase_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceIgnoreCase_StringStringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceOnce_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceOnceIgnoreCase_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReverse_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReverseDelimited_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRightPad_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRightPad_StringIntChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRightPad_StringIntString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRotate_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplit_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplit_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplit_StringString_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitByWholeSeparatorPreserveAllTokens_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitByWholeSeparatorPreserveAllTokens_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidUsingHardCodedIP",
              "shortDescription": {
                "text": "Do not hard code the IP address ${variableName}"
              },
              "fullDescription": {
                "text": "\nApplication with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#avoidusinghardcodedip",
              "help": {
                "text": "\nApplication with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitByWholeString_StringStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitByWholeString_StringStringBooleanInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitPreserveAllTokens_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitPreserveAllTokens_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSplitPreserveAllTokens_StringString_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidUsingHardCodedIP",
              "shortDescription": {
                "text": "Do not hard code the IP address expectedResults"
              },
              "fullDescription": {
                "text": "\nApplication with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#avoidusinghardcodedip",
              "help": {
                "text": "\nApplication with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSwapCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'TURKISH' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testTruncate_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testTruncate_StringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testUnwrap_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testUnwrap_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrap_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrap_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrapIfMissing_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrapIfMissing_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStrip_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStrip_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStripAccents_Korean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStripEnd_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStripStart_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStripToEmpty_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStripToNull_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `SystemProperties::getJavaSpecificationVersion`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `SystemProperties::getLineSeparator`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `SystemProperties::getUserName`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getIS_JAVA' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_IS_JAVA' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_IS_OS' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_IS_zOS' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_USER_NAME' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'Thread': 'currentThread' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused method parameters such as 'excludeFields'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testHexToByte_IllegalArgument' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testHexToByte_nullString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FinalFieldCouldBeStatic",
              "shortDescription": {
                "text": "This final field could be made static"
              },
              "fullDescription": {
                "text": "\nIf a final field is assigned to a compile-time constant, it could be made static, thus saving overhead\nin each object at runtime.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#finalfieldcouldbestatic",
              "help": {
                "text": "\nIf a final field is assigned to a compile-time constant, it could be made static, thus saving overhead\nin each object at runtime.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testNullLhs_4args' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testNullRhs_4args' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 'z'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 't'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'i1_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'i1_2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'i2_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'i2_2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UselessOperationOnImmutable",
              "shortDescription": {
                "text": "The result of an operation on an immutable object is ignored"
              },
              "fullDescription": {
                "text": "\nAn operation on an immutable object will not change the object itself since the result of the operation is a new object.\nTherefore, ignoring the result of such an operation is likely a mistake. The operation can probably be removed.\n\nThis rule recognizes the types `String`, `BigDecimal`, `BigInteger` or any type from `java.time.*` as immutable.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#uselessoperationonimmutable",
              "help": {
                "text": "\nAn operation on an immutable object will not change the object itself since the result of the operation is a new object.\nTherefore, ignoring the result of such an operation is likely a mistake. The operation can probably be removed.\n\nThis rule recognizes the types `String`, `BigDecimal`, `BigInteger` or any type from `java.time.*` as immutable.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_array_difference' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_difference_in_inherited_field' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_no_differences' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_no_differences_diff_exclude_annotated_field' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_no_differences_diff_excluded_field_and_exclude_annotated_field' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_no_differences_excluded_field' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_no_differences_inheritance' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_primitive_difference' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_transient_field_difference' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_ConstructorOption' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_ConstructorOption_ExcludeNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_ConstructorOptionNormal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_excludeNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_NonExclude' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExclude' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeArrayWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeArrayWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeCollectionWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeCollectionWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeEmptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeEmptyCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeNullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringExcludeNullCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringDefaultBehavior' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringInclude' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeArrayWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeArrayWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeCollectionWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeCollectionWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeEmptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeEmptyCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeNullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeNullArrayMultiplesValues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeNullCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringIncludeWithoutInformingFields' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithoutIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithRandomFieldsWithIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithRandomFieldsWithoutIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringSetIncludeWithArrayWithMultipleNullFields' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toStringSetIncludeWithMultipleNullFields' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The final method parameter name 'IncludeFields' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The final method parameter name 'IncludeFieldsValues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'LinkedList'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setUpToClass_invalid' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setUpToClass_valid' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'A_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'B_is_0' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'C_is_0' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'between_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_between_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'C_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'C_is_10' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'betweenExclusive_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'equalTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'greaterThan_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'greaterThanOrEqualTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'lessThan_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'lessThanOrEqualTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_ge_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_gt_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_le_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_lt_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'B_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'equalTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'greaterThan_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'lessThanOrEqualTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_gt_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_le_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'B_is_10' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'greaterThanOrEqualTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'lessThan_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_ge_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'static_lt_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The lambda parameter name 'CloseableObject' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `initializer::get`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "PrimitiveWrapperInstantiation",
              "shortDescription": {
                "text": "Do not use `new Integer(...)`, prefer `Integer.valueOf(...)`"
              },
              "fullDescription": {
                "text": "\n            Reports usages of primitive wrapper constructors. They are deprecated\n            since Java 9 and should not be used. Even before Java 9, they can\n            be replaced with usage of the corresponding static `valueOf` factory method\n            (which may be automatically inserted by the compiler since Java 1.5).\n            This has the advantage that it may reuse common instances instead of creating\n            a new instance each time.\n\n            Note that for `Boolean`, the named constants `Boolean.TRUE` and `Boolean.FALSE`\n            are preferred instead of `Boolean.valueOf`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#primitivewrapperinstantiation",
              "help": {
                "text": "\n            Reports usages of primitive wrapper constructors. They are deprecated\n            since Java 9 and should not be used. Even before Java 9, they can\n            be replaced with usage of the corresponding static `valueOf` factory method\n            (which may be automatically inserted by the compiler since Java 1.5).\n            This has the advantage that it may reuse common instances instead of creating\n            a new instance each time.\n\n            Note that for `Boolean`, the named constants `Boolean.TRUE` and `Boolean.FALSE`\n            are preferred instead of `Boolean.valueOf`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'IOExceptionConsumer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'NullPointerExceptionConsumer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstantFuture_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstantFuture_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused method parameters such as 'runTimeCheck'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'startTimeMillis'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'endTimeMillis'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'java.lang.reflect': 'InvocationHandler' is already in scope because it is imported in this file"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getMessage_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getRootCauseMessage_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testForEach_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testForEach_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testForEach_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testForEach_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testForEach_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testForEach_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetCause_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetCause_ThrowableArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetRootCause_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetRootCauseStackTrace_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetRootCauseStackTraceList_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableCount_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfType_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOfType_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsChecked_checked' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsChecked_error' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsChecked_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsChecked_unchecked' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsUnchecked_checked' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsUnchecked_error' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsUnchecked_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsUnchecked_unchecked' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPrintRootCauseStackTrace_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPrintRootCauseStackTrace_ThrowableStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPrintRootCauseStackTrace_ThrowableWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRemoveCommonFrames_ListList' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStream_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStream_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStream_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStream_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStream_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStream_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrowableOf_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrowableOf_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrowableOfType_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrowableOfType_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBooleanSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableBooleanSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleBinaryOperator_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleBinaryOperator_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleConsumer_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleConsumer_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToIntFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToIntFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToLongFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToLongFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntBinaryOperator_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntBinaryOperator_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntConsumer_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntConsumer_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntToDoubleFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntToDoubleFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntToLongFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableIntToLongFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongBinaryOperator_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongBinaryOperator_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongConsumer_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongConsumer_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongToDoubleFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongToDoubleFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongToIntFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableLongToIntFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableObjDoubleConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableObjDoubleConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableObjIntConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableObjIntConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableObjLongConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableObjLongConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableShortSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableShortSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToIntBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToIntBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToIntFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToIntFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToLongBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToLongBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToLongFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testThrows_FailableToLongFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_double' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_String_double' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_String_improper' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFactory_String_proper' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReducedFactory_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "BigIntegerInstantiation",
              "shortDescription": {
                "text": "Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)"
              },
              "fullDescription": {
                "text": "\nDon't create instances of already existing BigInteger (`BigInteger.ZERO`, `BigInteger.ONE`),\nfor Java 1.5 onwards, BigInteger.TEN and BigDecimal (`BigDecimal.ZERO`, `BigDecimal.ONE`, `BigDecimal.TEN`) and\nfor Java 9 onwards `BigInteger.TWO`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_performance.html#bigintegerinstantiation",
              "help": {
                "text": "\nDon't create instances of already existing BigInteger (`BigInteger.ZERO`, `BigInteger.ONE`),\nfor Java 1.5 onwards, BigInteger.TEN and BigDecimal (`BigDecimal.ZERO`, `BigDecimal.ONE`, `BigDecimal.TEN`) and\nfor Java 9 onwards `BigInteger.TWO`.\n        "
              },
              "properties": {
                "ruleset": "Performance",
                "priority": 3,
                "tags": [
                  "Performance"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_3' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_4' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_5' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_6' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_7' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCreateNumberFailure_8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidUsingOctalValues",
              "shortDescription": {
                "text": "Do not start a literal by 0 unless its an octal value"
              },
              "fullDescription": {
                "text": "\nInteger literals should not start with zero since this denotes that the rest of literal will be\ninterpreted as an octal value.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidusingoctalvalues",
              "help": {
                "text": "\nInteger literals should not start with zero since this denotes that the rest of literal will be\ninterpreted as an octal value.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'TestLang747' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxByte_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxByte_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxDouble_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxDouble_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxFloat_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxFloat_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxInt_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxInt_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxLong_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxLong_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxShort_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMaxShort_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinByte_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinByte_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinDouble_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinDouble_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinFloat_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinFloat_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinInt_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinInt_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinLong_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinLong_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinShort_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMinShort_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 'bc'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 'd'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 'i'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 'first'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 'o'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused constructor parameters such as 's'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UncommentedEmptyMethodBody",
              "shortDescription": {
                "text": "Document empty method body"
              },
              "fullDescription": {
                "text": "\nUncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_documentation.html#uncommentedemptymethodbody",
              "help": {
                "text": "\nUncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testInvokeMethod_VarArgsNotUniqueResolvable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testInvokeMethod_VarArgsWithNullValues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1114' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1190' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1348' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1524' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1698' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1702' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_820' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetRawType_LANG_1697' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_LANG_1311' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedPrivateMethod",
              "shortDescription": {
                "text": "Avoid unused private methods such as 'privateAnnotatedMethod()'."
              },
              "fullDescription": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedprivatemethod",
              "help": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedPrivateMethod",
              "shortDescription": {
                "text": "Avoid unused private methods such as 'privateAnnotatedMethod(String)'."
              },
              "fullDescription": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedprivatemethod",
              "help": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused method parameters such as 't'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'Hashtable'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused method parameters such as 'registryUnused'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testEscapedBraces_LANG_948' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testEscapedQuote_LANG_477' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_CharArray_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_FormattedString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_PrimitiveNumber' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_StrBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_StrBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_String_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_StringBuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_StringBuffer_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_StringBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppend_StringBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendAll_Array' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendAll_Collection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendAll_Iterator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendFixedWidthPadLeft_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendFixedWidthPadRight_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_CharArray_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_FormattedString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_PrimitiveNumber' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_StrBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_StrBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_String_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_StringBuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_StringBuffer_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_StringBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendln_StringBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendSeparator_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendSeparator_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendSeparator_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendSeparator_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendSeparator_String_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendSeparator_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendWithSeparators_Array' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendWithSeparators_Collection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testAppendWithSeparators_Iterator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_LANG_1131_EqualsWithNullStrBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this Reader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContains_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteAll_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteAll_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteAll_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteFirst_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteFirst_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDeleteFirst_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_String_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIndexOf_StrMatcher_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_String_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLastIndexOf_StrMatcher_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_int_int_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryCount' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryEndIndex' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryReplace' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryStartIndex' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceAll_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceAll_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceAll_StrMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceFirst_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceFirst_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplaceFirst_StrMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMapLookup_nullMap' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCharMatcher_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCharSetMatcher_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCharSetMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testStringMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReplacePartialString_noReplace' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_charArray_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_charArray_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_String_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReset_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReset_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCapitalize_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCapitalizeFully_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCapitalizeFullyWithDelimiters_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCapitalizeWithDelimiters_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContainsAllWords_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testInitials_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testInitials_String_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testUncapitalize_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testUncapitalizeWithDelimiters_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrap_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrap_StringIntStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrap_StringIntStringBooleanString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testHTML40_EXTENDED_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testISO8859_1_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "SuspiciousOctalEscape",
              "shortDescription": {
                "text": "Suspicious decimal characters following octal escape in string literal: \\27 + 9"
              },
              "fullDescription": {
                "text": "\nA suspicious octal escape sequence was found inside a String literal.\nThe Java language specification (section 3.10.6) says an octal\nescape sequence inside a literal String shall consist of a backslash\nfollowed by:\n\n    OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit\n\nAny octal escape sequence followed by non-octal digits can be confusing,\ne.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by\nthe literal character \"8\".\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#suspiciousoctalescape",
              "help": {
                "text": "\nA suspicious octal escape sequence was found inside a String literal.\nThe Java language specification (section 3.10.6) says an octal\nescape sequence inside a literal String shall consist of a backslash\nfollowed by:\n\n    OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit\n\nAny octal escape sequence followed by non-octal digits can be confusing,\ne.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by\nthe literal character \"8\".\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_Cal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_CalNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_CalNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_CalNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_Date' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_DateNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_DateNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameDay_DateNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_Cal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_CalNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_CalNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_CalNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_Date' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_DateNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_DateNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameInstant_DateNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameLocalTime_Cal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameLocalTime_CalNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameLocalTime_CalNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsSameLocalTime_CalNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG799_DE_FAIL' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG799_DE_OK' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG799_EN_FAIL' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG799_EN_OK' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG799_EN_WITH_DE_LOCALE' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testParse_EmptyParsers' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testParse_NullParsers' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testParseDate_InvalidDateString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testParseDate_NoDateString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testParseDate_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'oct31_01MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'oct31_01_02MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'oct31_01_02_03MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'oct31_01_02_03_04MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_changeDefault_Locale_DateInstance' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_changeDefault_Locale_DateTimeInstance' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getInstance' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getInstance_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getInstance_String_Locale' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getInstance_String_TimeZone' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getInstance_String_TimeZone_Locale' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG_1152' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG_1267' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG_954' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'sdfTime'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'fdfTime'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'FastDateFormat_PrinterTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_Equality_Hash' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'K' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'H' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG_831' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLANG_832' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'FastDateParser_MoreOrLessTest' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'FastDateParser_TimeZoneStrategyTest' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testTimeZoneStrategy_DateFormatSymbols' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testTimeZoneStrategy_TimeZone' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testTimeZoneStrategyPattern_DateFormatSymbols_getZoneStrings' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testTimeZoneStrategyPattern_TimeZone_getAvailableIDs' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_Long_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_Long_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_LongNoEra_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_LongNoEra_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_Short_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_Short_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_ShortNoEra_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLocales_ShortNoEra_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFormattable_padded' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFormattable_simple' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_and' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_and_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_andNot' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_andNot_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_cardinality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_clear' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_clearI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_clearII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_clearIntArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_clone' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_Constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_ConstructorInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_equals' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "EqualsNull",
              "shortDescription": {
                "text": "Avoid using equals() to compare against null"
              },
              "fullDescription": {
                "text": "\nTests for null should not use the equals() method. The '==' operator should be used instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#equalsnull",
              "help": {
                "text": "\nTests for null should not use the equals() method. The '==' operator should be used instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 1,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_flipI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_flipII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_hashCode' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_intersects' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_intersects_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isEmpty' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_length' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_nextClearBitI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_nextSetBitI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_or' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_or_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_or_FluentBitSetArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_previousClearBit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_previousSetBit' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setIIZ' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setInclusive' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setInt' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setIntArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setIZ' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_setRangeInclusive' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_size' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_stream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toLongArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_xor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_xor_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.apache.commons.lang3.HashSetvBitSetTest'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.List'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.Collection'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.ArrayList'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.results.Result'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.lang.reflect.Field'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.HashSetvBitSetTest_jmhType'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_testBitSet_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testBitSet_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ControlStatementBraces",
              "shortDescription": {
                "text": "This statement should have braces"
              },
              "fullDescription": {
                "text": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#controlstatementbraces",
              "help": {
                "text": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testBitSet_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testBitSet_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testBitSet_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testBitSet_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testBitSet_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testBitSet_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testBitSet_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name '_jmh_tryInit_f_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_testHashSet_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testHashSet_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testHashSet_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testHashSet_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testHashSet_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testHashSet_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testHashSet_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testHashSet_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testHashSet_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeBitSetRemoveAll_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeBitSetRemoveAll_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeBitSetRemoveAll_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeBitSetRemoveAll_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeBitSetRemoveAll_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeBitSetRemoveAll_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeBitSetRemoveAll_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeBitSetRemoveAll_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'HashSetvBitSetTest_timeExtractRemoveAll_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeExtractRemoveAll_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeExtractRemoveAll_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeExtractRemoveAll_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeExtractRemoveAll_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeExtractRemoveAll_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeExtractRemoveAll_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'timeExtractRemoveAll_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'timeExtractRemoveAll_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.apache.commons.lang3.StringUtilsIsMixedCaseTest'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseBeginningMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseBeginningMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseBeginningMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseBeginningMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseBeginningMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseBeginningMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseBeginningMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseBeginningMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseEndMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseEndMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseEndMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseEndMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseEndMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseEndMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseEndMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseEndMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseMiddleMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseMiddleMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseMiddleMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseMiddleMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseMiddleMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseMiddleMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseMiddleMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseMiddleMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseNoneMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseNoneMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseNoneMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseNoneMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseNoneMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseNoneMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'newIsMixedCaseNoneMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'newIsMixedCaseNoneMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseBeginningMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseBeginningMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseBeginningMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseBeginningMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseBeginningMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseBeginningMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseBeginningMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseBeginningMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseEndMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseEndMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseEndMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseEndMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseEndMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseEndMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseEndMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseEndMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseMiddleMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseMiddleMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseMiddleMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseMiddleMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseMiddleMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseMiddleMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseMiddleMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseMiddleMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseNoneMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseNoneMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseNoneMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseNoneMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseNoneMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseNoneMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'oldIsMixedCaseNoneMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'oldIsMixedCaseNoneMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/AnnotationUtils.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 8,
                  "endLine": 45,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/AnnotationUtils.java"
                },
                "region": {
                  "startLine": 308,
                  "startColumn": 13,
                  "endLine": 308,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/AnnotationUtils.java"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 12,
                  "endLine": 355,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 8,
                  "endLine": 33,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 3,
          "message": {
            "text": "The static method name 'init_Aarch_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 25,
                  "endLine": 103,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 4,
          "message": {
            "text": "The static method name 'init_IA64_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 25,
                  "endLine": 107,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 5,
          "message": {
            "text": "The static method name 'init_IA64_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 25,
                  "endLine": 111,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 6,
          "message": {
            "text": "The static method name 'init_PPC_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 25,
                  "endLine": 115,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 7,
          "message": {
            "text": "The static method name 'init_PPC_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 25,
                  "endLine": 119,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 8,
          "message": {
            "text": "The static method name 'init_RISCV_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 25,
                  "endLine": 123,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 9,
          "message": {
            "text": "The static method name 'init_RISCV_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 25,
                  "endLine": 127,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 10,
          "message": {
            "text": "The static method name 'init_X86_32Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 25,
                  "endLine": 131,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 11,
          "message": {
            "text": "The static method name 'init_X86_64Bit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 25,
                  "endLine": 135,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArchUtils.java"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 12,
                  "endLine": 145,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArraySorter.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 8,
                  "endLine": 58,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 2764,
                  "startColumn": 20,
                  "endLine": 2764,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 2804,
                  "startColumn": 20,
                  "endLine": 2804,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 2844,
                  "startColumn": 20,
                  "endLine": 2844,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 2884,
                  "startColumn": 20,
                  "endLine": 2884,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 2924,
                  "startColumn": 20,
                  "endLine": 2924,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 2964,
                  "startColumn": 20,
                  "endLine": 2964,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 3004,
                  "startColumn": 20,
                  "endLine": 3004,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 3044,
                  "startColumn": 20,
                  "endLine": 3044,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 3093,
                  "startColumn": 20,
                  "endLine": 3093,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6021,
                  "startColumn": 15,
                  "endLine": 6021,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6131,
                  "startColumn": 15,
                  "endLine": 6131,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6186,
                  "startColumn": 15,
                  "endLine": 6186,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6241,
                  "startColumn": 15,
                  "endLine": 6241,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6296,
                  "startColumn": 15,
                  "endLine": 6296,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6351,
                  "startColumn": 15,
                  "endLine": 6351,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6406,
                  "startColumn": 15,
                  "endLine": 6406,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 6463,
                  "startColumn": 15,
                  "endLine": 6463,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 7826,
                  "startColumn": 20,
                  "endLine": 7826,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 7860,
                  "startColumn": 20,
                  "endLine": 7860,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 7894,
                  "startColumn": 20,
                  "endLine": 7894,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 7928,
                  "startColumn": 20,
                  "endLine": 7928,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 7962,
                  "startColumn": 20,
                  "endLine": 7962,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 7996,
                  "startColumn": 20,
                  "endLine": 7996,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8030,
                  "startColumn": 20,
                  "endLine": 8030,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8064,
                  "startColumn": 20,
                  "endLine": 8064,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8107,
                  "startColumn": 20,
                  "endLine": 8107,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8762,
                  "startColumn": 20,
                  "endLine": 8762,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8797,
                  "startColumn": 20,
                  "endLine": 8797,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8816,
                  "startColumn": 20,
                  "endLine": 8816,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8834,
                  "startColumn": 20,
                  "endLine": 8834,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8852,
                  "startColumn": 20,
                  "endLine": 8852,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8870,
                  "startColumn": 20,
                  "endLine": 8870,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8888,
                  "startColumn": 20,
                  "endLine": 8888,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8906,
                  "startColumn": 20,
                  "endLine": 8906,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8924,
                  "startColumn": 20,
                  "endLine": 8924,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8960,
                  "startColumn": 20,
                  "endLine": 8960,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 8985,
                  "startColumn": 20,
                  "endLine": 8985,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9009,
                  "startColumn": 20,
                  "endLine": 9009,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9034,
                  "startColumn": 20,
                  "endLine": 9034,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9058,
                  "startColumn": 20,
                  "endLine": 9058,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9083,
                  "startColumn": 20,
                  "endLine": 9083,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9107,
                  "startColumn": 20,
                  "endLine": 9107,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9132,
                  "startColumn": 20,
                  "endLine": 9132,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9156,
                  "startColumn": 20,
                  "endLine": 9156,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9181,
                  "startColumn": 20,
                  "endLine": 9181,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9205,
                  "startColumn": 20,
                  "endLine": 9205,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9230,
                  "startColumn": 20,
                  "endLine": 9230,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9254,
                  "startColumn": 20,
                  "endLine": 9254,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9322,
                  "startColumn": 20,
                  "endLine": 9322,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9346,
                  "startColumn": 20,
                  "endLine": 9346,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9411,
                  "startColumn": 20,
                  "endLine": 9411,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9439,
                  "startColumn": 20,
                  "endLine": 9439,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ArrayUtils.java"
                },
                "region": {
                  "startLine": 9464,
                  "startColumn": 12,
                  "endLine": 9464,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "endLine": 36,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 13,
                  "endLine": 529,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseEqualsToCompareStrings",
          "ruleIndex": 14,
          "message": {
            "text": "Use equals() to compare strings instead of '==' or '!='"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 13,
                  "endLine": 529,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 13,
                  "endLine": 532,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseEqualsToCompareStrings",
          "ruleIndex": 14,
          "message": {
            "text": "Use equals() to compare strings instead of '==' or '!='"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 13,
                  "endLine": 532,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseEqualsToCompareStrings",
          "ruleIndex": 14,
          "message": {
            "text": "Use equals() to compare strings instead of '==' or '!='"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 13,
                  "endLine": 741,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/BooleanUtils.java"
                },
                "region": {
                  "startLine": 1220,
                  "startColumn": 12,
                  "endLine": 1220,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharEncoding.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 8,
                  "endLine": 41,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 8,
                  "endLine": 26,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 12,
                  "endLine": 390,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingletonClassReturningNewInstance",
          "ruleIndex": 15,
          "message": {
            "text": "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharSet.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 27,
                  "endLine": 152,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharSetUtils.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharSetUtils.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 12,
                  "endLine": 244,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharSetUtils.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 12,
                  "endLine": 244,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharUtils.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/CharUtils.java"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 12,
                  "endLine": 514,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Charsets.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassLoaderUtils.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassLoaderUtils.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 12,
                  "endLine": 87,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassPathUtils.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassPathUtils.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 12,
                  "endLine": 156,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 8,
                  "endLine": 51,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 20,
                  "endLine": 200,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 20,
                  "endLine": 350,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 17,
          "message": {
            "text": "Avoid using implementation types like 'LinkedHashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 15,
                  "endLine": 353,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 62,
                  "endLine": 365,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 20,
                  "endLine": 387,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 1465,
                  "startColumn": 20,
                  "endLine": 1465,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 20,
                  "endLine": 1538,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 1588,
                  "startColumn": 20,
                  "endLine": 1588,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ClassUtils.java"
                },
                "region": {
                  "startLine": 1629,
                  "startColumn": 12,
                  "endLine": 1629,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Conversion.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 8,
                  "endLine": 62,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 19,
          "message": {
            "text": "The static method name 'binaryToHexDigitMsb0_4bits' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Conversion.java"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 24,
                  "endLine": 256,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 19,
          "message": {
            "text": "The static method name 'binaryToHexDigitMsb0_4bits' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Conversion.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 24,
                  "endLine": 276,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 8,
                  "endLine": 37,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 15,
                  "endLine": 148,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "endLine": 177,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 39,
                  "endLine": 391,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 39,
                  "endLine": 409,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 15,
                  "endLine": 410,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/EnumUtils.java"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 12,
                  "endLine": 429,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 8,
                  "endLine": 75,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 41,
                  "endLine": 89,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 45,
                  "endLine": 89,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 41,
                  "endLine": 114,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 45,
                  "endLine": 114,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 42,
                  "endLine": 139,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 46,
                  "endLine": 139,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 20,
                  "endLine": 295,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 24,
                  "endLine": 295,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 20,
                  "endLine": 324,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 24,
                  "endLine": 324,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 20,
                  "endLine": 352,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 24,
                  "endLine": 352,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 20,
                  "endLine": 366,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 24,
                  "endLine": 366,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 20,
                  "endLine": 379,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 24,
                  "endLine": 379,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 34,
                  "endLine": 479,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 34,
                  "endLine": 494,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 34,
                  "endLine": 541,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 20,
                  "endLine": 588,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "GenericsNaming",
          "ruleIndex": 21,
          "message": {
            "text": "Generics names should be a one letter long and upper case."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 24,
                  "endLine": 588,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 23,
          "message": {
            "text": "Lambda expression could be written as a method reference: `resources[i]::run`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Functions.java"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 32,
                  "endLine": 631,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/LocaleUtils.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/LocaleUtils.java"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 12,
                  "endLine": 364,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 9,
                  "endLine": 82,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 13,
                  "endLine": 312,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 27,
                  "endLine": 341,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 24,
                  "endLine": 362,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 24,
                  "endLine": 383,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 26,
                  "endLine": 404,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 25,
                  "endLine": 425,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 23,
                  "endLine": 446,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 24,
                  "endLine": 467,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 25,
                  "endLine": 488,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The static method name 'CONST' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 25,
                  "endLine": 510,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 25,
          "message": {
            "text": "The static method name 'CONST_BYTE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 24,
                  "endLine": 534,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 26,
          "message": {
            "text": "The static method name 'CONST_SHORT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 561,
                  "startColumn": 25,
                  "endLine": 561,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "SuspiciousEqualsMethodName",
          "ruleIndex": 27,
          "message": {
            "text": "The method name and parameter number are suspiciously close to equals(Object)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 27,
                  "endLine": 612,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 9,
                  "endLine": 1019,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 29,
          "message": {
            "text": "Avoid using implementation types like 'TreeSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 1098,
                  "startColumn": 15,
                  "endLine": 1098,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 29,
          "message": {
            "text": "Avoid using implementation types like 'TreeSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 1117,
                  "startColumn": 15,
                  "endLine": 1117,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 1160,
                  "startColumn": 19,
                  "endLine": 1160,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ObjectUtils.java"
                },
                "region": {
                  "startLine": 1398,
                  "startColumn": 12,
                  "endLine": 1398,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RandomStringUtils.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "NonExhaustiveSwitch",
          "ruleIndex": 30,
          "message": {
            "text": "Switch statements or expressions should be exhaustive, add a default case (or missing enum branches)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RandomStringUtils.java"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 17,
                  "endLine": 311,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RandomStringUtils.java"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 12,
                  "endLine": 555,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RandomUtils.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 8,
                  "endLine": 37,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RandomUtils.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 12,
                  "endLine": 241,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Range.java"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 9,
                  "endLine": 425,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Range.java"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 9,
                  "endLine": 441,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Range.java"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 9,
                  "endLine": 454,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Range.java"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 9,
                  "endLine": 470,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Range.java"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 9,
                  "endLine": 483,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Range.java"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 9,
                  "endLine": 529,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RegExUtils.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RegExUtils.java"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 12,
                  "endLine": 489,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/RuntimeEnvironment.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SerializationException.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 12,
                  "endLine": 40,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SerializationUtils.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 8,
                  "endLine": 46,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 32,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'ex' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SerializationUtils.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 27,
                  "endLine": 98,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SerializationUtils.java"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 12,
                  "endLine": 265,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Streams.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 8,
                  "endLine": 67,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 8,
                  "endLine": 44,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 12,
                  "endLine": 793,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 8,
                  "endLine": 125,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 861,
                  "startColumn": 13,
                  "endLine": 861,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseEqualsToCompareStrings",
          "ruleIndex": 14,
          "message": {
            "text": "Use equals() to compare strings instead of '==' or '!='"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 861,
                  "startColumn": 13,
                  "endLine": 861,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 13,
                  "endLine": 954,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseEqualsToCompareStrings",
          "ruleIndex": 14,
          "message": {
            "text": "Use equals() to compare strings instead of '==' or '!='"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 13,
                  "endLine": 954,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 9,
                  "endLine": 1018,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1106,
                  "startColumn": 9,
                  "endLine": 1108,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 33,
          "message": {
            "text": "This if statement can be replaced by `return {condition} || {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1311,
                  "startColumn": 9,
                  "endLine": 1313,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1347,
                  "startColumn": 9,
                  "endLine": 1349,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1757,
                  "startColumn": 20,
                  "endLine": 1757,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1953,
                  "startColumn": 13,
                  "endLine": 1953,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 1959,
                  "startColumn": 9,
                  "endLine": 1961,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 34,
          "message": {
            "text": "The final local variable name 'DEFAULT_SCALING_FACTOR' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 2332,
                  "startColumn": 22,
                  "endLine": 2332,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidBranchingStatementAsLastInLoop",
          "ruleIndex": 35,
          "message": {
            "text": "Avoid using a branching statement as the last in a loop."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 2959,
                  "startColumn": 13,
                  "endLine": 2959,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 3123,
                  "startColumn": 13,
                  "endLine": 3123,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseLocaleWithCaseConversions",
          "ruleIndex": 36,
          "message": {
            "text": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 5366,
                  "startColumn": 16,
                  "endLine": 5366,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "ForLoopCanBeForeach",
          "ruleIndex": 37,
          "message": {
            "text": "This for loop can be replaced by a foreach loop"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 5838,
                  "startColumn": 9,
                  "endLine": 5842,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseLocaleWithCaseConversions",
          "ruleIndex": 36,
          "message": {
            "text": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 6421,
                  "startColumn": 29,
                  "endLine": 6421,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 6435,
                  "startColumn": 18,
                  "endLine": 6435,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7455,
                  "startColumn": 20,
                  "endLine": 7455,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7650,
                  "startColumn": 20,
                  "endLine": 7650,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7666,
                  "startColumn": 15,
                  "endLine": 7666,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7869,
                  "startColumn": 20,
                  "endLine": 7869,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7920,
                  "startColumn": 20,
                  "endLine": 7920,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7938,
                  "startColumn": 29,
                  "endLine": 7938,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7959,
                  "startColumn": 29,
                  "endLine": 7959,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 7979,
                  "startColumn": 29,
                  "endLine": 7979,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 8039,
                  "startColumn": 20,
                  "endLine": 8039,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 8043,
                  "startColumn": 9,
                  "endLine": 8045,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 8873,
                  "startColumn": 20,
                  "endLine": 8873,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 8897,
                  "startColumn": 20,
                  "endLine": 8897,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 8971,
                  "startColumn": 20,
                  "endLine": 8971,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseLocaleWithCaseConversions",
          "ruleIndex": 36,
          "message": {
            "text": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 9389,
                  "startColumn": 16,
                  "endLine": 9389,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/StringUtils.java"
                },
                "region": {
                  "startLine": 9599,
                  "startColumn": 12,
                  "endLine": 9599,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemProperties.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 14,
                  "endLine": 33,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemProperties.java"
                },
                "region": {
                  "startLine": 4064,
                  "startColumn": 12,
                  "endLine": 4064,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemUtils.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 8,
                  "endLine": 35,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemUtils.java"
                },
                "region": {
                  "startLine": 2082,
                  "startColumn": 16,
                  "endLine": 2082,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemUtils.java"
                },
                "region": {
                  "startLine": 2122,
                  "startColumn": 9,
                  "endLine": 2124,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemUtils.java"
                },
                "region": {
                  "startLine": 2158,
                  "startColumn": 9,
                  "endLine": 2160,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemUtils.java"
                },
                "region": {
                  "startLine": 2198,
                  "startColumn": 12,
                  "endLine": 2198,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/SystemUtils.java"
                },
                "region": {
                  "startLine": 2198,
                  "startColumn": 12,
                  "endLine": 2198,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 8,
                  "endLine": 41,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "endLine": 51,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 31,
                  "endLine": 218,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 66,
                  "endLine": 218,
                  "endColumn": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 50,
                  "endLine": 242,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 35,
                  "endLine": 511,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 11,
                  "endLine": 569,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/ThreadUtils.java"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 12,
                  "endLine": 581,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Validate.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 8,
                  "endLine": 48,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ForLoopCanBeForeach",
          "ruleIndex": 37,
          "message": {
            "text": "This for loop can be replaced by a foreach loop"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Validate.java"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 9,
                  "endLine": 676,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Validate.java"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 12,
                  "endLine": 1253,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/Validate.java"
                },
                "region": {
                  "startLine": 1253,
                  "startColumn": 12,
                  "endLine": 1253,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 119,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 13,
                  "endLine": 234,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 13,
                  "endLine": 377,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 13,
                  "endLine": 433,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 13,
                  "endLine": 489,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 13,
                  "endLine": 550,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 611,
                  "startColumn": 13,
                  "endLine": 611,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 13,
                  "endLine": 667,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 13,
                  "endLine": 723,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 13,
                  "endLine": 796,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 13,
                  "endLine": 874,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 13,
                  "endLine": 930,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/DiffBuilder.java"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 23,
                  "endLine": 496,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 13,
                  "endLine": 221,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 13,
                  "endLine": 411,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 13,
                  "endLine": 456,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 13,
                  "endLine": 501,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 13,
                  "endLine": 552,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 13,
                  "endLine": 603,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 13,
                  "endLine": 648,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 13,
                  "endLine": 695,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 13,
                  "endLine": 727,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 13,
                  "endLine": 765,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 13,
                  "endLine": 810,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 931,
                  "startColumn": 13,
                  "endLine": 931,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java"
                },
                "region": {
                  "startLine": 1009,
                  "startColumn": 13,
                  "endLine": 1009,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 13,
                  "endLine": 187,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/IDKey.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 9,
                  "endLine": 60,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 12,
                  "endLine": 65,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/RecursiveToStringStyle.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 12,
                  "endLine": 65,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/Reflection.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 26,
                  "endColumn": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 9,
                  "endLine": 649,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/StandardToStringStyle.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/StandardToStringStyle.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 12,
                  "endLine": 46,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 43,
                  "endLine": 95,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidStringBufferField",
          "ruleIndex": 45,
          "message": {
            "text": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 19,
                  "endLine": 201,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 9,
                  "endLine": 91,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 46,
          "message": {
            "text": "Avoid using implementation types like 'WeakHashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 38,
                  "endLine": 690,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java"
                },
                "region": {
                  "startLine": 861,
                  "startColumn": 15,
                  "endLine": 861,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/compare/ComparableUtils.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/compare/ComparableUtils.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 19,
                  "endLine": 39,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/AtomicInitializer.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 13,
                  "endLine": 133,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 16,
                  "endLine": 123,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/BackgroundInitializer.java"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 35,
                  "endLine": 399,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 8,
                  "endLine": 90,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/CircuitBreakingException.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 12,
                  "endLine": 34,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentException.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 15,
                  "endLine": 41,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 15,
                  "endLine": 44,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 8,
                  "endLine": 33,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 49,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'cex' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 19,
                  "endLine": 184,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 49,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'cex' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/ConcurrentUtils.java"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 19,
                  "endLine": 314,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 16,
                  "endLine": 570,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/FutureTasks.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/LazyInitializer.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 24,
                  "endLine": 108,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 50,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/Memoizer.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 23,
                  "endLine": 135,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 19,
                  "endLine": 110,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 12,
                  "endLine": 242,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 21,
                  "endLine": 299,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 31,
                  "endLine": 348,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.java"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 9,
                  "endLine": 382,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 52,
          "message": {
            "text": "Ensure that resources like this ScheduledThreadPoolExecutor object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/TimedSemaphore.java"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 47,
                  "endLine": 222,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/locks/LockingVisitors.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 8,
                  "endLine": 82,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/locks/LockingVisitors.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 38,
                  "endLine": 272,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/locks/LockingVisitors.java"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 38,
                  "endLine": 299,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/concurrent/locks/LockingVisitors.java"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 12,
                  "endLine": 395,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 42,
                  "endLine": 128,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 15,
                  "endLine": 351,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/event/EventUtils.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 8,
                  "endLine": 34,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 50,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/event/EventUtils.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 19,
                  "endLine": 101,
                  "endColumn": 97
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/event/EventUtils.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 12,
                  "endLine": 129,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 8,
                  "endLine": 43,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 29,
                  "endLine": 371,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 12,
                  "endLine": 1110,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Consumers.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 34,
                  "endLine": 304,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 34,
                  "endLine": 319,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 34,
                  "endLine": 334,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 34,
                  "endLine": 349,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 34,
                  "endLine": 364,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 34,
                  "endLine": 379,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 34,
                  "endLine": 427,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 34,
                  "endLine": 524,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 42,
                  "endLine": 531,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Failable.java"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 38,
                  "endLine": 541,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Suppliers.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/function/Suppliers.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 12,
                  "endLine": 70,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/Fraction.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 16,
                  "endLine": 144,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/Fraction.java"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 13,
                  "endLine": 572,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/IEEE754rUtils.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/IEEE754rUtils.java"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 12,
                  "endLine": 258,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 8,
                  "endLine": 33,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ForLoopCanBeForeach",
          "ruleIndex": 37,
          "message": {
            "text": "This for loop can be replaced by a foreach loop"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
                },
                "region": {
                  "startLine": 585,
                  "startColumn": 20,
                  "endLine": 589,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
                },
                "region": {
                  "startLine": 737,
                  "startColumn": 13,
                  "endLine": 739,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/math/NumberUtils.java"
                },
                "region": {
                  "startLine": 1860,
                  "startColumn": 12,
                  "endLine": 1860,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableBoolean.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 12,
                  "endLine": 48,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableBoolean.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 9,
                  "endLine": 103,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "endLine": 191,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "endLine": 43,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "endLine": 180,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "endLine": 180,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableObject.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 12,
                  "endLine": 44,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 9,
                  "endLine": 180,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 8,
                  "endLine": 46,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 12,
                  "endLine": 294,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 8,
                  "endLine": 44,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "endLine": 127,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 21,
                  "endLine": 197,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 13,
                  "endLine": 381,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 558,
                  "startColumn": 21,
                  "endLine": 558,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 720,
                  "startColumn": 13,
                  "endLine": 720,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 12,
                  "endLine": 880,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/InheritanceUtils.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 8,
                  "endLine": 26,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/InheritanceUtils.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 12,
                  "endLine": 67,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 7,
                  "endLine": 33,
                  "endColumn": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 17,
                  "endLine": 333,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 8,
                  "endLine": 62,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 20,
                  "endLine": 225,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "LogicInversion",
          "ruleIndex": 54,
          "message": {
            "text": "Use opposite operator instead of the logic complement operator."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 70,
                  "endLine": 238,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 55,
          "message": {
            "text": "Avoid using implementation types like 'TreeMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 15,
                  "endLine": 399,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 17,
                  "endLine": 839,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 12,
                  "endLine": 1021,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 8,
                  "endLine": 50,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 56,
          "message": {
            "text": "Unnecessary qualifier 'TypeUtils': 'anyToString' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 48,
                  "endLine": 68,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 56,
          "message": {
            "text": "Unnecessary qualifier 'TypeUtils': 'anyToString' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 52,
                  "endLine": 80,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 19,
                  "endLine": 215,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 9,
                  "endLine": 392,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 20,
                  "endLine": 429,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 9,
                  "endLine": 503,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 20,
                  "endLine": 803,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 15,
                  "endLine": 820,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 20,
                  "endLine": 856,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 20,
                  "endLine": 952,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 963,
                  "startColumn": 20,
                  "endLine": 963,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 1469,
                  "startColumn": 21,
                  "endLine": 1469,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java"
                },
                "region": {
                  "startLine": 1855,
                  "startColumn": 12,
                  "endLine": 1855,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/stream/IntStreams.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 8,
                  "endLine": 29,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/stream/IntStreams.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "endLine": 57,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/stream/Streams.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 8,
                  "endLine": 82,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/stream/Streams.java"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 12,
                  "endLine": 856,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 15,
                  "endLine": 186,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 15,
                  "endLine": 187,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 9,
                  "endLine": 281,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 62,
                  "endLine": 336,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/FormattableUtils.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/FormattableUtils.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 12,
                  "endLine": 148,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/FormattableUtils.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 12,
                  "endLine": 148,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 9,
                  "endLine": 98,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 9,
                  "endLine": 183,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 9,
                  "endLine": 183,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 9,
                  "endLine": 214,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 9,
                  "endLine": 214,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "SuspiciousEqualsMethodName",
          "ruleIndex": 27,
          "message": {
            "text": "The method name and parameter number are suspiciously close to equals(Object)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 1865,
                  "startColumn": 20,
                  "endLine": 1865,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 1893,
                  "startColumn": 13,
                  "endLine": 1893,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "MissingOverride",
          "ruleIndex": 57,
          "message": {
            "text": "The method 'isEmpty()' is missing an @Override annotation."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrBuilder.java"
                },
                "region": {
                  "startLine": 2286,
                  "startColumn": 20,
                  "endLine": 2286,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrLookup.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 15,
                  "endLine": 154,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrMatcher.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 109,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrMatcher.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 9,
                  "endLine": 109,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrMatcher.java"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "endLine": 179,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrMatcher.java"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 9,
                  "endLine": 179,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrMatcher.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 15,
                  "endLine": 379,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 9,
                  "endLine": 740,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 9,
                  "endLine": 760,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 9,
                  "endLine": 775,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 31,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java"
                },
                "region": {
                  "startLine": 815,
                  "startColumn": 9,
                  "endLine": 817,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java"
                },
                "region": {
                  "startLine": 1150,
                  "startColumn": 32,
                  "endLine": 1151,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java"
                },
                "region": {
                  "startLine": 1188,
                  "startColumn": 41,
                  "endLine": 1188,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloneMethodReturnTypeMustMatchClassName",
          "ruleIndex": 58,
          "message": {
            "text": "The return type of the clone() method must be the class name when implements Cloneable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/StrTokenizer.java"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 19,
                  "endLine": 446,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/WordUtils.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 8,
                  "endLine": 38,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseLocaleWithCaseConversions",
          "ruleIndex": 36,
          "message": {
            "text": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/WordUtils.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 27,
                  "endLine": 169,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/WordUtils.java"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 12,
                  "endLine": 714,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/WordUtils.java"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 12,
                  "endLine": 714,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 59,
          "message": {
            "text": "The static method name 'APOS_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 30,
                  "endLine": 361,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 60,
          "message": {
            "text": "The static method name 'APOS_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 30,
                  "endLine": 369,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 61,
          "message": {
            "text": "The static method name 'BASIC_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 30,
                  "endLine": 379,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 62,
          "message": {
            "text": "The static method name 'BASIC_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 30,
                  "endLine": 387,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 63,
          "message": {
            "text": "The static method name 'HTML40_EXTENDED_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 30,
                  "endLine": 397,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 64,
          "message": {
            "text": "The static method name 'HTML40_EXTENDED_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 30,
                  "endLine": 405,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 65,
          "message": {
            "text": "The static method name 'ISO8859_1_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 30,
                  "endLine": 428,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 66,
          "message": {
            "text": "The static method name 'ISO8859_1_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 30,
                  "endLine": 436,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 67,
          "message": {
            "text": "The static method name 'JAVA_CTRL_CHARS_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 30,
                  "endLine": 446,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 68,
          "message": {
            "text": "The static method name 'JAVA_CTRL_CHARS_UNESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 30,
                  "endLine": 454,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 19,
                  "endLine": 35,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 19,
                  "endLine": 36,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid using implementation types like 'EnumSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 19,
                  "endLine": 59,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingleMethodSingleton",
          "ruleIndex": 69,
          "message": {
            "text": "Class contains multiple getInstance methods. Please review."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/AbstractFormatCache.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 15
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 32,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'ex' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/AbstractFormatCache.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 23,
                  "endLine": 120,
                  "endColumn": 101
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingleMethodSingleton",
          "ruleIndex": 69,
          "message": {
            "text": "Class contains multiple getInstance methods. Please review."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/CalendarUtils.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 8,
                  "endLine": 31,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingletonClassReturningNewInstance",
          "ruleIndex": 15,
          "message": {
            "text": "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/CalendarUtils.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 33,
                  "endLine": 47,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingletonClassReturningNewInstance",
          "ruleIndex": 15,
          "message": {
            "text": "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/CalendarUtils.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 26,
                  "endLine": 58,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 12,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/CalendarUtils.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 20,
                  "endLine": 123,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 8,
                  "endLine": 39,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 12,
                  "endLine": 415,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DateUtils.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DateUtils.java"
                },
                "region": {
                  "startLine": 1787,
                  "startColumn": 12,
                  "endLine": 1787,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 8,
                  "endLine": 80,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 56,
                  "endLine": 104,
                  "endColumn": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 24,
                  "endLine": 269,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 24,
                  "endLine": 275,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 24,
                  "endLine": 281,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 24,
                  "endLine": 287,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 24,
                  "endLine": 293,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 24,
                  "endLine": 299,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 24,
                  "endLine": 305,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 15,
                  "endLine": 669,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 12,
                  "endLine": 782,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationUtils.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 8,
                  "endLine": 39,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/DurationUtils.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 12,
                  "endLine": 228,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingleMethodSingleton",
          "ruleIndex": 69,
          "message": {
            "text": "Class contains multiple getInstance methods. Please review."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 8,
                  "endLine": 74,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateParser.java"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 35,
                  "endLine": 462,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateParser.java"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 21,
                  "endLine": 528,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateParser.java"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 21,
                  "endLine": 562,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 29,
          "message": {
            "text": "Avoid using implementation types like 'TreeSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateParser.java"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 15,
                  "endLine": 708,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImplicitSwitchFallThrough",
          "ruleIndex": 70,
          "message": {
            "text": "This switch case may be reached by fallthrough from the previous case"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateParser.java"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 13,
                  "endLine": 755,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "DefaultLabelNotLastInSwitch",
          "ruleIndex": 71,
          "message": {
            "text": "The default label should be the last label in a switch statement or expression"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDateParser.java"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 9,
                  "endLine": 905,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 72,
          "message": {
            "text": "The class name 'Iso8601_Rule' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 20,
                  "endLine": 160,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 41,
                  "endLine": 389,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 9,
                  "endLine": 648,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 729,
                  "startColumn": 9,
                  "endLine": 729,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 9,
                  "endLine": 766,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "NonExhaustiveSwitch",
          "ruleIndex": 30,
          "message": {
            "text": "Switch statements or expressions should be exhaustive, add a default case (or missing enum branches)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 946,
                  "startColumn": 13,
                  "endLine": 966,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImplicitSwitchFallThrough",
          "ruleIndex": 70,
          "message": {
            "text": "This switch case may be reached by fallthrough from the previous case"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 13,
                  "endLine": 950,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImplicitSwitchFallThrough",
          "ruleIndex": 70,
          "message": {
            "text": "This switch case may be reached by fallthrough from the previous case"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 957,
                  "startColumn": 13,
                  "endLine": 957,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImplicitSwitchFallThrough",
          "ruleIndex": 70,
          "message": {
            "text": "This switch case may be reached by fallthrough from the previous case"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 13,
                  "endLine": 964,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 1302,
                  "startColumn": 36,
                  "endLine": 1302,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 73,
          "message": {
            "text": "The final local variable name 'ERAs' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 1328,
                  "startColumn": 24,
                  "endLine": 1328,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 74,
          "message": {
            "text": "The final local variable name 'AmPmStrings' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java"
                },
                "region": {
                  "startLine": 1333,
                  "startColumn": 24,
                  "endLine": 1333,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/FastTimeZone.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/time/TimeZones.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 8,
                  "endLine": 29,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/tuple/MutablePair.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 12,
                  "endLine": 128,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/tuple/MutableTriple.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 12,
                  "endLine": 111,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloneMethodReturnTypeMustMatchClassName",
          "ruleIndex": 58,
          "message": {
            "text": "The return type of the clone() method must be the class name when implements Cloneable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/main/java/org/apache/commons/lang3/util/FluentBitSet.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 19,
                  "endLine": 192,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotExtendJavaLangThrowable",
          "ruleIndex": 75,
          "message": {
            "text": "Exceptions should not extend java.lang.Throwable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 34,
                  "endLine": 105,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 44,
                  "endLine": 432,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 76,
          "message": {
            "text": "The JUnit 5 test method name 'testSetAll_IntFunction' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsSetTest.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 77,
          "message": {
            "text": "The JUnit 5 test method name 'testSetAll_Supplier' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsSetTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "endLine": 48,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 78,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_LANG_1261' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "OverrideBothEqualsAndHashcode",
          "ruleIndex": 79,
          "message": {
            "text": "Ensure you override both equals() and hashCode()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 28,
                  "endLine": 239,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 80,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6198,
                  "startColumn": 17,
                  "endLine": 6198,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 81,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_byte' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6206,
                  "startColumn": 17,
                  "endLine": 6206,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 82,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6219,
                  "startColumn": 17,
                  "endLine": 6219,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 83,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_double' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6232,
                  "startColumn": 17,
                  "endLine": 6232,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 84,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_float' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6248,
                  "startColumn": 17,
                  "endLine": 6248,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 85,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6264,
                  "startColumn": 17,
                  "endLine": 6264,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 86,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_long' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6280,
                  "startColumn": 17,
                  "endLine": 6280,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 87,
          "message": {
            "text": "The JUnit 5 test method name 'testToObject_short' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6296,
                  "startColumn": 17,
                  "endLine": 6296,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 88,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6310,
                  "startColumn": 17,
                  "endLine": 6310,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 89,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_boolean_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6319,
                  "startColumn": 17,
                  "endLine": 6319,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 90,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_byte' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6329,
                  "startColumn": 17,
                  "endLine": 6329,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 91,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_byte_byte' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6343,
                  "startColumn": 17,
                  "endLine": 6343,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 92,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6360,
                  "startColumn": 17,
                  "endLine": 6360,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 93,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6374,
                  "startColumn": 17,
                  "endLine": 6374,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 94,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_double' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6391,
                  "startColumn": 17,
                  "endLine": 6391,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 95,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_double_double' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6406,
                  "startColumn": 17,
                  "endLine": 6406,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 96,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_float' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6422,
                  "startColumn": 17,
                  "endLine": 6422,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 97,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_float_float' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6437,
                  "startColumn": 17,
                  "endLine": 6437,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 98,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6453,
                  "startColumn": 17,
                  "endLine": 6453,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 99,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6465,
                  "startColumn": 17,
                  "endLine": 6465,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 100,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_intNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6477,
                  "startColumn": 17,
                  "endLine": 6477,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 101,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_long' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6484,
                  "startColumn": 17,
                  "endLine": 6484,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 102,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_long_long' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6499,
                  "startColumn": 17,
                  "endLine": 6499,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 103,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_short' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6515,
                  "startColumn": 17,
                  "endLine": 6515,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 104,
          "message": {
            "text": "The JUnit 5 test method name 'testToPrimitive_short_short' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6529,
                  "startColumn": 17,
                  "endLine": 6529,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 105,
          "message": {
            "text": "The JUnit 5 test method name 'testToStringArray_array' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6559,
                  "startColumn": 17,
                  "endLine": 6559,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 106,
          "message": {
            "text": "The JUnit 5 test method name 'testToStringArray_array_string' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java"
                },
                "region": {
                  "startLine": 6571,
                  "startColumn": 17,
                  "endLine": 6571,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 107,
          "message": {
            "text": "The JUnit 5 test method name 'test_booleanValues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 108,
          "message": {
            "text": "The JUnit 5 test method name 'test_forEach' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 109,
          "message": {
            "text": "The JUnit 5 test method name 'test_isFalse_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 17,
                  "endLine": 57,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 110,
          "message": {
            "text": "The JUnit 5 test method name 'test_isNotFalse_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 111,
          "message": {
            "text": "The JUnit 5 test method name 'test_isNotTrue_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "endLine": 71,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 112,
          "message": {
            "text": "The JUnit 5 test method name 'test_isTrue_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 113,
          "message": {
            "text": "The JUnit 5 test method name 'test_negate_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 114,
          "message": {
            "text": "The JUnit 5 test method name 'test_primitiveValues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 115,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 17,
                  "endLine": 97,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 116,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 117,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 17,
                  "endLine": 111,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 118,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_int_int_int_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 17,
                  "endLine": 117,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 119,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_Integer_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 120,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_Integer_Integer_Integer_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 17,
                  "endLine": 134,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 121,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_Integer_Integer_Integer_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 17,
                  "endLine": 140,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 122,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 123,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 17,
                  "endLine": 195,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 124,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_String_String_String_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 125,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBoolean_String_String_String_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "endLine": 213,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 126,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanDefaultIfNull_Boolean_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 17,
                  "endLine": 218,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 127,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 17,
                  "endLine": 228,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 128,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 129,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_int_int_int_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 17,
                  "endLine": 242,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 130,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 17,
                  "endLine": 247,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 131,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer_Integer_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "endLine": 255,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 132,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 17,
                  "endLine": 270,
                  "endColumn": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 133,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 17,
                  "endLine": 276,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 134,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 17,
                  "endLine": 282,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 135,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_String_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 17,
                  "endLine": 320,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 136,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_String_String_String_String_noMatch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 17,
                  "endLine": 331,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 137,
          "message": {
            "text": "The JUnit 5 test method name 'test_toBooleanObject_String_String_String_String_nullValue' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 17,
                  "endLine": 336,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 138,
          "message": {
            "text": "The JUnit 5 test method name 'test_toInteger_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 17,
                  "endLine": 341,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 139,
          "message": {
            "text": "The JUnit 5 test method name 'test_toInteger_boolean_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 17,
                  "endLine": 347,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 140,
          "message": {
            "text": "The JUnit 5 test method name 'test_toInteger_Boolean_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 17,
                  "endLine": 353,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 141,
          "message": {
            "text": "The JUnit 5 test method name 'test_toIntegerObject_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 17,
                  "endLine": 360,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 142,
          "message": {
            "text": "The JUnit 5 test method name 'test_toIntegerObject_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 17,
                  "endLine": 366,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 143,
          "message": {
            "text": "The JUnit 5 test method name 'test_toIntegerObject_boolean_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 17,
                  "endLine": 373,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 144,
          "message": {
            "text": "The JUnit 5 test method name 'test_toIntegerObject_Boolean_Integer_Integer_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 17,
                  "endLine": 381,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 145,
          "message": {
            "text": "The JUnit 5 test method name 'test_toString_boolean_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 17,
                  "endLine": 392,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 146,
          "message": {
            "text": "The JUnit 5 test method name 'test_toString_Boolean_String_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 17,
                  "endLine": 398,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 147,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringOnOff_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 17,
                  "endLine": 405,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 148,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringOnOff_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 17,
                  "endLine": 411,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 149,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringTrueFalse_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 17,
                  "endLine": 418,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 150,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringTrueFalse_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 17,
                  "endLine": 424,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 151,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringYesNo_boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 17,
                  "endLine": 431,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 152,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringYesNo_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 17,
                  "endLine": 437,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 153,
          "message": {
            "text": "The JUnit 5 test method name 'test_values' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 17,
                  "endLine": 444,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 154,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 17,
                  "endLine": 451,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 155,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 17,
                  "endLine": 456,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 156,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 17,
                  "endLine": 461,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 157,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 466,
                  "startColumn": 17,
                  "endLine": 466,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 158,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 17,
                  "endLine": 493,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 159,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 17,
                  "endLine": 568,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 160,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 17,
                  "endLine": 573,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 161,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 17,
                  "endLine": 578,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 162,
          "message": {
            "text": "The JUnit 5 test method name 'testAnd_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 17,
                  "endLine": 597,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 163,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 17,
                  "endLine": 650,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 164,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 17,
                  "endLine": 655,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 165,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 17,
                  "endLine": 660,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 166,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_validInput_1item' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 17,
                  "endLine": 665,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 167,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 674,
                  "startColumn": 17,
                  "endLine": 674,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 168,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_validInput_2ItemsNullsTreatedAsFalse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 17,
                  "endLine": 685,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 169,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 694,
                  "startColumn": 17,
                  "endLine": 694,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 170,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 17,
                  "endLine": 717,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 171,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 17,
                  "endLine": 722,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 172,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_primitive_validInput_1item' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 727,
                  "startColumn": 17,
                  "endLine": 727,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 173,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 17,
                  "endLine": 734,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 174,
          "message": {
            "text": "The JUnit 5 test method name 'testOneHot_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 745,
                  "startColumn": 17,
                  "endLine": 745,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 175,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 768,
                  "startColumn": 17,
                  "endLine": 768,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 176,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 17,
                  "endLine": 773,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 177,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 17,
                  "endLine": 778,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 178,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 783,
                  "startColumn": 17,
                  "endLine": 783,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 179,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 17,
                  "endLine": 810,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 180,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 885,
                  "startColumn": 17,
                  "endLine": 885,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 181,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 17,
                  "endLine": 890,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 182,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 17,
                  "endLine": 895,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 183,
          "message": {
            "text": "The JUnit 5 test method name 'testOr_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 914,
                  "startColumn": 17,
                  "endLine": 914,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 184,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_object_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 949,
                  "startColumn": 17,
                  "endLine": 949,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 185,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_object_nullElementInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 17,
                  "endLine": 954,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 186,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_object_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 17,
                  "endLine": 959,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 187,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_object_validInput_1items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 964,
                  "startColumn": 17,
                  "endLine": 964,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 188,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_object_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 977,
                  "startColumn": 17,
                  "endLine": 977,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 189,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_object_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 17,
                  "endLine": 1000,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 190,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_primitive_emptyInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 17,
                  "endLine": 1086,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 191,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_primitive_nullInput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 1091,
                  "startColumn": 17,
                  "endLine": 1091,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 192,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_primitive_validInput_1items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 17,
                  "endLine": 1096,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 193,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_primitive_validInput_2items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 1109,
                  "startColumn": 17,
                  "endLine": 1109,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 194,
          "message": {
            "text": "The JUnit 5 test method name 'testXor_primitive_validInput_3items' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java"
                },
                "region": {
                  "startLine": 1132,
                  "startColumn": 17,
                  "endLine": 1132,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 195,
          "message": {
            "text": "The JUnit 5 test method name 'testMustBeSupportedJava1_3_1_and_above' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharEncodingTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 196,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_is' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 197,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isIn_Normal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "endLine": 56,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 198,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isIn_Reversed' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 199,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isIn_Same' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 200,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isNot' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "endLine": 83,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 201,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isNotIn_Normal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 202,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isNotIn_Reversed' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 203,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructorAccessors_isNotIn_Same' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 204,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_Char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 205,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_Charrange' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 17,
                  "endLine": 148,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 206,
          "message": {
            "text": "The JUnit 5 test method name 'testEquals_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharRangeTest.java"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 17,
                  "endLine": 270,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 207,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_combo' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 208,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_comboNegated' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "endLine": 83,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 209,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_oddCombinations' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 210,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_oddDash' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 17,
                  "endLine": 173,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 211,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_oddNegate' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "endLine": 221,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 212,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_simple' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 17,
                  "endLine": 281,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 204,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_Char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 17,
                  "endLine": 321,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 206,
          "message": {
            "text": "The JUnit 5 test method name 'testEquals_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 17,
                  "endLine": 364,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 213,
          "message": {
            "text": "The JUnit 5 test method name 'testGetInstance_Stringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetTest.java"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 17,
                  "endLine": 402,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 214,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "endLine": 46,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 215,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 216,
          "message": {
            "text": "The JUnit 5 test method name 'testCount_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 217,
          "message": {
            "text": "The JUnit 5 test method name 'testCount_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 218,
          "message": {
            "text": "The JUnit 5 test method name 'testDelete_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 219,
          "message": {
            "text": "The JUnit 5 test method name 'testDelete_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 17,
                  "endLine": 140,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 220,
          "message": {
            "text": "The JUnit 5 test method name 'testKeep_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "endLine": 166,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 221,
          "message": {
            "text": "The JUnit 5 test method name 'testKeep_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 17,
                  "endLine": 183,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 222,
          "message": {
            "text": "The JUnit 5 test method name 'testSqueeze_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 223,
          "message": {
            "text": "The JUnit 5 test method name 'testSqueeze_StringStringarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 17,
                  "endLine": 225,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 224,
          "message": {
            "text": "The instance method name 'run_CharSet' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 17,
                  "endLine": 120,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 225,
          "message": {
            "text": "The instance method name 'run_CharUtils_isAsciiNumeric' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 17,
                  "endLine": 131,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 226,
          "message": {
            "text": "The instance method name 'run_inlined_CharUtils_isAsciiNumeric' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "endLine": 142,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 227,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAscii_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 60,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 228,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiAlpha_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 229,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiAlphaLower_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 230,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiAlphanumeric_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 231,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiAlphaUpper_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 232,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiControl_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 233,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiNumeric_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "endLine": 164,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 234,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiPrintable_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 17,
                  "endLine": 182,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 235,
          "message": {
            "text": "The JUnit 5 test method name 'testToChar_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 17,
                  "endLine": 200,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 236,
          "message": {
            "text": "The JUnit 5 test method name 'testToChar_Character_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 17,
                  "endLine": 207,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 237,
          "message": {
            "text": "The JUnit 5 test method name 'testToChar_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 17,
                  "endLine": 214,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 238,
          "message": {
            "text": "The JUnit 5 test method name 'testToChar_String_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 17,
                  "endLine": 222,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 239,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharacterObject_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 240,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharacterObject_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 17,
                  "endLine": 253,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 241,
          "message": {
            "text": "The JUnit 5 test method name 'testToIntValue_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 17,
                  "endLine": 262,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 242,
          "message": {
            "text": "The JUnit 5 test method name 'testToIntValue_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 17,
                  "endLine": 277,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 243,
          "message": {
            "text": "The JUnit 5 test method name 'testToIntValue_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 17,
                  "endLine": 284,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 244,
          "message": {
            "text": "The JUnit 5 test method name 'testToIntValue_Character_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 17,
                  "endLine": 292,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 245,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 17,
                  "endLine": 300,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 246,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 17,
                  "endLine": 324,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 247,
          "message": {
            "text": "The JUnit 5 test method name 'testToUnicodeEscaped_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 17,
                  "endLine": 331,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 248,
          "message": {
            "text": "The JUnit 5 test method name 'testToUnicodeEscaped_Character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharUtilsTest.java"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 17,
                  "endLine": 346,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 249,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharset_Charset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharsetsTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 250,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharset_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/CharsetsTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 17,
                  "endLine": 39,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 251,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_ClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassLoaderUtilsTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "endLine": 48,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 252,
          "message": {
            "text": "it is recommended to wrap resource 'classLoader' in try-with-resource declaration directly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassLoaderUtilsTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 31,
                  "endLine": 52,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 253,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URLClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassLoaderUtilsTest.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 17,
                  "endLine": 59,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 254,
          "message": {
            "text": "The JUnit 5 test method name 'test_convertClassesToClassNames_List' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 255,
          "message": {
            "text": "The JUnit 5 test method name 'test_convertClassNamesToClasses_List' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 256,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAbbreviatedName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 17,
                  "endLine": 158,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 257,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAbbreviatedName_Class_NegativeLen' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 17,
                  "endLine": 170,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 258,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAbbreviatedName_Class_ZeroLen' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 17,
                  "endLine": 176,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 259,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAbbreviatedName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 17,
                  "endLine": 181,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 260,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAbbreviatedName_TooLongHint' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 17,
                  "endLine": 210,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 261,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAllInterfaces_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 17,
                  "endLine": 217,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 262,
          "message": {
            "text": "The JUnit 5 test method name 'test_getAllSuperclasses_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 263,
          "message": {
            "text": "The JUnit 5 test method name 'test_getCanonicalName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 17,
                  "endLine": 241,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 69,
                  "endLine": 280,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 265,
          "message": {
            "text": "The JUnit 5 test method name 'test_getCanonicalName_Class_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 17,
                  "endLine": 286,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 55,
                  "endLine": 325,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 266,
          "message": {
            "text": "The JUnit 5 test method name 'test_getClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 17,
                  "endLine": 333,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 267,
          "message": {
            "text": "The JUnit 5 test method name 'test_getName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 17,
                  "endLine": 338,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 86,
                  "endLine": 377,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 268,
          "message": {
            "text": "The JUnit 5 test method name 'test_getName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 17,
                  "endLine": 384,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 269,
          "message": {
            "text": "The JUnit 5 test method name 'test_getPackageCanonicalName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 17,
                  "endLine": 402,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 85,
                  "endLine": 415,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 270,
          "message": {
            "text": "The JUnit 5 test method name 'test_getPackageCanonicalName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 17,
                  "endLine": 422,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 271,
          "message": {
            "text": "The JUnit 5 test method name 'test_getPackageCanonicalName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 17,
                  "endLine": 442,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 272,
          "message": {
            "text": "The JUnit 5 test method name 'test_getPackageName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 17,
                  "endLine": 460,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 76,
                  "endLine": 489,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 273,
          "message": {
            "text": "The JUnit 5 test method name 'test_getPackageName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 17,
                  "endLine": 494,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 274,
          "message": {
            "text": "The JUnit 5 test method name 'test_getPackageName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 17,
                  "endLine": 501,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 275,
          "message": {
            "text": "The JUnit 5 test method name 'test_getShortCanonicalName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 17,
                  "endLine": 509,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 59,
                  "endLine": 522,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 276,
          "message": {
            "text": "The JUnit 5 test method name 'test_getShortCanonicalName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 17,
                  "endLine": 530,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 277,
          "message": {
            "text": "The JUnit 5 test method name 'test_getShortCanonicalName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 17,
                  "endLine": 550,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 278,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 68,
                  "endLine": 552,
                  "endColumn": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 278,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 64,
                  "endLine": 553,
                  "endColumn": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 68,
                  "endLine": 581,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 279,
          "message": {
            "text": "Unnecessary qualifier 'org.apache.commons.lang3': 'ClassUtilsTest' is already in scope because it is declared in an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 72,
                  "endLine": 580,
                  "endColumn": 111
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 20,
                  "endLine": 583,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 279,
          "message": {
            "text": "Unnecessary qualifier 'org.apache.commons.lang3': 'ClassUtilsTest' is already in scope because it is declared in an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 24,
                  "endLine": 582,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 280,
          "message": {
            "text": "The JUnit 5 test method name 'test_getShortClassName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 587,
                  "startColumn": 17,
                  "endLine": 587,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 72,
                  "endLine": 628,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 281,
          "message": {
            "text": "The JUnit 5 test method name 'test_getShortClassName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 17,
                  "endLine": 635,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 282,
          "message": {
            "text": "The JUnit 5 test method name 'test_getShortClassName_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 655,
                  "startColumn": 17,
                  "endLine": 655,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 283,
          "message": {
            "text": "The JUnit 5 test method name 'test_getSimpleName_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 663,
                  "startColumn": 17,
                  "endLine": 663,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 51,
                  "endLine": 703,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 284,
          "message": {
            "text": "The JUnit 5 test method name 'test_getSimpleName_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 17,
                  "endLine": 708,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 285,
          "message": {
            "text": "The JUnit 5 test method name 'test_getSimpleName_Object_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 17,
                  "endLine": 717,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 286,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 17,
                  "endLine": 726,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 287,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_Autoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 17,
                  "endLine": 752,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 288,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_ClassArray_ClassArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 17,
                  "endLine": 776,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 289,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_ClassArray_ClassArray_Autoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 17,
                  "endLine": 804,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 290,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_ClassArray_ClassArray_NoAutoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 832,
                  "startColumn": 17,
                  "endLine": 832,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 291,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_DefaultUnboxing_Widening' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 860,
                  "startColumn": 17,
                  "endLine": 860,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 292,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_NoAutoboxing' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 943,
                  "startColumn": 17,
                  "endLine": 943,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 293,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_Unboxing_Widening' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 17,
                  "endLine": 967,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 294,
          "message": {
            "text": "The JUnit 5 test method name 'test_isAssignable_Widening' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1050,
                  "startColumn": 17,
                  "endLine": 1050,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 295,
          "message": {
            "text": "The JUnit 5 test method name 'test_isInnerClass_Class' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1133,
                  "startColumn": 17,
                  "endLine": 1133,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "InstantiationToGetClass",
          "ruleIndex": 264,
          "message": {
            "text": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1136,
                  "startColumn": 44,
                  "endLine": 1138,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 55,
          "message": {
            "text": "Avoid using implementation types like 'TreeMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1146,
                  "startColumn": 15,
                  "endLine": 1146,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 278,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 22,
                  "endLine": 1183,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 278,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1184,
                  "startColumn": 22,
                  "endLine": 1184,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 278,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1185,
                  "startColumn": 22,
                  "endLine": 1185,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 278,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Map' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1186,
                  "startColumn": 22,
                  "endLine": 1186,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 296,
          "message": {
            "text": "The JUnit 5 test method name 'testToClass_object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java"
                },
                "region": {
                  "startLine": 1448,
                  "startColumn": 17,
                  "endLine": 1448,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 297,
          "message": {
            "text": "The JUnit 5 test method name 'testBinaryBeMsb0ToHexDigit_2args' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ConversionTest.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 17,
                  "endLine": 105,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 298,
          "message": {
            "text": "The JUnit 5 test method name 'testBinaryToHexDigit_2args' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ConversionTest.java"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 17,
                  "endLine": 201,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 299,
          "message": {
            "text": "The JUnit 5 test method name 'testBinaryToHexDigitMsb0_4bits_2args' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ConversionTest.java"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 300,
          "message": {
            "text": "The JUnit 5 test method name 'testBinaryToHexDigitMsb0_bits' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ConversionTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "endLine": 255,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 301,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 302,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_longClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 17,
                  "endLine": 72,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 303,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_longClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 304,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 17,
                  "endLine": 84,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 305,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nonEnumClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 17,
                  "endLine": 94,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 306,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 307,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nullArrayElement' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 308,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 17,
                  "endLine": 112,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 309,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nullClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 17,
                  "endLine": 117,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 310,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nullElement' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 311,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVector_nullIterable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 312,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectorFromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 17,
                  "endLine": 134,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 313,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 17,
                  "endLine": 155,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 314,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 17,
                  "endLine": 180,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 315,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nonEnumClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 17,
                  "endLine": 190,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 316,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 17,
                  "endLine": 197,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 317,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nullArrayElement' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 17,
                  "endLine": 202,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 318,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 319,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nullClassWithArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "endLine": 213,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 320,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nullElement' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 17,
                  "endLine": 218,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 321,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectors_nullIterable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 17,
                  "endLine": 224,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 322,
          "message": {
            "text": "The JUnit 5 test method name 'test_generateBitVectorsFromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 17,
                  "endLine": 229,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 323,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "endLine": 255,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 324,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnum_defaultEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 17,
                  "endLine": 264,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 325,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnum_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 17,
                  "endLine": 282,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 326,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnum_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 17,
                  "endLine": 289,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 327,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 17,
                  "endLine": 294,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 328,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase_defaultEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 17,
                  "endLine": 303,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 329,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase_nonEnumClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 17,
                  "endLine": 321,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 330,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumIgnoreCase_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 17,
                  "endLine": 328,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 331,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumList' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 17,
                  "endLine": 333,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 332,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumMap' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 17,
                  "endLine": 342,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 333,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumMap_keyFunction' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 17,
                  "endLine": 360,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 334,
          "message": {
            "text": "The JUnit 5 test method name 'test_getEnumSystemProperty' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 17,
                  "endLine": 406,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 335,
          "message": {
            "text": "The JUnit 5 test method name 'test_getFirstEnumIgnoreCase_defaultEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 17,
                  "endLine": 421,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 336,
          "message": {
            "text": "The JUnit 5 test method name 'test_isValidEnum' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 17,
                  "endLine": 436,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 337,
          "message": {
            "text": "The JUnit 5 test method name 'test_isValidEnum_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 17,
                  "endLine": 445,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 338,
          "message": {
            "text": "The JUnit 5 test method name 'test_isValidEnumIgnoreCase' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 17,
                  "endLine": 450,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 339,
          "message": {
            "text": "The JUnit 5 test method name 'test_isValidEnumIgnoreCase_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 17,
                  "endLine": 459,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 340,
          "message": {
            "text": "The JUnit 5 test method name 'test_processBitVector' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 17,
                  "endLine": 464,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 341,
          "message": {
            "text": "The JUnit 5 test method name 'test_processBitVector_longClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 17,
                  "endLine": 483,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 342,
          "message": {
            "text": "The JUnit 5 test method name 'test_processBitVector_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 17,
                  "endLine": 488,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 343,
          "message": {
            "text": "The JUnit 5 test method name 'test_processBitVectors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 17,
                  "endLine": 494,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 344,
          "message": {
            "text": "The JUnit 5 test method name 'test_processBitVectors_longClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 17,
                  "endLine": 534,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 345,
          "message": {
            "text": "The JUnit 5 test method name 'test_processBitVectors_nullClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 17,
                  "endLine": 581,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 346,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 17,
                  "endLine": 799,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 347,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 17,
                  "endLine": 814,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 348,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 17,
                  "endLine": 830,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 349,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 845,
                  "startColumn": 17,
                  "endLine": 845,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 350,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiPredicate_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 860,
                  "startColumn": 17,
                  "endLine": 860,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 351,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiPredicate_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 17,
                  "endLine": 875,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 352,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableCallable_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 890,
                  "startColumn": 17,
                  "endLine": 890,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 353,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableCallable_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 17,
                  "endLine": 905,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 354,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 920,
                  "startColumn": 17,
                  "endLine": 920,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 355,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 936,
                  "startColumn": 17,
                  "endLine": 936,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 356,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 17,
                  "endLine": 952,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 357,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 17,
                  "endLine": 967,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 358,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailablePredicate_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 982,
                  "startColumn": 17,
                  "endLine": 982,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 359,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailablePredicate_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 997,
                  "startColumn": 17,
                  "endLine": 997,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 360,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 1012,
                  "startColumn": 17,
                  "endLine": 1012,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 361,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 17,
                  "endLine": 1028,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 362,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableSupplier_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 1043,
                  "startColumn": 17,
                  "endLine": 1043,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 363,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableSupplier_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/FunctionsTest.java"
                },
                "region": {
                  "startLine": 1058,
                  "startColumn": 17,
                  "endLine": 1058,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/HashSetvBitSetTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 47,
                  "endLine": 51,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/HashSetvBitSetTest.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 364,
          "message": {
            "text": "The JUnit 5 test method name 'testLocaleLookupList_Locale' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 17,
                  "endLine": 361,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 365,
          "message": {
            "text": "The JUnit 5 test method name 'testLocaleLookupList_LocaleLocale' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 17,
                  "endLine": 381,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 366,
          "message": {
            "text": "The JUnit 5 test method name 'testToLocale_1Part' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 367,
          "message": {
            "text": "The JUnit 5 test method name 'testToLocale_2Part' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
                },
                "region": {
                  "startLine": 497,
                  "startColumn": 17,
                  "endLine": 497,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 368,
          "message": {
            "text": "The JUnit 5 test method name 'testToLocale_3Part' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 17,
                  "endLine": 529,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 369,
          "message": {
            "text": "The JUnit 5 test method name 'testToLocale_Locale_defaults' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 17,
                  "endLine": 552,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 370,
          "message": {
            "text": "The JUnit 5 test method name 'testComparatorMedian_emptyItems' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 17,
                  "endLine": 310,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 371,
          "message": {
            "text": "The JUnit 5 test method name 'testComparatorMedian_nullComparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 17,
                  "endLine": 315,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 372,
          "message": {
            "text": "The JUnit 5 test method name 'testComparatorMedian_nullItems' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 17,
                  "endLine": 321,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 373,
          "message": {
            "text": "The final local variable name 'MAGIC_FLAG' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 23,
                  "endLine": 372,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 374,
          "message": {
            "text": "The final local variable name 'MAGIC_BYTE1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 20,
                  "endLine": 373,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 375,
          "message": {
            "text": "The final local variable name 'MAGIC_BYTE2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 20,
                  "endLine": 374,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 376,
          "message": {
            "text": "The final local variable name 'MAGIC_CHAR' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 20,
                  "endLine": 375,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 377,
          "message": {
            "text": "The final local variable name 'MAGIC_SHORT1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 21,
                  "endLine": 376,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 378,
          "message": {
            "text": "The final local variable name 'MAGIC_SHORT2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 21,
                  "endLine": 377,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 379,
          "message": {
            "text": "The final local variable name 'MAGIC_INT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 19,
                  "endLine": 378,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 380,
          "message": {
            "text": "The final local variable name 'MAGIC_LONG1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 20,
                  "endLine": 379,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 381,
          "message": {
            "text": "The final local variable name 'MAGIC_LONG2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 20,
                  "endLine": 380,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 382,
          "message": {
            "text": "The final local variable name 'MAGIC_FLOAT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 21,
                  "endLine": 381,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 383,
          "message": {
            "text": "The final local variable name 'MAGIC_DOUBLE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 22,
                  "endLine": 382,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 384,
          "message": {
            "text": "The final local variable name 'MAGIC_STRING' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 22,
                  "endLine": 383,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 385,
          "message": {
            "text": "The JUnit 5 test method name 'testHashCodeMulti_multiple_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 17,
                  "endLine": 521,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 386,
          "message": {
            "text": "The JUnit 5 test method name 'testHashCodeMulti_multiple_likeList' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 527,
                  "startColumn": 17,
                  "endLine": 527,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 387,
          "message": {
            "text": "The JUnit 5 test method name 'testHashCodeMulti_multiple_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 17,
                  "endLine": 542,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 388,
          "message": {
            "text": "The JUnit 5 test method name 'testMedian_emptyItems' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 17,
                  "endLine": 735,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 389,
          "message": {
            "text": "The JUnit 5 test method name 'testMedian_nullItems' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 17,
                  "endLine": 740,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 390,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 843,
                  "startColumn": 17,
                  "endLine": 843,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 391,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_Object_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 849,
                  "startColumn": 17,
                  "endLine": 849,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 392,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_String_Supplier' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 17,
                  "endLine": 855,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 393,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_Supplier_Supplier' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 17,
                  "endLine": 864,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 394,
          "message": {
            "text": "The final local variable name 'DUMMY' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 22,
                  "endLine": 97,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java"
                },
                "region": {
                  "startLine": 530,
                  "startColumn": 16,
                  "endLine": 530,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 395,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveAll_StringPattern' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 17,
                  "endLine": 45,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 396,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveAll_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 397,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveFirst_StringPattern' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 398,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveFirst_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 399,
          "message": {
            "text": "The JUnit 5 test method name 'testRemovePattern_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 400,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceAll_StringPatternString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 17,
                  "endLine": 139,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 401,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceAll_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "endLine": 165,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 402,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceFirst_StringPatternString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 17,
                  "endLine": 191,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 403,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceFirst_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "endLine": 213,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 404,
          "message": {
            "text": "The JUnit 5 test method name 'testReplacePattern_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/RegExUtilsTest.java"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 17,
                  "endLine": 240,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 405,
          "message": {
            "text": "Avoid unused method parameters such as 'in'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 53,
                  "endLine": 48,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "endLine": 63,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 15,
                  "endLine": 80,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 15,
                  "endLine": 122,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 15,
                  "endLine": 177,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 15,
                  "endLine": 267,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 406,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 28,
                  "endLine": 311,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "UselessParentheses",
          "ruleIndex": 407,
          "message": {
            "text": "Useless parentheses."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StreamsTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 30,
                  "endLine": 146,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 204,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_Char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "endLine": 37,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 408,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 409,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_StringWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 17,
                  "endLine": 67,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 410,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_StringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 411,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "endLine": 90,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 412,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringCharArrayWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 17,
                  "endLine": 111,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 413,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringCharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 17,
                  "endLine": 126,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 214,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 414,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 17,
                  "endLine": 161,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 415,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 17,
                  "endLine": 185,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 416,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAny_StringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 17,
                  "endLine": 199,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 417,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAnyIgnoreCase_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "endLine": 213,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 418,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsIgnoreCase_LocaleIndependence' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 17,
                  "endLine": 235,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 419,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsIgnoreCase_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 17,
                  "endLine": 254,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 420,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsNone_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 17,
                  "endLine": 289,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 421,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsNone_CharArrayWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 17,
                  "endLine": 318,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 422,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsNone_CharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 17,
                  "endLine": 333,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 423,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsNone_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 17,
                  "endLine": 347,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 424,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsNone_StringWithBadSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "endLine": 375,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 425,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsNone_StringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 17,
                  "endLine": 390,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 426,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsOnly_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 17,
                  "endLine": 404,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 427,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsOnly_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsContainsTest.java"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 17,
                  "endLine": 430,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 428,
          "message": {
            "text": "The JUnit 5 test method name 'testCompare_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 429,
          "message": {
            "text": "The JUnit 5 test method name 'testCompare_StringStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 430,
          "message": {
            "text": "The JUnit 5 test method name 'testCompareIgnoreCase_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 431,
          "message": {
            "text": "The JUnit 5 test method name 'testCompareIgnoreCase_StringStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 17,
                  "endLine": 141,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 28,
                  "endLine": 168,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 432,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 17,
                  "endLine": 263,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 433,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_charInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 17,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 434,
          "message": {
            "text": "The final local variable name 'CODE_POINT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 19,
                  "endLine": 288,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 435,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 17,
                  "endLine": 310,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 436,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 17,
                  "endLine": 323,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 437,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAny_StringCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 17,
                  "endLine": 355,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 438,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAny_StringCharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "endLine": 375,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 439,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAny_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 17,
                  "endLine": 383,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 440,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAny_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 17,
                  "endLine": 400,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 441,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAny_StringStringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 17,
                  "endLine": 421,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 442,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 429,
                  "startColumn": 17,
                  "endLine": 429,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 443,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringCharArrayWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 17,
                  "endLine": 447,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 444,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 17,
                  "endLine": 455,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 445,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfAnyBut_StringStringWithSupplementaryChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 17,
                  "endLine": 472,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 446,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfIgnoreCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 17,
                  "endLine": 480,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 447,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfIgnoreCase_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 17,
                  "endLine": 495,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 448,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG1241_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 17,
                  "endLine": 520,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 449,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG1241_2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 17,
                  "endLine": 529,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 450,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 17,
                  "endLine": 540,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 451,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_charInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 550,
                  "startColumn": 17,
                  "endLine": 550,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 434,
          "message": {
            "text": "The final local variable name 'CODE_POINT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 19,
                  "endLine": 565,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 452,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 17,
                  "endLine": 590,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 453,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 17,
                  "endLine": 604,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 454,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOfAny_StringStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 17,
                  "endLine": 642,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 455,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOfIgnoreCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 17,
                  "endLine": 664,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 456,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOfIgnoreCase_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 17,
                  "endLine": 682,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 457,
          "message": {
            "text": "The JUnit 5 test method name 'testIsAsciiPrintable_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "endLine": 90,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 458,
          "message": {
            "text": "The JUnit 5 test method name 'testCountMatches_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 459,
          "message": {
            "text": "The JUnit 5 test method name 'testCountMatches_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 460,
          "message": {
            "text": "The JUnit 5 test method name 'testLeft_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 17,
                  "endLine": 69,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 461,
          "message": {
            "text": "The JUnit 5 test method name 'testMid_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 17,
                  "endLine": 85,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 462,
          "message": {
            "text": "The JUnit 5 test method name 'testRight_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 463,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstring_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 17,
                  "endLine": 123,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 464,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstring_StringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 465,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringAfter_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 17,
                  "endLine": 162,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 466,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringAfter_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 17,
                  "endLine": 177,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 467,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringAfterLast_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 17,
                  "endLine": 197,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 468,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringAfterLast_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 17,
                  "endLine": 213,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 469,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringBefore_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 17,
                  "endLine": 234,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 470,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringBefore_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 17,
                  "endLine": 252,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 471,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringBeforeLast_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 17,
                  "endLine": 273,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 472,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringBetween_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 13,
                  "endLine": 297,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 473,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringBetween_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 17,
                  "endLine": 311,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 474,
          "message": {
            "text": "The JUnit 5 test method name 'testSubstringsBetween_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 21,
                  "endLine": 328,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 475,
          "message": {
            "text": "The JUnit 5 test method name 'testAbbreviate_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 17,
                  "endLine": 249,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 476,
          "message": {
            "text": "The JUnit 5 test method name 'testAbbreviate_StringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 17,
                  "endLine": 272,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 477,
          "message": {
            "text": "The JUnit 5 test method name 'testAbbreviate_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 17,
                  "endLine": 312,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 478,
          "message": {
            "text": "The JUnit 5 test method name 'testAbbreviate_StringStringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 17,
                  "endLine": 337,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 479,
          "message": {
            "text": "The JUnit 5 test method name 'testCenter_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 17,
                  "endLine": 494,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 480,
          "message": {
            "text": "The JUnit 5 test method name 'testCenter_StringIntChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 17,
                  "endLine": 509,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 481,
          "message": {
            "text": "The JUnit 5 test method name 'testCenter_StringIntString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 17,
                  "endLine": 525,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 482,
          "message": {
            "text": "The JUnit 5 test method name 'testDefault_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 17,
                  "endLine": 621,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 483,
          "message": {
            "text": "The JUnit 5 test method name 'testDefault_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 17,
                  "endLine": 628,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 484,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfBlank_CharBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 17,
                  "endLine": 635,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 485,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfBlank_StringBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 646,
                  "startColumn": 17,
                  "endLine": 646,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 486,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfBlank_StringBuilders' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 657,
                  "startColumn": 17,
                  "endLine": 657,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 487,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfBlank_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 668,
                  "startColumn": 17,
                  "endLine": 668,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 488,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfEmpty_CharBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 680,
                  "startColumn": 17,
                  "endLine": 680,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 489,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfEmpty_StringBuffers' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 17,
                  "endLine": 690,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 490,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfEmpty_StringBuilders' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 700,
                  "startColumn": 17,
                  "endLine": 700,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 491,
          "message": {
            "text": "The JUnit 5 test method name 'testDefaultIfEmpty_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 17,
                  "endLine": 710,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 492,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteWhitespace_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 17,
                  "endLine": 721,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 493,
          "message": {
            "text": "Unnecessary qualifier 'StringUtilsTest': 'WHITESPACE' is already in scope because it is declared in an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 55,
                  "endLine": 725,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 494,
          "message": {
            "text": "Unnecessary qualifier 'StringUtilsTest': 'NON_WHITESPACE' is already in scope because it is declared in an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 22,
                  "endLine": 726,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 494,
          "message": {
            "text": "Unnecessary qualifier 'StringUtilsTest': 'NON_WHITESPACE' is already in scope because it is declared in an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 83,
                  "endLine": 726,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 495,
          "message": {
            "text": "The JUnit 5 test method name 'testDifference_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 17,
                  "endLine": 735,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 496,
          "message": {
            "text": "The JUnit 5 test method name 'testDifferenceAt_StringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 17,
                  "endLine": 748,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 497,
          "message": {
            "text": "The JUnit 5 test method name 'testDifferenceAt_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 769,
                  "startColumn": 17,
                  "endLine": 769,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 498,
          "message": {
            "text": "The JUnit 5 test method name 'testGetBytes_Charset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 17,
                  "endLine": 848,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 499,
          "message": {
            "text": "The JUnit 5 test method name 'testGetBytes_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 17,
                  "endLine": 856,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 500,
          "message": {
            "text": "The JUnit 5 test method name 'testGetCommonPrefix_StringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 17,
                  "endLine": 864,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 501,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFuzzyDistance_NullNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 907,
                  "startColumn": 17,
                  "endLine": 907,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 502,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFuzzyDistance_NullStringLocale' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 912,
                  "startColumn": 17,
                  "endLine": 912,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 503,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFuzzyDistance_StringNullLoclae' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 917,
                  "startColumn": 17,
                  "endLine": 917,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 504,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFuzzyDistance_StringStringNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 922,
                  "startColumn": 17,
                  "endLine": 922,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 505,
          "message": {
            "text": "The JUnit 5 test method name 'testGetIfBlank_StringStringSupplier' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 927,
                  "startColumn": 17,
                  "endLine": 927,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 506,
          "message": {
            "text": "The JUnit 5 test method name 'testGetIfEmpty_StringStringSupplier' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 954,
                  "startColumn": 17,
                  "endLine": 954,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 507,
          "message": {
            "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_NullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 978,
                  "startColumn": 17,
                  "endLine": 978,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 508,
          "message": {
            "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_NullString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 983,
                  "startColumn": 17,
                  "endLine": 983,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 509,
          "message": {
            "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_StringNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 988,
                  "startColumn": 17,
                  "endLine": 988,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 510,
          "message": {
            "text": "The JUnit 5 test method name 'testGetJaroWinklerDistance_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 17,
                  "endLine": 993,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 511,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_NullString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1006,
                  "startColumn": 17,
                  "endLine": 1006,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 512,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_NullStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 17,
                  "endLine": 1011,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 513,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 17,
                  "endLine": 1016,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 514,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringNullInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 17,
                  "endLine": 1021,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 515,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1026,
                  "startColumn": 17,
                  "endLine": 1026,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 516,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 17,
                  "endLine": 1040,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 517,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLevenshteinDistance_StringStringNegativeInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1104,
                  "startColumn": 17,
                  "endLine": 1104,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 518,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayCharSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1166,
                  "startColumn": 17,
                  "endLine": 1166,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 519,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfBooleans' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1183,
                  "startColumn": 17,
                  "endLine": 1183,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 520,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 17,
                  "endLine": 1195,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 521,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfChars' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1205,
                  "startColumn": 17,
                  "endLine": 1205,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 522,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfDoubles' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1215,
                  "startColumn": 17,
                  "endLine": 1215,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 523,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfFloats' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 17,
                  "endLine": 1225,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 524,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfInts' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1235,
                  "startColumn": 17,
                  "endLine": 1235,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 525,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfLongs' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 17,
                  "endLine": 1245,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 526,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayOfShorts' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1255,
                  "startColumn": 17,
                  "endLine": 1255,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 527,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayString_EmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1265,
                  "startColumn": 17,
                  "endLine": 1265,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 528,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_ArrayString_NonEmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1280,
                  "startColumn": 17,
                  "endLine": 1280,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 529,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_IterableChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1295,
                  "startColumn": 17,
                  "endLine": 1295,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 530,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_IterableString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1304,
                  "startColumn": 17,
                  "endLine": 1304,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 531,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_IteratorChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1321,
                  "startColumn": 17,
                  "endLine": 1321,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 532,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_IteratorString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1331,
                  "startColumn": 17,
                  "endLine": 1331,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 533,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_List_CharDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1350,
                  "startColumn": 17,
                  "endLine": 1350,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 534,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_List_EmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1360,
                  "startColumn": 17,
                  "endLine": 1360,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 535,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_List_NonEmptyDelimiter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1375,
                  "startColumn": 17,
                  "endLine": 1375,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 536,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_Objectarray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1391,
                  "startColumn": 17,
                  "endLine": 1391,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 537,
          "message": {
            "text": "The JUnit 5 test method name 'testJoin_Objects' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1408,
                  "startColumn": 17,
                  "endLine": 1408,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 538,
          "message": {
            "text": "The JUnit 5 test method name 'testLeftPad_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1455,
                  "startColumn": 17,
                  "endLine": 1455,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 539,
          "message": {
            "text": "The JUnit 5 test method name 'testLeftPad_StringIntChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1463,
                  "startColumn": 17,
                  "endLine": 1463,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 540,
          "message": {
            "text": "The JUnit 5 test method name 'testLeftPad_StringIntString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 17,
                  "endLine": 1476,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 541,
          "message": {
            "text": "The JUnit 5 test method name 'testLength_CharBuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1490,
                  "startColumn": 17,
                  "endLine": 1490,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 542,
          "message": {
            "text": "The JUnit 5 test method name 'testOverlay_StringStringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1564,
                  "startColumn": 17,
                  "endLine": 1564,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 543,
          "message": {
            "text": "The JUnit 5 test method name 'testRemove_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1655,
                  "startColumn": 17,
                  "endLine": 1655,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 544,
          "message": {
            "text": "The JUnit 5 test method name 'testRemove_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1672,
                  "startColumn": 17,
                  "endLine": 1672,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 396,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveAll_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1701,
                  "startColumn": 17,
                  "endLine": 1701,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 398,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveFirst_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1765,
                  "startColumn": 17,
                  "endLine": 1765,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 545,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveIgnoreCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1786,
                  "startColumn": 17,
                  "endLine": 1786,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 399,
          "message": {
            "text": "The JUnit 5 test method name 'testRemovePattern_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1828,
                  "startColumn": 17,
                  "endLine": 1828,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 546,
          "message": {
            "text": "The JUnit 5 test method name 'testRepeat_CharInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1902,
                  "startColumn": 17,
                  "endLine": 1902,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 547,
          "message": {
            "text": "The JUnit 5 test method name 'testRepeat_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1909,
                  "startColumn": 17,
                  "endLine": 1909,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 548,
          "message": {
            "text": "The JUnit 5 test method name 'testRepeat_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1923,
                  "startColumn": 17,
                  "endLine": 1923,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 549,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StringStringArrayStringArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1940,
                  "startColumn": 17,
                  "endLine": 1940,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 550,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StringStringArrayStringArrayBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 1980,
                  "startColumn": 17,
                  "endLine": 1980,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 551,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2004,
                  "startColumn": 17,
                  "endLine": 2004,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 552,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StringStringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2026,
                  "startColumn": 17,
                  "endLine": 2026,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 401,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceAll_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2052,
                  "startColumn": 17,
                  "endLine": 2052,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 553,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceChars_StringCharChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2079,
                  "startColumn": 17,
                  "endLine": 2079,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 554,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceChars_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2087,
                  "startColumn": 17,
                  "endLine": 2087,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 403,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceFirst_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2133,
                  "startColumn": 17,
                  "endLine": 2133,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 555,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceIgnoreCase_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2160,
                  "startColumn": 17,
                  "endLine": 2160,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 556,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceIgnoreCase_StringStringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2187,
                  "startColumn": 17,
                  "endLine": 2187,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 557,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceOnce_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2224,
                  "startColumn": 17,
                  "endLine": 2224,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 558,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceOnceIgnoreCase_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2244,
                  "startColumn": 17,
                  "endLine": 2244,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 404,
          "message": {
            "text": "The JUnit 5 test method name 'testReplacePattern_StringStringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2267,
                  "startColumn": 17,
                  "endLine": 2267,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 559,
          "message": {
            "text": "The JUnit 5 test method name 'testReverse_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2288,
                  "startColumn": 17,
                  "endLine": 2288,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 560,
          "message": {
            "text": "The JUnit 5 test method name 'testReverseDelimited_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2295,
                  "startColumn": 17,
                  "endLine": 2295,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 561,
          "message": {
            "text": "The JUnit 5 test method name 'testRightPad_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2304,
                  "startColumn": 17,
                  "endLine": 2304,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 562,
          "message": {
            "text": "The JUnit 5 test method name 'testRightPad_StringIntChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2313,
                  "startColumn": 17,
                  "endLine": 2313,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 563,
          "message": {
            "text": "The JUnit 5 test method name 'testRightPad_StringIntString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2326,
                  "startColumn": 17,
                  "endLine": 2326,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 564,
          "message": {
            "text": "The JUnit 5 test method name 'testRotate_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2340,
                  "startColumn": 17,
                  "endLine": 2340,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 565,
          "message": {
            "text": "The JUnit 5 test method name 'testSplit_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2355,
                  "startColumn": 17,
                  "endLine": 2355,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 566,
          "message": {
            "text": "The JUnit 5 test method name 'testSplit_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2379,
                  "startColumn": 17,
                  "endLine": 2379,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 567,
          "message": {
            "text": "The JUnit 5 test method name 'testSplit_StringString_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2404,
                  "startColumn": 17,
                  "endLine": 2404,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 568,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitByWholeSeparatorPreserveAllTokens_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2492,
                  "startColumn": 17,
                  "endLine": 2492,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 569,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitByWholeSeparatorPreserveAllTokens_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2529,
                  "startColumn": 17,
                  "endLine": 2529,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 570,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2566,
                  "startColumn": 47,
                  "endLine": 2566,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 571,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitByWholeString_StringStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2576,
                  "startColumn": 17,
                  "endLine": 2576,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 570,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2600,
                  "startColumn": 87,
                  "endLine": 2600,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 572,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitByWholeString_StringStringBooleanInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2608,
                  "startColumn": 17,
                  "endLine": 2608,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 573,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitPreserveAllTokens_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2635,
                  "startColumn": 17,
                  "endLine": 2635,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 574,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitPreserveAllTokens_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2710,
                  "startColumn": 17,
                  "endLine": 2710,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 575,
          "message": {
            "text": "The JUnit 5 test method name 'testSplitPreserveAllTokens_StringString_StringStringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2822,
                  "startColumn": 17,
                  "endLine": 2822,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 576,
          "message": {
            "text": "Do not hard code the IP address expectedResults"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2901,
                  "startColumn": 53,
                  "endLine": 2901,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 570,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2902,
                  "startColumn": 58,
                  "endLine": 2902,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 576,
          "message": {
            "text": "Do not hard code the IP address expectedResults"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2911,
                  "startColumn": 57,
                  "endLine": 2911,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 577,
          "message": {
            "text": "The JUnit 5 test method name 'testSwapCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 2992,
                  "startColumn": 17,
                  "endLine": 2992,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 578,
          "message": {
            "text": "The final local variable name 'TURKISH' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3050,
                  "startColumn": 22,
                  "endLine": 3050,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 578,
          "message": {
            "text": "The final local variable name 'TURKISH' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3070,
                  "startColumn": 22,
                  "endLine": 3070,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 579,
          "message": {
            "text": "The JUnit 5 test method name 'testTruncate_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3106,
                  "startColumn": 17,
                  "endLine": 3106,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 580,
          "message": {
            "text": "The JUnit 5 test method name 'testTruncate_StringIntInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3139,
                  "startColumn": 17,
                  "endLine": 3139,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 581,
          "message": {
            "text": "The JUnit 5 test method name 'testUnwrap_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3258,
                  "startColumn": 17,
                  "endLine": 3258,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 582,
          "message": {
            "text": "The JUnit 5 test method name 'testUnwrap_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3276,
                  "startColumn": 17,
                  "endLine": 3276,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 583,
          "message": {
            "text": "The JUnit 5 test method name 'testWrap_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3311,
                  "startColumn": 17,
                  "endLine": 3311,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 584,
          "message": {
            "text": "The JUnit 5 test method name 'testWrap_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3326,
                  "startColumn": 17,
                  "endLine": 3326,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 585,
          "message": {
            "text": "The JUnit 5 test method name 'testWrapIfMissing_StringChar' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3344,
                  "startColumn": 17,
                  "endLine": 3344,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 586,
          "message": {
            "text": "The JUnit 5 test method name 'testWrapIfMissing_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTest.java"
                },
                "region": {
                  "startLine": 3366,
                  "startColumn": 17,
                  "endLine": 3366,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 587,
          "message": {
            "text": "The JUnit 5 test method name 'testStrip_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 17,
                  "endLine": 33,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 588,
          "message": {
            "text": "The JUnit 5 test method name 'testStrip_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 589,
          "message": {
            "text": "The JUnit 5 test method name 'testStripAccents_Korean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 17,
                  "endLine": 102,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 590,
          "message": {
            "text": "The JUnit 5 test method name 'testStripEnd_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 591,
          "message": {
            "text": "The JUnit 5 test method name 'testStripStart_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 17,
                  "endLine": 177,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 592,
          "message": {
            "text": "The JUnit 5 test method name 'testStripToEmpty_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 17,
                  "endLine": 209,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 593,
          "message": {
            "text": "The JUnit 5 test method name 'testStripToNull_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/StringUtilsTrimStripTest.java"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 594,
          "message": {
            "text": "Lambda expression could be written as a method reference: `SystemProperties::getJavaSpecificationVersion`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemPropertiesTest.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 28,
                  "endLine": 328,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 595,
          "message": {
            "text": "Lambda expression could be written as a method reference: `SystemProperties::getLineSeparator`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemPropertiesTest.java"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 28,
                  "endLine": 420,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 596,
          "message": {
            "text": "Lambda expression could be written as a method reference: `SystemProperties::getUserName`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemPropertiesTest.java"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 28,
                  "endLine": 449,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 597,
          "message": {
            "text": "The instance method name 'getIS_JAVA' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 21,
                  "endLine": 46,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 598,
          "message": {
            "text": "The JUnit 5 test method name 'test_IS_JAVA' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 17,
                  "endLine": 67,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 599,
          "message": {
            "text": "The JUnit 5 test method name 'test_IS_OS' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 600,
          "message": {
            "text": "The JUnit 5 test method name 'test_IS_zOS' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 17,
                  "endLine": 202,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 601,
          "message": {
            "text": "The JUnit 5 test method name 'test_USER_NAME' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 17,
                  "endLine": 216,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 602,
          "message": {
            "text": "Unnecessary qualifier 'Thread': 'currentThread' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 602,
          "message": {
            "text": "Unnecessary qualifier 'Thread': 'currentThread' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 17,
                  "endLine": 80,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 46,
                  "endLine": 97,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 46,
                  "endLine": 98,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 46,
                  "endLine": 99,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 46,
                  "endLine": 100,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 46,
                  "endLine": 101,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 46,
                  "endLine": 102,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 46,
                  "endLine": 103,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 53,
                  "endLine": 104,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 45,
                  "endLine": 247,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 45,
                  "endLine": 274,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 45,
                  "endLine": 315,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 49,
                  "endLine": 316,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidThreadGroup",
          "ruleIndex": 41,
          "message": {
            "text": "Avoid using java.lang.ThreadGroup; it is not thread safe"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 36,
                  "endLine": 376,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 603,
          "message": {
            "text": "Avoid unused method parameters such as 'excludeFields'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 122,
                  "endLine": 152,
                  "endColumn": 135
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 604,
          "message": {
            "text": "The JUnit 5 test method name 'testHexToByte_IllegalArgument' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ConversionTest.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 605,
          "message": {
            "text": "The JUnit 5 test method name 'testHexToByte_nullString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ConversionTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 20,
                  "endLine": 45,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 37,
                  "endLine": 47,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 607,
          "message": {
            "text": "The JUnit 5 test method name 'testNullLhs_4args' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 17,
                  "endLine": 423,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 608,
          "message": {
            "text": "The JUnit 5 test method name 'testNullRhs_4args' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/DiffBuilderTest.java"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 17,
                  "endLine": 433,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 56,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OverrideBothEqualsAndHashcode",
          "ruleIndex": 79,
          "message": {
            "text": "Ensure you override both equals() and hashCode()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 24,
                  "endLine": 177,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 609,
          "message": {
            "text": "Avoid unused constructor parameters such as 'z'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 73,
                  "endLine": 259,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 610,
          "message": {
            "text": "Avoid unused constructor parameters such as 't'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 48,
                  "endLine": 333,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 13,
                  "endLine": 709,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 13,
                  "endLine": 716,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 611,
          "message": {
            "text": "The final local variable name 'i1_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 40,
                  "endLine": 1021,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 612,
          "message": {
            "text": "The final local variable name 'i1_2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 40,
                  "endLine": 1022,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 613,
          "message": {
            "text": "The final local variable name 'i2_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 1023,
                  "startColumn": 40,
                  "endLine": 1023,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 614,
          "message": {
            "text": "The final local variable name 'i2_2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 40,
                  "endLine": 1024,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UselessOperationOnImmutable",
          "ruleIndex": 615,
          "message": {
            "text": "The result of an operation on an immutable object is ignored"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java"
                },
                "region": {
                  "startLine": 1096,
                  "startColumn": 9,
                  "endLine": 1096,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "OverrideBothEqualsAndHashcode",
          "ruleIndex": 79,
          "message": {
            "text": "Ensure you override both equals() and hashCode()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 20,
                  "endLine": 40,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "OverrideBothEqualsAndHashcode",
          "ruleIndex": 79,
          "message": {
            "text": "Ensure you override both equals() and hashCode()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 20,
                  "endLine": 52,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 15,
                  "endLine": 317,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/JsonToStringStyleTest.java"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 15,
                  "endLine": 406,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/RecursiveToStringStyleTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 15,
                  "endLine": 122,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 37,
                  "endLine": 35,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 31,
                  "endLine": 36,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 28,
                  "endLine": 38,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 30,
                  "endLine": 42,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 29,
                  "endLine": 44,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 28,
                  "endLine": 48,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 29,
                  "endLine": 50,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 30,
                  "endLine": 52,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 616,
          "message": {
            "text": "The JUnit 5 test method name 'test_array_difference' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 617,
          "message": {
            "text": "The JUnit 5 test method name 'test_difference_in_inherited_field' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 17,
                  "endLine": 88,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 618,
          "message": {
            "text": "The JUnit 5 test method name 'test_no_differences' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 17,
                  "endLine": 98,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 619,
          "message": {
            "text": "The JUnit 5 test method name 'test_no_differences_diff_exclude_annotated_field' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 620,
          "message": {
            "text": "The JUnit 5 test method name 'test_no_differences_diff_excluded_field_and_exclude_annotated_field' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 17,
                  "endLine": 117,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 621,
          "message": {
            "text": "The JUnit 5 test method name 'test_no_differences_excluded_field' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 622,
          "message": {
            "text": "The JUnit 5 test method name 'test_no_differences_inheritance' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 17,
                  "endLine": 138,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 623,
          "message": {
            "text": "The JUnit 5 test method name 'test_primitive_difference' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "endLine": 147,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 624,
          "message": {
            "text": "The JUnit 5 test method name 'test_transient_field_difference' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionDiffBuilderTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 17,
                  "endLine": 157,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderConcurrencyTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 31,
                  "endLine": 78,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderCustomImplementationTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 26,
                  "endLine": 47,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 625,
          "message": {
            "text": "The JUnit 5 test method name 'test_ConstructorOption' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeNullValuesTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "endLine": 48,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 626,
          "message": {
            "text": "The JUnit 5 test method name 'test_ConstructorOption_ExcludeNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeNullValuesTest.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 17,
                  "endLine": 72,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 627,
          "message": {
            "text": "The JUnit 5 test method name 'test_ConstructorOptionNormal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeNullValuesTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 17,
                  "endLine": 94,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 628,
          "message": {
            "text": "The JUnit 5 test method name 'test_excludeNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeNullValuesTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 629,
          "message": {
            "text": "The JUnit 5 test method name 'test_NonExclude' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeNullValuesTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 30,
                  "endLine": 37,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 630,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExclude' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "endLine": 52,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 631,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "endLine": 58,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 632,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeArrayWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 633,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeArrayWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 634,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 17,
                  "endLine": 76,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 635,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeCollectionWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 17,
                  "endLine": 84,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 636,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeCollectionWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 637,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeEmptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 638,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeEmptyCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 639,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeNullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 17,
                  "endLine": 113,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 640,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExcludeNullCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeWithAnnotationTest.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 30,
                  "endLine": 34,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeWithAnnotationTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 30,
                  "endLine": 37,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 630,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringExclude' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeWithAnnotationTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 641,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringDefaultBehavior' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 642,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringInclude' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "endLine": 71,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 643,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 17,
                  "endLine": 77,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 644,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeArrayWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "endLine": 83,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 645,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeArrayWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 17,
                  "endLine": 89,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 646,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 17,
                  "endLine": 95,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 647,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeCollectionWithNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 648,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeCollectionWithNulls' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 17,
                  "endLine": 111,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 649,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeEmptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 17,
                  "endLine": 120,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 650,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeEmptyCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 17,
                  "endLine": 126,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 651,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeNullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 17,
                  "endLine": 132,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 652,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeNullArrayMultiplesValues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 17,
                  "endLine": 138,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 653,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeNullCollection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 654,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringIncludeWithoutInformingFields' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 17,
                  "endLine": 150,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 655,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "endLine": 156,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 656,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithoutIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "endLine": 166,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 657,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithRandomFieldsWithIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 17,
                  "endLine": 175,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 658,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringSetIncludeAndExcludeWithRandomFieldsWithoutIntersection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 17,
                  "endLine": 185,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 659,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringSetIncludeWithArrayWithMultipleNullFields' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 17,
                  "endLine": 194,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 660,
          "message": {
            "text": "The JUnit 5 test method name 'test_toStringSetIncludeWithMultipleNullFields' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 17,
                  "endLine": 203,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 661,
          "message": {
            "text": "The final method parameter name 'IncludeFields' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 87,
                  "endLine": 227,
                  "endColumn": 100
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 662,
          "message": {
            "text": "The final method parameter name 'IncludeFieldsValues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderIncludeTest.java"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 117,
                  "endLine": 227,
                  "endColumn": 136
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 663,
          "message": {
            "text": "Avoid using implementation types like 'LinkedList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 23,
                  "endLine": 71,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 27,
                  "endLine": 73,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderSummaryTest.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 26,
                  "endLine": 27,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderSummaryTest.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "endLine": 30,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 26,
                  "endLine": 36,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 26,
                  "endLine": 60,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 28,
                  "endLine": 122,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 38,
                  "endLine": 124,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 28,
                  "endLine": 129,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 38,
                  "endLine": 131,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 30,
                  "endLine": 137,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 9,
                  "endLine": 181,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 664,
          "message": {
            "text": "The JUnit 5 test method name 'test_setUpToClass_invalid' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 665,
          "message": {
            "text": "The JUnit 5 test method name 'test_setUpToClass_valid' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 17,
                  "endLine": 242,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/builder/ToStringStyleConcurrencyTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 31,
                  "endLine": 79,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 666,
          "message": {
            "text": "The class name 'A_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 667,
          "message": {
            "text": "The class name 'B_is_0' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 15,
                  "endLine": 42,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 668,
          "message": {
            "text": "The class name 'C_is_0' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 19,
                  "endLine": 46,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 669,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 22,
                  "endLine": 51,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "endLine": 56,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 671,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 22,
                  "endLine": 61,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 22,
                  "endLine": 66,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 673,
          "message": {
            "text": "The class name 'C_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 19,
                  "endLine": 74,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 22,
                  "endLine": 84,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "endLine": 89,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 22,
                  "endLine": 94,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 676,
          "message": {
            "text": "The class name 'C_is_10' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 19,
                  "endLine": 101,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 22,
                  "endLine": 106,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 677,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 22,
                  "endLine": 111,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 22,
                  "endLine": 116,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 678,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 22,
                  "endLine": 121,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 679,
          "message": {
            "text": "The JUnit 5 test method name 'equalTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 18,
                  "endLine": 129,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 680,
          "message": {
            "text": "The JUnit 5 test method name 'greaterThan_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 18,
                  "endLine": 134,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 681,
          "message": {
            "text": "The JUnit 5 test method name 'greaterThanOrEqualTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 18,
                  "endLine": 139,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The JUnit 5 test method name 'lessThan_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 18,
                  "endLine": 144,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 683,
          "message": {
            "text": "The JUnit 5 test method name 'lessThanOrEqualTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 18,
                  "endLine": 149,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 684,
          "message": {
            "text": "The JUnit 5 test method name 'static_ge_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 18,
                  "endLine": 154,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 685,
          "message": {
            "text": "The JUnit 5 test method name 'static_gt_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 18,
                  "endLine": 159,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 686,
          "message": {
            "text": "The JUnit 5 test method name 'static_le_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 18,
                  "endLine": 164,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 687,
          "message": {
            "text": "The JUnit 5 test method name 'static_lt_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 18,
                  "endLine": 169,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 688,
          "message": {
            "text": "The class name 'B_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 15,
                  "endLine": 176,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 668,
          "message": {
            "text": "The class name 'C_is_0' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 19,
                  "endLine": 180,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 22,
                  "endLine": 185,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 22,
                  "endLine": 190,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 22,
                  "endLine": 195,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 22,
                  "endLine": 200,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 673,
          "message": {
            "text": "The class name 'C_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 19,
                  "endLine": 207,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 22,
                  "endLine": 212,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 22,
                  "endLine": 217,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 22,
                  "endLine": 222,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 22,
                  "endLine": 227,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 676,
          "message": {
            "text": "The class name 'C_is_10' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 19,
                  "endLine": 234,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 22,
                  "endLine": 239,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 22,
                  "endLine": 244,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 22,
                  "endLine": 249,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 22,
                  "endLine": 254,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 689,
          "message": {
            "text": "The JUnit 5 test method name 'equalTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 18,
                  "endLine": 262,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 690,
          "message": {
            "text": "The JUnit 5 test method name 'greaterThan_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 18,
                  "endLine": 267,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 681,
          "message": {
            "text": "The JUnit 5 test method name 'greaterThanOrEqualTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 18,
                  "endLine": 272,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The JUnit 5 test method name 'lessThan_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 18,
                  "endLine": 277,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 691,
          "message": {
            "text": "The JUnit 5 test method name 'lessThanOrEqualTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 18,
                  "endLine": 282,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 684,
          "message": {
            "text": "The JUnit 5 test method name 'static_ge_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 18,
                  "endLine": 287,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 692,
          "message": {
            "text": "The JUnit 5 test method name 'static_gt_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 18,
                  "endLine": 292,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 693,
          "message": {
            "text": "The JUnit 5 test method name 'static_le_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 18,
                  "endLine": 297,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 687,
          "message": {
            "text": "The JUnit 5 test method name 'static_lt_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 18,
                  "endLine": 302,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 694,
          "message": {
            "text": "The class name 'B_is_10' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 15,
                  "endLine": 309,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 668,
          "message": {
            "text": "The class name 'C_is_0' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 19,
                  "endLine": 313,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 22,
                  "endLine": 318,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 677,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 22,
                  "endLine": 323,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 22,
                  "endLine": 328,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 678,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 22,
                  "endLine": 333,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 673,
          "message": {
            "text": "The class name 'C_is_1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 19,
                  "endLine": 340,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 22,
                  "endLine": 345,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 22,
                  "endLine": 350,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 22,
                  "endLine": 355,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 22,
                  "endLine": 360,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 676,
          "message": {
            "text": "The class name 'C_is_10' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 19,
                  "endLine": 367,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 669,
          "message": {
            "text": "The JUnit 5 test method name 'between_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 372,
                  "startColumn": 22,
                  "endLine": 372,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The JUnit 5 test method name 'betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 22,
                  "endLine": 377,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 671,
          "message": {
            "text": "The JUnit 5 test method name 'static_between_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 22,
                  "endLine": 382,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The JUnit 5 test method name 'static_betweenExclusive_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 22,
                  "endLine": 387,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 679,
          "message": {
            "text": "The JUnit 5 test method name 'equalTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 18,
                  "endLine": 395,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 690,
          "message": {
            "text": "The JUnit 5 test method name 'greaterThan_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 18,
                  "endLine": 400,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 695,
          "message": {
            "text": "The JUnit 5 test method name 'greaterThanOrEqualTo_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 18,
                  "endLine": 405,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 696,
          "message": {
            "text": "The JUnit 5 test method name 'lessThan_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 18,
                  "endLine": 410,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 691,
          "message": {
            "text": "The JUnit 5 test method name 'lessThanOrEqualTo_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 18,
                  "endLine": 415,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 697,
          "message": {
            "text": "The JUnit 5 test method name 'static_ge_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 420,
                  "startColumn": 18,
                  "endLine": 420,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 692,
          "message": {
            "text": "The JUnit 5 test method name 'static_gt_returns_false' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 18,
                  "endLine": 425,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 693,
          "message": {
            "text": "The JUnit 5 test method name 'static_le_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 18,
                  "endLine": 430,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 698,
          "message": {
            "text": "The JUnit 5 test method name 'static_lt_returns_true' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/compare/ComparableUtilsTest.java"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 18,
                  "endLine": 435,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 699,
          "message": {
            "text": "The lambda parameter name 'CloseableObject' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerCloseAndExceptionsTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "endLine": 90,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 699,
          "message": {
            "text": "The lambda parameter name 'CloseableObject' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerCloseAndExceptionsTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 700,
          "message": {
            "text": "Lambda expression could be written as a method reference: `initializer::get`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerCloseAndExceptionsTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 49,
                  "endLine": 128,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 700,
          "message": {
            "text": "Lambda expression could be written as a method reference: `initializer::get`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerCloseAndExceptionsTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 50,
                  "endLine": 166,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AbstractConcurrentInitializerTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 15,
                  "endLine": 62,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "PrimitiveWrapperInstantiation",
          "ruleIndex": 701,
          "message": {
            "text": "Do not use `new Integer(...)`, prefer `Integer.valueOf(...)`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerNonObjectTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 24,
                  "endLine": 40,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "PrimitiveWrapperInstantiation",
          "ruleIndex": 701,
          "message": {
            "text": "Do not use `new Integer(...)`, prefer `Integer.valueOf(...)`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/AtomicInitializerNonObjectTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 24,
                  "endLine": 55,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerSupplierTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 60,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerSupplierTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 17,
                  "endLine": 64,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 702,
          "message": {
            "text": "The final local variable name 'IOExceptionConsumer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerSupplierTest.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 38,
                  "endLine": 109,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 703,
          "message": {
            "text": "The final local variable name 'NullPointerExceptionConsumer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerSupplierTest.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 38,
                  "endLine": 134,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 9,
                  "endLine": 60,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 9,
                  "endLine": 126,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 31,
                  "endLine": 175,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 31,
                  "endLine": 229,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 31,
                  "endLine": 346,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 31,
                  "endLine": 369,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 31,
                  "endLine": 61,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 31,
                  "endLine": 75,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 704,
          "message": {
            "text": "The JUnit 5 test method name 'testConstantFuture_Integer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 17,
                  "endLine": 95,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 705,
          "message": {
            "text": "The JUnit 5 test method name 'testConstantFuture_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 17,
                  "endLine": 113,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreakerTest.java"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 23,
                  "endLine": 402,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerSupplierTest.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "endLine": 54,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerSupplierTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "endLine": 58,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 34,
                  "endLine": 50,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "endLine": 56,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 22,
                  "endLine": 103,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 26,
                  "endLine": 106,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "OverrideBothEqualsAndHashcode",
          "ruleIndex": 79,
          "message": {
            "text": "Ensure you override both equals() and hashCode()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 24,
                  "endLine": 113,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 28,
          "message": {
            "text": "This if statement can be replaced by `return {condition} && {thenBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 13,
                  "endLine": 116,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 31,
                  "endLine": 262,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 31,
                  "endLine": 306,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 31,
                  "endLine": 340,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 602,
          "message": {
            "text": "Unnecessary qualifier 'Thread': 'currentThread' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 33,
                  "endLine": 96,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 15,
                  "endLine": 180,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 40,
                  "endLine": 215,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 40,
                  "endLine": 273,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 40,
                  "endLine": 309,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 40,
                  "endLine": 331,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 354,
                  "startColumn": 40,
                  "endLine": 354,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 40,
                  "endLine": 376,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 52,
          "message": {
            "text": "Ensure that resources like this ScheduledThreadPoolExecutor object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 43,
                  "endLine": 398,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 40,
                  "endLine": 432,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 465,
                  "startColumn": 40,
                  "endLine": 465,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 706,
          "message": {
            "text": "Ensure that resources like this ScheduledExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 40,
                  "endLine": 483,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 707,
          "message": {
            "text": "Avoid unused method parameters such as 'runTimeCheck'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/locks/LockingVisitorsTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 96,
                  "endLine": 51,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 708,
          "message": {
            "text": "Avoid unused local variables such as 'startTimeMillis'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/locks/LockingVisitorsTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 709,
          "message": {
            "text": "Avoid unused local variables such as 'endTimeMillis'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/concurrent/locks/LockingVisitorsTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 20,
                  "endLine": 77,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 710,
          "message": {
            "text": "Unnecessary qualifier 'java.lang.reflect': 'InvocationHandler' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 23,
                  "endLine": 206,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/CustomCheckedException.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 12,
                  "endLine": 24,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/CustomUncheckedException.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 12,
                  "endLine": 24,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 9,
                  "endLine": 101,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotExtendJavaLangThrowable",
          "ruleIndex": 75,
          "message": {
            "text": "Exceptions should not extend java.lang.Throwable"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 47,
                  "endLine": 109,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 38,
                  "endLine": 142,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 34,
                  "endLine": 145,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 34,
                  "endLine": 153,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 711,
          "message": {
            "text": "The JUnit 5 test method name 'test_getMessage_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 17,
                  "endLine": 182,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 712,
          "message": {
            "text": "The JUnit 5 test method name 'test_getRootCauseMessage_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 17,
                  "endLine": 194,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 713,
          "message": {
            "text": "The JUnit 5 test method name 'testForEach_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 17,
                  "endLine": 247,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 714,
          "message": {
            "text": "The JUnit 5 test method name 'testForEach_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 17,
                  "endLine": 255,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 715,
          "message": {
            "text": "The JUnit 5 test method name 'testForEach_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 17,
                  "endLine": 264,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 716,
          "message": {
            "text": "The JUnit 5 test method name 'testForEach_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 17,
                  "endLine": 271,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 717,
          "message": {
            "text": "The JUnit 5 test method name 'testForEach_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 17,
                  "endLine": 281,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 718,
          "message": {
            "text": "The JUnit 5 test method name 'testForEach_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 17,
                  "endLine": 291,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 719,
          "message": {
            "text": "The JUnit 5 test method name 'testGetCause_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 17,
                  "endLine": 300,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 720,
          "message": {
            "text": "The JUnit 5 test method name 'testGetCause_ThrowableArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 17,
                  "endLine": 314,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 721,
          "message": {
            "text": "The JUnit 5 test method name 'testGetRootCause_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 17,
                  "endLine": 333,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 722,
          "message": {
            "text": "The JUnit 5 test method name 'testGetRootCauseStackTrace_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 17,
                  "endLine": 343,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 723,
          "message": {
            "text": "The JUnit 5 test method name 'testGetRootCauseStackTraceList_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 17,
                  "endLine": 369,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 724,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableCount_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 17,
                  "endLine": 428,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 725,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 17,
                  "endLine": 438,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 726,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 17,
                  "endLine": 445,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 727,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 17,
                  "endLine": 453,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 728,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 17,
                  "endLine": 459,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 729,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 17,
                  "endLine": 468,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 730,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowableList_Throwable_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 477,
                  "startColumn": 17,
                  "endLine": 477,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 731,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 17,
                  "endLine": 484,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 732,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 17,
                  "endLine": 491,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 733,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 17,
                  "endLine": 499,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 734,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 17,
                  "endLine": 504,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 17,
                  "endLine": 513,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The JUnit 5 test method name 'testGetThrowables_Throwable_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 17,
                  "endLine": 522,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 17,
                  "endLine": 529,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 738,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 17,
                  "endLine": 553,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 739,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfType_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 17,
                  "endLine": 582,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 740,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOfType_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 606,
                  "startColumn": 17,
                  "endLine": 606,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 741,
          "message": {
            "text": "The JUnit 5 test method name 'testIsChecked_checked' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 635,
                  "startColumn": 17,
                  "endLine": 635,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 742,
          "message": {
            "text": "The JUnit 5 test method name 'testIsChecked_error' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 17,
                  "endLine": 640,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 743,
          "message": {
            "text": "The JUnit 5 test method name 'testIsChecked_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 17,
                  "endLine": 645,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 744,
          "message": {
            "text": "The JUnit 5 test method name 'testIsChecked_unchecked' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 17,
                  "endLine": 650,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 745,
          "message": {
            "text": "The JUnit 5 test method name 'testIsUnchecked_checked' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 660,
                  "startColumn": 17,
                  "endLine": 660,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 746,
          "message": {
            "text": "The JUnit 5 test method name 'testIsUnchecked_error' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 17,
                  "endLine": 665,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 747,
          "message": {
            "text": "The JUnit 5 test method name 'testIsUnchecked_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 17,
                  "endLine": 670,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 748,
          "message": {
            "text": "The JUnit 5 test method name 'testIsUnchecked_unchecked' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 17,
                  "endLine": 675,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 749,
          "message": {
            "text": "The JUnit 5 test method name 'testPrintRootCauseStackTrace_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 17,
                  "endLine": 685,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 750,
          "message": {
            "text": "The JUnit 5 test method name 'testPrintRootCauseStackTrace_ThrowableStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 692,
                  "startColumn": 17,
                  "endLine": 692,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 751,
          "message": {
            "text": "The JUnit 5 test method name 'testPrintRootCauseStackTrace_ThrowableWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 17,
                  "endLine": 715,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 752,
          "message": {
            "text": "The JUnit 5 test method name 'testRemoveCommonFrames_ListList' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 17,
                  "endLine": 738,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 753,
          "message": {
            "text": "The JUnit 5 test method name 'testStream_jdkNoCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 17,
                  "endLine": 766,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 754,
          "message": {
            "text": "The JUnit 5 test method name 'testStream_nested' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 17,
                  "endLine": 772,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 755,
          "message": {
            "text": "The JUnit 5 test method name 'testStream_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 780,
                  "startColumn": 17,
                  "endLine": 780,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 756,
          "message": {
            "text": "The JUnit 5 test method name 'testStream_recursiveCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 17,
                  "endLine": 785,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 757,
          "message": {
            "text": "The JUnit 5 test method name 'testStream_withCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 17,
                  "endLine": 794,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 758,
          "message": {
            "text": "The JUnit 5 test method name 'testStream_withoutCause' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 17,
                  "endLine": 803,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 759,
          "message": {
            "text": "The JUnit 5 test method name 'testThrowableOf_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 17,
                  "endLine": 810,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 760,
          "message": {
            "text": "The JUnit 5 test method name 'testThrowableOf_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 834,
                  "startColumn": 17,
                  "endLine": 834,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 761,
          "message": {
            "text": "The JUnit 5 test method name 'testThrowableOfType_ThrowableClass' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 17,
                  "endLine": 863,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 762,
          "message": {
            "text": "The JUnit 5 test method name 'testThrowableOfType_ThrowableClassInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java"
                },
                "region": {
                  "startLine": 887,
                  "startColumn": 17,
                  "endLine": 887,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 346,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1502,
                  "startColumn": 17,
                  "endLine": 1502,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 347,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1517,
                  "startColumn": 17,
                  "endLine": 1517,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 348,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1533,
                  "startColumn": 17,
                  "endLine": 1533,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 349,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1548,
                  "startColumn": 17,
                  "endLine": 1548,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 350,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiPredicate_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1563,
                  "startColumn": 17,
                  "endLine": 1563,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 351,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBiPredicate_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1578,
                  "startColumn": 17,
                  "endLine": 1578,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 763,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBooleanSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1593,
                  "startColumn": 17,
                  "endLine": 1593,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 764,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableBooleanSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1608,
                  "startColumn": 17,
                  "endLine": 1608,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 352,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableCallable_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1623,
                  "startColumn": 17,
                  "endLine": 1623,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 353,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableCallable_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1638,
                  "startColumn": 17,
                  "endLine": 1638,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 354,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1653,
                  "startColumn": 17,
                  "endLine": 1653,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 355,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1669,
                  "startColumn": 17,
                  "endLine": 1669,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 765,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleBinaryOperator_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1685,
                  "startColumn": 17,
                  "endLine": 1685,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 766,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleBinaryOperator_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1700,
                  "startColumn": 17,
                  "endLine": 1700,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 767,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleConsumer_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1715,
                  "startColumn": 17,
                  "endLine": 1715,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 768,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleConsumer_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1730,
                  "startColumn": 17,
                  "endLine": 1730,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 769,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1746,
                  "startColumn": 17,
                  "endLine": 1746,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 770,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1761,
                  "startColumn": 17,
                  "endLine": 1761,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 771,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1776,
                  "startColumn": 17,
                  "endLine": 1776,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 772,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1791,
                  "startColumn": 17,
                  "endLine": 1791,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 773,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToIntFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1806,
                  "startColumn": 17,
                  "endLine": 1806,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 774,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToIntFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1821,
                  "startColumn": 17,
                  "endLine": 1821,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 775,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToLongFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1836,
                  "startColumn": 17,
                  "endLine": 1836,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 776,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableDoubleToLongFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1851,
                  "startColumn": 17,
                  "endLine": 1851,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 356,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1866,
                  "startColumn": 17,
                  "endLine": 1866,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 357,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1881,
                  "startColumn": 17,
                  "endLine": 1881,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 777,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntBinaryOperator_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1896,
                  "startColumn": 17,
                  "endLine": 1896,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 778,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntBinaryOperator_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1911,
                  "startColumn": 17,
                  "endLine": 1911,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 779,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntConsumer_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1926,
                  "startColumn": 17,
                  "endLine": 1926,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 780,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntConsumer_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1941,
                  "startColumn": 17,
                  "endLine": 1941,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 781,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1957,
                  "startColumn": 17,
                  "endLine": 1957,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 782,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1972,
                  "startColumn": 17,
                  "endLine": 1972,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 783,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 1987,
                  "startColumn": 17,
                  "endLine": 1987,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 784,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2002,
                  "startColumn": 17,
                  "endLine": 2002,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 785,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntToDoubleFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2017,
                  "startColumn": 17,
                  "endLine": 2017,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 786,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntToDoubleFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2032,
                  "startColumn": 17,
                  "endLine": 2032,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 787,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntToLongFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2047,
                  "startColumn": 17,
                  "endLine": 2047,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 788,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableIntToLongFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2062,
                  "startColumn": 17,
                  "endLine": 2062,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 789,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongBinaryOperator_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2077,
                  "startColumn": 17,
                  "endLine": 2077,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 790,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongBinaryOperator_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2092,
                  "startColumn": 17,
                  "endLine": 2092,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 791,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongConsumer_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2107,
                  "startColumn": 17,
                  "endLine": 2107,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 792,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongConsumer_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2123,
                  "startColumn": 17,
                  "endLine": 2123,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 793,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2139,
                  "startColumn": 17,
                  "endLine": 2139,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 794,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2154,
                  "startColumn": 17,
                  "endLine": 2154,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 795,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2169,
                  "startColumn": 17,
                  "endLine": 2169,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 796,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2184,
                  "startColumn": 17,
                  "endLine": 2184,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 797,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongToDoubleFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2199,
                  "startColumn": 17,
                  "endLine": 2199,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 798,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongToDoubleFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2214,
                  "startColumn": 17,
                  "endLine": 2214,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 799,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongToIntFunction_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2229,
                  "startColumn": 17,
                  "endLine": 2229,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 800,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableLongToIntFunction_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2244,
                  "startColumn": 17,
                  "endLine": 2244,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 801,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableObjDoubleConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2259,
                  "startColumn": 17,
                  "endLine": 2259,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 802,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableObjDoubleConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2275,
                  "startColumn": 17,
                  "endLine": 2275,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 803,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableObjIntConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2290,
                  "startColumn": 17,
                  "endLine": 2290,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 804,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableObjIntConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2306,
                  "startColumn": 17,
                  "endLine": 2306,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 805,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableObjLongConsumer_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2321,
                  "startColumn": 17,
                  "endLine": 2321,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 806,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableObjLongConsumer_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2337,
                  "startColumn": 17,
                  "endLine": 2337,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 358,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailablePredicate_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2352,
                  "startColumn": 17,
                  "endLine": 2352,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 359,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailablePredicate_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2367,
                  "startColumn": 17,
                  "endLine": 2367,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 807,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2382,
                  "startColumn": 17,
                  "endLine": 2382,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 808,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableRunnable_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2397,
                  "startColumn": 17,
                  "endLine": 2397,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 809,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableShortSupplier_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2413,
                  "startColumn": 17,
                  "endLine": 2413,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 810,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableShortSupplier_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2428,
                  "startColumn": 17,
                  "endLine": 2428,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 362,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableSupplier_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2443,
                  "startColumn": 17,
                  "endLine": 2443,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 363,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableSupplier_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2458,
                  "startColumn": 17,
                  "endLine": 2458,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 811,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2473,
                  "startColumn": 17,
                  "endLine": 2473,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 812,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2488,
                  "startColumn": 17,
                  "endLine": 2488,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 813,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2503,
                  "startColumn": 17,
                  "endLine": 2503,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 814,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToDoubleFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2518,
                  "startColumn": 17,
                  "endLine": 2518,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 815,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToIntBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2533,
                  "startColumn": 17,
                  "endLine": 2533,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 816,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToIntBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2548,
                  "startColumn": 17,
                  "endLine": 2548,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 817,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToIntFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2563,
                  "startColumn": 17,
                  "endLine": 2563,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 818,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToIntFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2578,
                  "startColumn": 17,
                  "endLine": 2578,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 819,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToLongBiFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2593,
                  "startColumn": 17,
                  "endLine": 2593,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 820,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToLongBiFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2608,
                  "startColumn": 17,
                  "endLine": 2608,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 821,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToLongFunction_Object_Throwable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2623,
                  "startColumn": 17,
                  "endLine": 2623,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 822,
          "message": {
            "text": "The JUnit 5 test method name 'testThrows_FailableToLongFunction_String_IOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/FailableFunctionsTest.java"
                },
                "region": {
                  "startLine": 2638,
                  "startColumn": 17,
                  "endLine": 2638,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/MethodInvokersFailableFunctionTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 38,
                  "endLine": 66,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/Objects.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 8,
                  "endLine": 63,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/function/Objects.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 38,
                  "endLine": 104,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 823,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_double' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 17,
                  "endLine": 316,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 824,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 17,
                  "endLine": 380,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 825,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_int_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 17,
                  "endLine": 434,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 826,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 17,
                  "endLine": 488,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 827,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_String_double' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 17,
                  "endLine": 493,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 828,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_String_improper' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 17,
                  "endLine": 518,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 829,
          "message": {
            "text": "The JUnit 5 test method name 'testFactory_String_proper' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 17,
                  "endLine": 552,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 830,
          "message": {
            "text": "The JUnit 5 test method name 'testReducedFactory_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/FractionTest.java"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 17,
                  "endLine": 881,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "BigIntegerInstantiation",
          "ruleIndex": 831,
          "message": {
            "text": "Don't create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 22,
                  "endLine": 485,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 832,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 17,
                  "endLine": 673,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 833,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 17,
                  "endLine": 679,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 834,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_3' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 685,
                  "startColumn": 17,
                  "endLine": 685,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 835,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_4' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 691,
                  "startColumn": 17,
                  "endLine": 691,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 836,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_5' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 697,
                  "startColumn": 17,
                  "endLine": 697,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 837,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_6' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 17,
                  "endLine": 703,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 838,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_7' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 17,
                  "endLine": 709,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 839,
          "message": {
            "text": "The JUnit 5 test method name 'testCreateNumberFailure_8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 17,
                  "endLine": 715,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingOctalValues",
          "ruleIndex": 840,
          "message": {
            "text": "Do not start a literal by 0 unless its an octal value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 38,
                  "endLine": 758,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingOctalValues",
          "ruleIndex": 840,
          "message": {
            "text": "Do not start a literal by 0 unless its an octal value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 35,
                  "endLine": 759,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingOctalValues",
          "ruleIndex": 840,
          "message": {
            "text": "Do not start a literal by 0 unless its an octal value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 35,
                  "endLine": 762,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 841,
          "message": {
            "text": "The JUnit 5 test method name 'TestLang747' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 17,
                  "endLine": 1126,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 842,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxByte_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1194,
                  "startColumn": 17,
                  "endLine": 1194,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 843,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxByte_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1199,
                  "startColumn": 17,
                  "endLine": 1199,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 844,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxDouble_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1218,
                  "startColumn": 17,
                  "endLine": 1218,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 845,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxDouble_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1223,
                  "startColumn": 17,
                  "endLine": 1223,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 846,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxFloat_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1237,
                  "startColumn": 17,
                  "endLine": 1237,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 847,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxFloat_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 17,
                  "endLine": 1242,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 848,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxInt_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1320,
                  "startColumn": 17,
                  "endLine": 1320,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 849,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxInt_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1325,
                  "startColumn": 17,
                  "endLine": 1325,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 850,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxLong_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1339,
                  "startColumn": 17,
                  "endLine": 1339,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 851,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxLong_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1344,
                  "startColumn": 17,
                  "endLine": 1344,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 852,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxShort_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1359,
                  "startColumn": 17,
                  "endLine": 1359,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 853,
          "message": {
            "text": "The JUnit 5 test method name 'testMaxShort_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1364,
                  "startColumn": 17,
                  "endLine": 1364,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 854,
          "message": {
            "text": "The JUnit 5 test method name 'testMinByte_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1378,
                  "startColumn": 17,
                  "endLine": 1378,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 855,
          "message": {
            "text": "The JUnit 5 test method name 'testMinByte_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1383,
                  "startColumn": 17,
                  "endLine": 1383,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 856,
          "message": {
            "text": "The JUnit 5 test method name 'testMinDouble_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1398,
                  "startColumn": 17,
                  "endLine": 1398,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 857,
          "message": {
            "text": "The JUnit 5 test method name 'testMinDouble_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1403,
                  "startColumn": 17,
                  "endLine": 1403,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 858,
          "message": {
            "text": "The JUnit 5 test method name 'testMinFloat_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1419,
                  "startColumn": 17,
                  "endLine": 1419,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 859,
          "message": {
            "text": "The JUnit 5 test method name 'testMinFloat_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1424,
                  "startColumn": 17,
                  "endLine": 1424,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 860,
          "message": {
            "text": "The JUnit 5 test method name 'testMinInt_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1502,
                  "startColumn": 17,
                  "endLine": 1502,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 861,
          "message": {
            "text": "The JUnit 5 test method name 'testMinInt_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1507,
                  "startColumn": 17,
                  "endLine": 1507,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 862,
          "message": {
            "text": "The JUnit 5 test method name 'testMinLong_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1521,
                  "startColumn": 17,
                  "endLine": 1521,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 863,
          "message": {
            "text": "The JUnit 5 test method name 'testMinLong_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1526,
                  "startColumn": 17,
                  "endLine": 1526,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 864,
          "message": {
            "text": "The JUnit 5 test method name 'testMinShort_emptyArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1540,
                  "startColumn": 17,
                  "endLine": 1540,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 865,
          "message": {
            "text": "The JUnit 5 test method name 'testMinShort_nullArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java"
                },
                "region": {
                  "startLine": 1545,
                  "startColumn": 17,
                  "endLine": 1545,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/mutable/PrintAtomicVsMutable.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 2,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 20,
                  "endLine": 47,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 20,
                  "endLine": 47,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 16,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 16,
                  "endLine": 52,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 866,
          "message": {
            "text": "Avoid unused constructor parameters such as 'bc'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 41,
                  "endLine": 68,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 867,
          "message": {
            "text": "Avoid unused constructor parameters such as 'd'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 38,
                  "endLine": 73,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 868,
          "message": {
            "text": "Avoid unused constructor parameters such as 'i'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 35,
                  "endLine": 78,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 868,
          "message": {
            "text": "Avoid unused constructor parameters such as 'i'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 39,
                  "endLine": 83,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 869,
          "message": {
            "text": "Avoid unused constructor parameters such as 'first'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 39,
                  "endLine": 88,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 868,
          "message": {
            "text": "Avoid unused constructor parameters such as 'i'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 39,
                  "endLine": 96,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 870,
          "message": {
            "text": "Avoid unused constructor parameters such as 'o'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 38,
                  "endLine": 101,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 871,
          "message": {
            "text": "Avoid unused constructor parameters such as 's'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 38,
                  "endLine": 106,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 17,
                  "endLine": 137,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 17,
                  "endLine": 157,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 34,
                  "endLine": 76,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 50,
                  "endLine": 79,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 50,
                  "endLine": 82,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 53,
                  "endLine": 85,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 51,
                  "endLine": 88,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 51,
                  "endLine": 91,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 75,
                  "endLine": 94,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 75,
                  "endLine": 97,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 75,
                  "endLine": 100,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 75,
                  "endLine": 103,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 75,
                  "endLine": 106,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 60,
                  "endLine": 112,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 58,
                  "endLine": 119,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 47,
                  "endLine": 122,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 53,
                  "endLine": 125,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 55,
                  "endLine": 128,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 58,
                  "endLine": 131,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 47,
                  "endLine": 134,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 37,
                  "endLine": 372,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 50,
                  "endLine": 405,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 43,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 9,
                  "endLine": 444,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 873,
          "message": {
            "text": "The JUnit 5 test method name 'testInvokeMethod_VarArgsNotUniqueResolvable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 17,
                  "endLine": 1024,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 874,
          "message": {
            "text": "The JUnit 5 test method name 'testInvokeMethod_VarArgsWithNullValues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java"
                },
                "region": {
                  "startLine": 1032,
                  "startColumn": 17,
                  "endLine": 1032,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 13,
                  "endLine": 192,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 875,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1114' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 17,
                  "endLine": 274,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 876,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1190' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 17,
                  "endLine": 283,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 877,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1348' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 17,
                  "endLine": 291,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 878,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1524' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 17,
                  "endLine": 297,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 879,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1698' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 17,
                  "endLine": 323,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 30,
                  "endLine": 327,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 880,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1702' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 17,
                  "endLine": 335,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 881,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_820' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 17,
                  "endLine": 346,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 882,
          "message": {
            "text": "The JUnit 5 test method name 'testGetRawType_LANG_1697' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 17,
                  "endLine": 478,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 883,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_LANG_1311' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java"
                },
                "region": {
                  "startLine": 961,
                  "startColumn": 17,
                  "endLine": 961,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/Ambig.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 24,
                  "endLine": 25,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 36,
                  "endLine": 26,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 53,
                  "endLine": 29,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 62,
                  "endLine": 33,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 26,
                  "endLine": 28,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 24,
                  "endLine": 32,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 44,
                  "endLine": 35,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 53,
                  "endLine": 39,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 26,
                  "endLine": 23,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 27,
                  "endLine": 24,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 23,
                  "endLine": 25,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 606,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 26,
                  "endLine": 26,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 44,
                  "endLine": 26,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 50,
                  "endLine": 30,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedPrivateMethod",
          "ruleIndex": 884,
          "message": {
            "text": "Avoid unused private methods such as 'privateAnnotatedMethod()'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 18,
                  "endLine": 33,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 43,
                  "endLine": 34,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 41,
                  "endLine": 38,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 58,
                  "endLine": 30,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 64,
                  "endLine": 34,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedPrivateMethod",
          "ruleIndex": 885,
          "message": {
            "text": "Avoid unused private methods such as 'privateAnnotatedMethod(String)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 18,
                  "endLine": 37,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 886,
          "message": {
            "text": "Avoid unused method parameters such as 't'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 54,
                  "endLine": 37,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 57,
                  "endLine": 38,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 872,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 55,
                  "endLine": 42,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/stream/FailableStreamTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 13,
                  "endLine": 40,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 1,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/stream/FailableStreamTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 13,
                  "endLine": 47,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 887,
          "message": {
            "text": "Avoid using implementation types like 'Hashtable'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/stream/StreamsTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 15,
                  "endLine": 180,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UselessParentheses",
          "ruleIndex": 407,
          "message": {
            "text": "Useless parentheses."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/stream/StreamsTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 95,
                  "endLine": 217,
                  "endColumn": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 47,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/test/NotVisibleExceptionFactory.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 8,
                  "endLine": 22,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 888,
          "message": {
            "text": "Avoid unused method parameters such as 'registryUnused'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 80,
                  "endLine": 196,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 889,
          "message": {
            "text": "The JUnit 5 test method name 'testEscapedBraces_LANG_948' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 17,
                  "endLine": 376,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 890,
          "message": {
            "text": "The JUnit 5 test method name 'testEscapedQuote_LANG_477' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 17,
                  "endLine": 392,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
                },
                "region": {
                  "startLine": 410,
                  "startColumn": 15,
                  "endLine": 410,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseLocaleWithCaseConversions",
          "ruleIndex": 36,
          "message": {
            "text": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 25,
                  "endLine": 452,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 891,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 892,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "endLine": 63,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 893,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_CharArray_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 17,
                  "endLine": 77,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 894,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_FormattedString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 17,
                  "endLine": 125,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 895,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 17,
                  "endLine": 149,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 896,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_PrimitiveNumber' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 17,
                  "endLine": 177,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 897,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_StrBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "endLine": 193,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 898,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_StrBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 17,
                  "endLine": 210,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 899,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 17,
                  "endLine": 258,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 900,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_String_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 17,
                  "endLine": 275,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 901,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_StringBuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 17,
                  "endLine": 326,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 902,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_StringBuffer_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 17,
                  "endLine": 343,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 903,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_StringBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 17,
                  "endLine": 391,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 904,
          "message": {
            "text": "The JUnit 5 test method name 'testAppend_StringBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 17,
                  "endLine": 408,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 905,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendAll_Array' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 17,
                  "endLine": 459,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 906,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendAll_Collection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 478,
                  "startColumn": 17,
                  "endLine": 478,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 907,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendAll_Iterator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 17,
                  "endLine": 493,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 908,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendFixedWidthPadLeft_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 546,
                  "startColumn": 17,
                  "endLine": 546,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 909,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendFixedWidthPadRight_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 17,
                  "endLine": 617,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 910,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_Boolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 17,
                  "endLine": 650,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 911,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_CharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 17,
                  "endLine": 661,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 912,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_CharArray_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 17,
                  "endLine": 684,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 913,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_FormattedString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 707,
                  "startColumn": 17,
                  "endLine": 707,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 914,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_Object' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 17,
                  "endLine": 730,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 915,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_PrimitiveNumber' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 17,
                  "endLine": 743,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 916,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_StrBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 17,
                  "endLine": 762,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 917,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_StrBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 17,
                  "endLine": 785,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 918,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 17,
                  "endLine": 808,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 919,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_String_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 831,
                  "startColumn": 17,
                  "endLine": 831,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 920,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_StringBuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 854,
                  "startColumn": 17,
                  "endLine": 854,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 921,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_StringBuffer_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 17,
                  "endLine": 877,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 922,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_StringBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 17,
                  "endLine": 900,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 923,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendln_StringBuilder_int_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 923,
                  "startColumn": 17,
                  "endLine": 923,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 924,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendSeparator_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 978,
                  "startColumn": 17,
                  "endLine": 978,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 925,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendSeparator_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 989,
                  "startColumn": 17,
                  "endLine": 989,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 926,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendSeparator_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 17,
                  "endLine": 1003,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 927,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendSeparator_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 17,
                  "endLine": 1017,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 928,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendSeparator_String_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1028,
                  "startColumn": 17,
                  "endLine": 1028,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 929,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendSeparator_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 17,
                  "endLine": 1042,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 930,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendWithSeparators_Array' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1095,
                  "startColumn": 17,
                  "endLine": 1095,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 931,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendWithSeparators_Collection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1118,
                  "startColumn": 17,
                  "endLine": 1118,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 932,
          "message": {
            "text": "The JUnit 5 test method name 'testAppendWithSeparators_Iterator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 17,
                  "endLine": 1140,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 933,
          "message": {
            "text": "The JUnit 5 test method name 'test_LANG_1131_EqualsWithNullStrBuilder' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 17,
                  "endLine": 76,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 934,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 16,
                  "endLine": 149,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 935,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 17,
                  "endLine": 451,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 408,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 17,
                  "endLine": 460,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 936,
          "message": {
            "text": "The JUnit 5 test method name 'testContains_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 17,
                  "endLine": 470,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 937,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteAll_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 17,
                  "endLine": 485,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 938,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteAll_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 17,
                  "endLine": 502,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 939,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteAll_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 17,
                  "endLine": 528,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 940,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteFirst_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 17,
                  "endLine": 554,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 941,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteFirst_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 571,
                  "startColumn": 17,
                  "endLine": 571,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 942,
          "message": {
            "text": "The JUnit 5 test method name 'testDeleteFirst_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 597,
                  "startColumn": 17,
                  "endLine": 597,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 432,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 17,
                  "endLine": 805,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 943,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 819,
                  "startColumn": 17,
                  "endLine": 819,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 435,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 17,
                  "endLine": 841,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 944,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_String_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 17,
                  "endLine": 864,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 945,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 17,
                  "endLine": 901,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 946,
          "message": {
            "text": "The JUnit 5 test method name 'testIndexOf_StrMatcher_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 17,
                  "endLine": 919,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 450,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1007,
                  "startColumn": 17,
                  "endLine": 1007,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 947,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_char_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 17,
                  "endLine": 1021,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 452,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 17,
                  "endLine": 1041,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 948,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_String_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1064,
                  "startColumn": 17,
                  "endLine": 1064,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 949,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_StrMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 17,
                  "endLine": 1101,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 950,
          "message": {
            "text": "The JUnit 5 test method name 'testLastIndexOf_StrMatcher_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1119,
                  "startColumn": 17,
                  "endLine": 1119,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 951,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_int_int_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1263,
                  "startColumn": 17,
                  "endLine": 1263,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 952,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryCount' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1289,
                  "startColumn": 17,
                  "endLine": 1289,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 953,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryEndIndex' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1320,
                  "startColumn": 17,
                  "endLine": 1320,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 954,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryMatcher' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1373,
                  "startColumn": 17,
                  "endLine": 1373,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 955,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryReplace' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1394,
                  "startColumn": 17,
                  "endLine": 1394,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 956,
          "message": {
            "text": "The JUnit 5 test method name 'testReplace_StrMatcher_String_int_int_int_VaryStartIndex' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1417,
                  "startColumn": 17,
                  "endLine": 1417,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 957,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceAll_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 17,
                  "endLine": 1476,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 958,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceAll_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1491,
                  "startColumn": 17,
                  "endLine": 1491,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 959,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceAll_StrMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1521,
                  "startColumn": 17,
                  "endLine": 1521,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 960,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceFirst_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1559,
                  "startColumn": 17,
                  "endLine": 1559,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 961,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceFirst_String_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1574,
                  "startColumn": 17,
                  "endLine": 1574,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 962,
          "message": {
            "text": "The JUnit 5 test method name 'testReplaceFirst_StrMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java"
                },
                "region": {
                  "startLine": 1604,
                  "startColumn": 17,
                  "endLine": 1604,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 963,
          "message": {
            "text": "The JUnit 5 test method name 'testMapLookup_nullMap' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 964,
          "message": {
            "text": "The JUnit 5 test method name 'testCharMatcher_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "endLine": 38,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 965,
          "message": {
            "text": "The JUnit 5 test method name 'testCharSetMatcher_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 966,
          "message": {
            "text": "The JUnit 5 test method name 'testCharSetMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "endLine": 63,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 967,
          "message": {
            "text": "The JUnit 5 test method name 'testStringMatcher_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "endLine": 166,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 968,
          "message": {
            "text": "The JUnit 5 test method name 'testReplacePartialString_noReplace' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 17,
                  "endLine": 517,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 969,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 17,
                  "endLine": 564,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 970,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_charArray_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 17,
                  "endLine": 578,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 971,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_charArray_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 17,
                  "endLine": 593,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 972,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 17,
                  "endLine": 609,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 973,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 17,
                  "endLine": 623,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 974,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_String_char_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 17,
                  "endLine": 638,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 975,
          "message": {
            "text": "The JUnit 5 test method name 'testReset_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 17,
                  "endLine": 752,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 976,
          "message": {
            "text": "The JUnit 5 test method name 'testReset_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 17,
                  "endLine": 765,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 977,
          "message": {
            "text": "The JUnit 5 test method name 'testCapitalize_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "endLine": 38,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 978,
          "message": {
            "text": "The JUnit 5 test method name 'testCapitalizeFully_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 17,
                  "endLine": 52,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 979,
          "message": {
            "text": "The JUnit 5 test method name 'testCapitalizeFullyWithDelimiters_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 980,
          "message": {
            "text": "The JUnit 5 test method name 'testCapitalizeWithDelimiters_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 17,
                  "endLine": 84,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 981,
          "message": {
            "text": "The JUnit 5 test method name 'testContainsAllWords_StringString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 17,
                  "endLine": 112,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 982,
          "message": {
            "text": "The JUnit 5 test method name 'testInitials_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 17,
                  "endLine": 132,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 983,
          "message": {
            "text": "The JUnit 5 test method name 'testInitials_String_charArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "endLine": 147,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 577,
          "message": {
            "text": "The JUnit 5 test method name 'testSwapCase_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 17,
                  "endLine": 247,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 984,
          "message": {
            "text": "The JUnit 5 test method name 'testUncapitalize_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 17,
                  "endLine": 265,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 985,
          "message": {
            "text": "The JUnit 5 test method name 'testUncapitalizeWithDelimiters_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 17,
                  "endLine": 279,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 986,
          "message": {
            "text": "The JUnit 5 test method name 'testWrap_StringInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 17,
                  "endLine": 297,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 987,
          "message": {
            "text": "The JUnit 5 test method name 'testWrap_StringIntStringBoolean' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 17,
                  "endLine": 331,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 988,
          "message": {
            "text": "The JUnit 5 test method name 'testWrap_StringIntStringBooleanString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 17,
                  "endLine": 408,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 989,
          "message": {
            "text": "The JUnit 5 test method name 'testHTML40_EXTENDED_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 990,
          "message": {
            "text": "The JUnit 5 test method name 'testISO8859_1_ESCAPE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "SuspiciousOctalEscape",
          "ruleIndex": 991,
          "message": {
            "text": "Suspicious decimal characters following octal escape in string literal: \\27 + 9"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 22,
                  "endLine": 77,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 14,
                  "endLine": 232,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 14,
                  "endLine": 424,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 14,
                  "endLine": 495,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 14,
                  "endLine": 687,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 992,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_Cal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 631,
                  "startColumn": 17,
                  "endLine": 631,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 993,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_CalNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 17,
                  "endLine": 644,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 994,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_CalNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 649,
                  "startColumn": 17,
                  "endLine": 649,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 995,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_CalNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 654,
                  "startColumn": 17,
                  "endLine": 654,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 996,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_Date' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 659,
                  "startColumn": 17,
                  "endLine": 659,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 997,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_DateNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 17,
                  "endLine": 672,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 998,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_DateNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 677,
                  "startColumn": 17,
                  "endLine": 677,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 999,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameDay_DateNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 682,
                  "startColumn": 17,
                  "endLine": 682,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1000,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_Cal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 17,
                  "endLine": 687,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1001,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_CalNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 701,
                  "startColumn": 17,
                  "endLine": 701,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1002,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_CalNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 706,
                  "startColumn": 17,
                  "endLine": 706,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1003,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_CalNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 711,
                  "startColumn": 17,
                  "endLine": 711,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1004,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_Date' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 716,
                  "startColumn": 17,
                  "endLine": 716,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1005,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_DateNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 729,
                  "startColumn": 17,
                  "endLine": 729,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1006,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_DateNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 734,
                  "startColumn": 17,
                  "endLine": 734,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1007,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameInstant_DateNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 17,
                  "endLine": 739,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1008,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameLocalTime_Cal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 17,
                  "endLine": 744,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1009,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameLocalTime_CalNotNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 17,
                  "endLine": 766,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1010,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameLocalTime_CalNullNotNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 771,
                  "startColumn": 17,
                  "endLine": 771,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1011,
          "message": {
            "text": "The JUnit 5 test method name 'testIsSameLocalTime_CalNullNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 17,
                  "endLine": 776,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1012,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG799_DE_FAIL' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 17,
                  "endLine": 811,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1013,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG799_DE_OK' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 17,
                  "endLine": 817,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1014,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG799_EN_FAIL' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 825,
                  "startColumn": 17,
                  "endLine": 825,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1015,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG799_EN_OK' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 831,
                  "startColumn": 17,
                  "endLine": 831,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1016,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG799_EN_WITH_DE_LOCALE' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 839,
                  "startColumn": 17,
                  "endLine": 839,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1017,
          "message": {
            "text": "The JUnit 5 test method name 'testParse_EmptyParsers' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 17,
                  "endLine": 872,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1018,
          "message": {
            "text": "The JUnit 5 test method name 'testParse_NullParsers' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 17,
                  "endLine": 877,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1019,
          "message": {
            "text": "The JUnit 5 test method name 'testParseDate_InvalidDateString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 17,
                  "endLine": 899,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1020,
          "message": {
            "text": "The JUnit 5 test method name 'testParseDate_NoDateString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 17,
                  "endLine": 905,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1021,
          "message": {
            "text": "The JUnit 5 test method name 'testParseDate_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 911,
                  "startColumn": 17,
                  "endLine": 911,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1022,
          "message": {
            "text": "The final local variable name 'oct31_01MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 1596,
                  "startColumn": 24,
                  "endLine": 1596,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1023,
          "message": {
            "text": "The final local variable name 'oct31_01_02MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 1599,
                  "startColumn": 24,
                  "endLine": 1599,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1024,
          "message": {
            "text": "The final local variable name 'oct31_01_02_03MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 1600,
                  "startColumn": 24,
                  "endLine": 1600,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1025,
          "message": {
            "text": "The final local variable name 'oct31_01_02_03_04MDT' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java"
                },
                "region": {
                  "startLine": 1601,
                  "startColumn": 24,
                  "endLine": 1601,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 48,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 31,
                  "endLine": 58,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1026,
          "message": {
            "text": "The JUnit 5 test method name 'test_changeDefault_Locale_DateInstance' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 17,
                  "endLine": 102,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1027,
          "message": {
            "text": "The JUnit 5 test method name 'test_changeDefault_Locale_DateTimeInstance' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 17,
                  "endLine": 117,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1028,
          "message": {
            "text": "The JUnit 5 test method name 'test_getInstance' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1029,
          "message": {
            "text": "The JUnit 5 test method name 'test_getInstance_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1030,
          "message": {
            "text": "The JUnit 5 test method name 'test_getInstance_String_Locale' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 17,
                  "endLine": 157,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1031,
          "message": {
            "text": "The JUnit 5 test method name 'test_getInstance_String_TimeZone' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 17,
                  "endLine": 170,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1032,
          "message": {
            "text": "The JUnit 5 test method name 'test_getInstance_String_TimeZone_Locale' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 17,
                  "endLine": 191,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1033,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG_1152' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 17,
                  "endLine": 248,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1034,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG_1267' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 17,
                  "endLine": 259,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1035,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG_954' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 17,
                  "endLine": 267,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 1036,
          "message": {
            "text": "Avoid unused local variables such as 'sdfTime'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 31,
                  "endLine": 293,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 1037,
          "message": {
            "text": "Avoid unused local variables such as 'fdfTime'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 31,
                  "endLine": 296,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1038,
          "message": {
            "text": "The class name 'FastDateFormat_PrinterTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 8,
                  "endLine": 25,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 50,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserSDFTest.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 23,
                  "endLine": 125,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingleMethodSingleton",
          "ruleIndex": 69,
          "message": {
            "text": "Class contains multiple getInstance methods. Please review."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 8,
                  "endLine": 53,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1039,
          "message": {
            "text": "The JUnit 5 test method name 'test_Equality_Hash' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 17,
                  "endLine": 197,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1040,
          "message": {
            "text": "The final local variable name 'K' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 26,
                  "endLine": 252,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1041,
          "message": {
            "text": "The final local variable name 'H' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 26,
                  "endLine": 254,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1042,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG_831' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 338,
                  "startColumn": 17,
                  "endLine": 338,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1043,
          "message": {
            "text": "The JUnit 5 test method name 'testLANG_832' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 17,
                  "endLine": 344,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 13,
                  "endLine": 710,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 40,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java"
                },
                "region": {
                  "startLine": 721,
                  "startColumn": 34,
                  "endLine": 721,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1044,
          "message": {
            "text": "The class name 'FastDateParser_MoreOrLessTest' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParser_MoreOrLessTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "endLine": 32,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1045,
          "message": {
            "text": "The class name 'FastDateParser_TimeZoneStrategyTest' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 52,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1046,
          "message": {
            "text": "The JUnit 5 test method name 'testTimeZoneStrategy_DateFormatSymbols' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1047,
          "message": {
            "text": "The JUnit 5 test method name 'testTimeZoneStrategy_TimeZone' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 17,
                  "endLine": 87,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1048,
          "message": {
            "text": "The instance method name 'testTimeZoneStrategyPattern_DateFormatSymbols_getZoneStrings' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 18,
                  "endLine": 101,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1049,
          "message": {
            "text": "The instance method name 'testTimeZoneStrategyPattern_TimeZone_getAvailableIDs' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 18,
                  "endLine": 160,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingleMethodSingleton",
          "ruleIndex": 69,
          "message": {
            "text": "Class contains multiple getInstance methods. Please review."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 42,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingletonClassReturningNewInstance",
          "ruleIndex": 15,
          "message": {
            "text": "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 27,
                  "endLine": 103,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1050,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_Long_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 17,
                  "endLine": 93,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1051,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_Long_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1052,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_LongNoEra_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 17,
                  "endLine": 107,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1053,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_LongNoEra_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1054,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_Short_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 17,
                  "endLine": 121,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1055,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_Short_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1056,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_ShortNoEra_AD' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 17,
                  "endLine": 135,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1057,
          "message": {
            "text": "The JUnit 5 test method name 'testLocales_ShortNoEra_BC' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/time/Java15BugFastDateParserTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "endLine": 142,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 15,
                  "endLine": 171,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 15,
                  "endLine": 233,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 55,
          "message": {
            "text": "Avoid using implementation types like 'TreeMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 15,
                  "endLine": 245,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutablePairTest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 15,
                  "endLine": 249,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 15,
                  "endLine": 173,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 55,
          "message": {
            "text": "Avoid using implementation types like 'TreeMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 15,
                  "endLine": 186,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 39,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/ImmutableTripleTest.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 15,
                  "endLine": 190,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/MutablePairTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 15,
                  "endLine": 119,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/PairTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 15,
                  "endLine": 96,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1058,
          "message": {
            "text": "The JUnit 5 test method name 'testFormattable_padded' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/PairTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1059,
          "message": {
            "text": "The JUnit 5 test method name 'testFormattable_simple' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/PairTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "endLine": 130,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 13,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/PairTest.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 15,
                  "endLine": 169,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 18,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 15,
                  "endLine": 81,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1058,
          "message": {
            "text": "The JUnit 5 test method name 'testFormattable_padded' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1059,
          "message": {
            "text": "The JUnit 5 test method name 'testFormattable_simple' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1060,
          "message": {
            "text": "The JUnit 5 test method name 'test_and' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "endLine": 71,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1061,
          "message": {
            "text": "The JUnit 5 test method name 'test_and_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 17,
                  "endLine": 95,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1062,
          "message": {
            "text": "The JUnit 5 test method name 'test_andNot' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1063,
          "message": {
            "text": "The JUnit 5 test method name 'test_andNot_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 17,
                  "endLine": 137,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1064,
          "message": {
            "text": "The JUnit 5 test method name 'test_cardinality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 17,
                  "endLine": 155,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1065,
          "message": {
            "text": "The JUnit 5 test method name 'test_clear' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 17,
                  "endLine": 182,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1066,
          "message": {
            "text": "The JUnit 5 test method name 'test_clearI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 17,
                  "endLine": 202,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1067,
          "message": {
            "text": "The JUnit 5 test method name 'test_clearII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 17,
                  "endLine": 251,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1068,
          "message": {
            "text": "The JUnit 5 test method name 'test_clearIntArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 17,
                  "endLine": 438,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1069,
          "message": {
            "text": "The JUnit 5 test method name 'test_clone' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 17,
                  "endLine": 487,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1070,
          "message": {
            "text": "The JUnit 5 test method name 'test_Constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 17,
                  "endLine": 496,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1071,
          "message": {
            "text": "The JUnit 5 test method name 'test_ConstructorInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 17,
                  "endLine": 506,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1072,
          "message": {
            "text": "The JUnit 5 test method name 'test_equals' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 17,
                  "endLine": 521,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "EqualsNull",
          "ruleIndex": 1073,
          "message": {
            "text": "Avoid using equals() to compare against null"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 21,
                  "endLine": 528,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1074,
          "message": {
            "text": "The JUnit 5 test method name 'test_flipI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 17,
                  "endLine": 542,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 33,
                  "endLine": 569,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 37,
                  "endLine": 573,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 29,
                  "endLine": 576,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1075,
          "message": {
            "text": "The JUnit 5 test method name 'test_flipII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 17,
                  "endLine": 613,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 11,
                  "endLine": 741,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 11,
                  "endLine": 748,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 11,
                  "endLine": 755,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1076,
          "message": {
            "text": "The JUnit 5 test method name 'test_getI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 17,
                  "endLine": 762,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1077,
          "message": {
            "text": "The JUnit 5 test method name 'test_getII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 17,
                  "endLine": 798,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 22,
                  "endLine": 803,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1078,
          "message": {
            "text": "The JUnit 5 test method name 'test_hashCode' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 937,
                  "startColumn": 17,
                  "endLine": 937,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1079,
          "message": {
            "text": "The JUnit 5 test method name 'test_intersects' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 17,
                  "endLine": 952,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1080,
          "message": {
            "text": "The JUnit 5 test method name 'test_intersects_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1011,
                  "startColumn": 17,
                  "endLine": 1011,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1081,
          "message": {
            "text": "The JUnit 5 test method name 'test_isEmpty' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1070,
                  "startColumn": 17,
                  "endLine": 1070,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1082,
          "message": {
            "text": "The JUnit 5 test method name 'test_length' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1102,
                  "startColumn": 17,
                  "endLine": 1102,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1083,
          "message": {
            "text": "The JUnit 5 test method name 'test_nextClearBitI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1119,
                  "startColumn": 17,
                  "endLine": 1119,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1136,
                  "startColumn": 11,
                  "endLine": 1138,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1084,
          "message": {
            "text": "The JUnit 5 test method name 'test_nextSetBitI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1187,
                  "startColumn": 17,
                  "endLine": 1187,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1201,
                  "startColumn": 11,
                  "endLine": 1203,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1085,
          "message": {
            "text": "The JUnit 5 test method name 'test_or' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 17,
                  "endLine": 1245,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1086,
          "message": {
            "text": "The JUnit 5 test method name 'test_or_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1269,
                  "startColumn": 17,
                  "endLine": 1269,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1087,
          "message": {
            "text": "The JUnit 5 test method name 'test_or_FluentBitSetArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1293,
                  "startColumn": 17,
                  "endLine": 1293,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1088,
          "message": {
            "text": "The JUnit 5 test method name 'test_previousClearBit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1317,
                  "startColumn": 17,
                  "endLine": 1317,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1089,
          "message": {
            "text": "The JUnit 5 test method name 'test_previousSetBit' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1326,
                  "startColumn": 17,
                  "endLine": 1326,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1090,
          "message": {
            "text": "The JUnit 5 test method name 'test_setII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1335,
                  "startColumn": 17,
                  "endLine": 1335,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1441,
                  "startColumn": 11,
                  "endLine": 1443,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1448,
                  "startColumn": 11,
                  "endLine": 1450,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1458,
                  "startColumn": 11,
                  "endLine": 1460,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1091,
          "message": {
            "text": "The JUnit 5 test method name 'test_setIIZ' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1467,
                  "startColumn": 17,
                  "endLine": 1467,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1092,
          "message": {
            "text": "The JUnit 5 test method name 'test_setInclusive' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1481,
                  "startColumn": 17,
                  "endLine": 1481,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1587,
                  "startColumn": 11,
                  "endLine": 1589,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1594,
                  "startColumn": 11,
                  "endLine": 1596,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1604,
                  "startColumn": 11,
                  "endLine": 1606,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1093,
          "message": {
            "text": "The JUnit 5 test method name 'test_setInt' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1613,
                  "startColumn": 17,
                  "endLine": 1613,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1623,
                  "startColumn": 11,
                  "endLine": 1625,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1633,
                  "startColumn": 33,
                  "endLine": 1633,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1637,
                  "startColumn": 37,
                  "endLine": 1637,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1640,
                  "startColumn": 29,
                  "endLine": 1640,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1094,
          "message": {
            "text": "The JUnit 5 test method name 'test_setIntArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1656,
                  "startColumn": 17,
                  "endLine": 1656,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 42,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1666,
                  "startColumn": 11,
                  "endLine": 1668,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1676,
                  "startColumn": 33,
                  "endLine": 1676,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1680,
                  "startColumn": 37,
                  "endLine": 1680,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1683,
                  "startColumn": 29,
                  "endLine": 1683,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1095,
          "message": {
            "text": "The JUnit 5 test method name 'test_setIZ' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1699,
                  "startColumn": 17,
                  "endLine": 1699,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1096,
          "message": {
            "text": "The JUnit 5 test method name 'test_setRangeInclusive' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 17,
                  "endLine": 1712,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1097,
          "message": {
            "text": "The JUnit 5 test method name 'test_size' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1724,
                  "startColumn": 17,
                  "endLine": 1724,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1098,
          "message": {
            "text": "The JUnit 5 test method name 'test_stream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1736,
                  "startColumn": 17,
                  "endLine": 1736,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1099,
          "message": {
            "text": "The JUnit 5 test method name 'test_toByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1745,
                  "startColumn": 17,
                  "endLine": 1745,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1100,
          "message": {
            "text": "The JUnit 5 test method name 'test_toLongArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1754,
                  "startColumn": 17,
                  "endLine": 1754,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1101,
          "message": {
            "text": "The JUnit 5 test method name 'test_toString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1763,
                  "startColumn": 17,
                  "endLine": 1763,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1102,
          "message": {
            "text": "The JUnit 5 test method name 'test_xor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1774,
                  "startColumn": 17,
                  "endLine": 1774,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1103,
          "message": {
            "text": "The JUnit 5 test method name 'test_xor_BitSet' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/src/test/java/org/apache/commons/lang3/util/FluentBitSetTest.java"
                },
                "region": {
                  "startLine": 1803,
                  "startColumn": 17,
                  "endLine": 1803,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1104,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1105,
          "message": {
            "text": "Unused import 'org.apache.commons.lang3.HashSetvBitSetTest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1106,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 10,
                  "endLine": 19,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1107,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 25,
                  "endLine": 4,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 25,
                  "endLine": 9,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 25,
                  "endLine": 15,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1108,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "endLine": 3,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1124,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.HashSetvBitSetTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1125,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_testBitSet_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1126,
          "message": {
            "text": "The instance method name 'testBitSet_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1129,
          "message": {
            "text": "The static method name 'testBitSet_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 272,
                  "endLine": 116,
                  "endColumn": 295
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1131,
          "message": {
            "text": "The instance method name 'testBitSet_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 40,
                  "endLine": 140,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1132,
          "message": {
            "text": "The static method name 'testBitSet_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 271,
                  "endLine": 185,
                  "endColumn": 294
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1133,
          "message": {
            "text": "The instance method name 'testBitSet_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 40,
                  "endLine": 209,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1134,
          "message": {
            "text": "The static method name 'testBitSet_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 344,
                  "endLine": 255,
                  "endColumn": 367
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1135,
          "message": {
            "text": "The instance method name 'testBitSet_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 40,
                  "endLine": 297,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1136,
          "message": {
            "text": "The static method name 'testBitSet_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 284,
                  "endLine": 321,
                  "endColumn": 307
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1137,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 32,
                  "endLine": 335,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testBitSet_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1124,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.HashSetvBitSetTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1138,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_testHashSet_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1139,
          "message": {
            "text": "The instance method name 'testHashSet_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1140,
          "message": {
            "text": "The static method name 'testHashSet_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 273,
                  "endLine": 116,
                  "endColumn": 296
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1141,
          "message": {
            "text": "The instance method name 'testHashSet_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 40,
                  "endLine": 140,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1142,
          "message": {
            "text": "The static method name 'testHashSet_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 272,
                  "endLine": 185,
                  "endColumn": 295
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1143,
          "message": {
            "text": "The instance method name 'testHashSet_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 40,
                  "endLine": 209,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1144,
          "message": {
            "text": "The static method name 'testHashSet_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 345,
                  "endLine": 255,
                  "endColumn": 368
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1145,
          "message": {
            "text": "The instance method name 'testHashSet_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 40,
                  "endLine": 297,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1146,
          "message": {
            "text": "The static method name 'testHashSet_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 285,
                  "endLine": 321,
                  "endColumn": 308
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1137,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 32,
                  "endLine": 335,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_testHashSet_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1124,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.HashSetvBitSetTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1147,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1148,
          "message": {
            "text": "The instance method name 'timeBitSetRemoveAll_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1149,
          "message": {
            "text": "The static method name 'timeBitSetRemoveAll_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 281,
                  "endLine": 116,
                  "endColumn": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1150,
          "message": {
            "text": "The instance method name 'timeBitSetRemoveAll_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 40,
                  "endLine": 140,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1151,
          "message": {
            "text": "The static method name 'timeBitSetRemoveAll_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 280,
                  "endLine": 185,
                  "endColumn": 303
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1152,
          "message": {
            "text": "The instance method name 'timeBitSetRemoveAll_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 40,
                  "endLine": 209,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1153,
          "message": {
            "text": "The static method name 'timeBitSetRemoveAll_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 353,
                  "endLine": 255,
                  "endColumn": 376
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1154,
          "message": {
            "text": "The instance method name 'timeBitSetRemoveAll_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 40,
                  "endLine": 297,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1155,
          "message": {
            "text": "The static method name 'timeBitSetRemoveAll_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 293,
                  "endLine": 321,
                  "endColumn": 316
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1137,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 32,
                  "endLine": 335,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeBitSetRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1124,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.HashSetvBitSetTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1156,
          "message": {
            "text": "The class name 'HashSetvBitSetTest_timeExtractRemoveAll_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1157,
          "message": {
            "text": "The instance method name 'timeExtractRemoveAll_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1158,
          "message": {
            "text": "The static method name 'timeExtractRemoveAll_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 282,
                  "endLine": 116,
                  "endColumn": 305
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1159,
          "message": {
            "text": "The instance method name 'timeExtractRemoveAll_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 40,
                  "endLine": 140,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1160,
          "message": {
            "text": "The static method name 'timeExtractRemoveAll_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 281,
                  "endLine": 185,
                  "endColumn": 304
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1161,
          "message": {
            "text": "The instance method name 'timeExtractRemoveAll_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 40,
                  "endLine": 209,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1162,
          "message": {
            "text": "The static method name 'timeExtractRemoveAll_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 354,
                  "endLine": 255,
                  "endColumn": 377
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1163,
          "message": {
            "text": "The instance method name 'timeExtractRemoveAll_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1127,
          "message": {
            "text": "The local variable name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 40,
                  "endLine": 297,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1164,
          "message": {
            "text": "The static method name 'timeExtractRemoveAll_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1130,
          "message": {
            "text": "The method parameter name 'l_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 294,
                  "endLine": 321,
                  "endColumn": 317
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1137,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_hashsetvbitsettest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 32,
                  "endLine": 335,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/HashSetvBitSetTest_timeExtractRemoveAll_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1165,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1166,
          "message": {
            "text": "Unused import 'org.apache.commons.lang3.StringUtilsIsMixedCaseTest'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1167,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B1.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 10,
                  "endLine": 19,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1168,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 25,
                  "endLine": 4,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 25,
                  "endLine": 9,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 44,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B2.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 25,
                  "endLine": 15,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1169,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "endLine": 3,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_jmhType_B3.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1171,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1172,
          "message": {
            "text": "The instance method name 'newIsMixedCaseBeginningMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1174,
          "message": {
            "text": "The static method name 'newIsMixedCaseBeginningMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 298,
                  "endLine": 116,
                  "endColumn": 329
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1176,
          "message": {
            "text": "The instance method name 'newIsMixedCaseBeginningMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1177,
          "message": {
            "text": "The static method name 'newIsMixedCaseBeginningMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 297,
                  "endLine": 185,
                  "endColumn": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1178,
          "message": {
            "text": "The instance method name 'newIsMixedCaseBeginningMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1179,
          "message": {
            "text": "The static method name 'newIsMixedCaseBeginningMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 370,
                  "endLine": 255,
                  "endColumn": 401
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1180,
          "message": {
            "text": "The instance method name 'newIsMixedCaseBeginningMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1181,
          "message": {
            "text": "The static method name 'newIsMixedCaseBeginningMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 310,
                  "endLine": 321,
                  "endColumn": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1183,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1184,
          "message": {
            "text": "The instance method name 'newIsMixedCaseEndMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1185,
          "message": {
            "text": "The static method name 'newIsMixedCaseEndMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 292,
                  "endLine": 116,
                  "endColumn": 323
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1186,
          "message": {
            "text": "The instance method name 'newIsMixedCaseEndMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1187,
          "message": {
            "text": "The static method name 'newIsMixedCaseEndMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 291,
                  "endLine": 185,
                  "endColumn": 322
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1188,
          "message": {
            "text": "The instance method name 'newIsMixedCaseEndMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1189,
          "message": {
            "text": "The static method name 'newIsMixedCaseEndMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 364,
                  "endLine": 255,
                  "endColumn": 395
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1190,
          "message": {
            "text": "The instance method name 'newIsMixedCaseEndMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1191,
          "message": {
            "text": "The static method name 'newIsMixedCaseEndMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 304,
                  "endLine": 321,
                  "endColumn": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1192,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1193,
          "message": {
            "text": "The instance method name 'newIsMixedCaseMiddleMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1194,
          "message": {
            "text": "The static method name 'newIsMixedCaseMiddleMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 295,
                  "endLine": 116,
                  "endColumn": 326
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1195,
          "message": {
            "text": "The instance method name 'newIsMixedCaseMiddleMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1196,
          "message": {
            "text": "The static method name 'newIsMixedCaseMiddleMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 294,
                  "endLine": 185,
                  "endColumn": 325
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1197,
          "message": {
            "text": "The instance method name 'newIsMixedCaseMiddleMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1198,
          "message": {
            "text": "The static method name 'newIsMixedCaseMiddleMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 367,
                  "endLine": 255,
                  "endColumn": 398
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1199,
          "message": {
            "text": "The instance method name 'newIsMixedCaseMiddleMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1200,
          "message": {
            "text": "The static method name 'newIsMixedCaseMiddleMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 307,
                  "endLine": 321,
                  "endColumn": 338
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1201,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1202,
          "message": {
            "text": "The instance method name 'newIsMixedCaseNoneMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1203,
          "message": {
            "text": "The static method name 'newIsMixedCaseNoneMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 293,
                  "endLine": 116,
                  "endColumn": 324
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1204,
          "message": {
            "text": "The instance method name 'newIsMixedCaseNoneMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1205,
          "message": {
            "text": "The static method name 'newIsMixedCaseNoneMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 292,
                  "endLine": 185,
                  "endColumn": 323
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1206,
          "message": {
            "text": "The instance method name 'newIsMixedCaseNoneMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1207,
          "message": {
            "text": "The static method name 'newIsMixedCaseNoneMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 365,
                  "endLine": 255,
                  "endColumn": 396
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1208,
          "message": {
            "text": "The instance method name 'newIsMixedCaseNoneMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1209,
          "message": {
            "text": "The static method name 'newIsMixedCaseNoneMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 305,
                  "endLine": 321,
                  "endColumn": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_newIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1210,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1211,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseBeginningMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1212,
          "message": {
            "text": "The static method name 'oldIsMixedCaseBeginningMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 298,
                  "endLine": 116,
                  "endColumn": 329
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1213,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseBeginningMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1214,
          "message": {
            "text": "The static method name 'oldIsMixedCaseBeginningMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 297,
                  "endLine": 185,
                  "endColumn": 328
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1215,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseBeginningMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1216,
          "message": {
            "text": "The static method name 'oldIsMixedCaseBeginningMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 370,
                  "endLine": 255,
                  "endColumn": 401
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1217,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseBeginningMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1218,
          "message": {
            "text": "The static method name 'oldIsMixedCaseBeginningMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 310,
                  "endLine": 321,
                  "endColumn": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseBeginningMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1219,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1220,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseEndMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1221,
          "message": {
            "text": "The static method name 'oldIsMixedCaseEndMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 292,
                  "endLine": 116,
                  "endColumn": 323
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1222,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseEndMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1223,
          "message": {
            "text": "The static method name 'oldIsMixedCaseEndMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 291,
                  "endLine": 185,
                  "endColumn": 322
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1224,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseEndMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1225,
          "message": {
            "text": "The static method name 'oldIsMixedCaseEndMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 364,
                  "endLine": 255,
                  "endColumn": 395
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1226,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseEndMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1227,
          "message": {
            "text": "The static method name 'oldIsMixedCaseEndMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 304,
                  "endLine": 321,
                  "endColumn": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseEndMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1228,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1229,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseMiddleMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1230,
          "message": {
            "text": "The static method name 'oldIsMixedCaseMiddleMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 295,
                  "endLine": 116,
                  "endColumn": 326
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1231,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseMiddleMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1232,
          "message": {
            "text": "The static method name 'oldIsMixedCaseMiddleMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 294,
                  "endLine": 185,
                  "endColumn": 325
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1233,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseMiddleMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1234,
          "message": {
            "text": "The static method name 'oldIsMixedCaseMiddleMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 367,
                  "endLine": 255,
                  "endColumn": 398
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1235,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseMiddleMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1236,
          "message": {
            "text": "The static method name 'oldIsMixedCaseMiddleMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 307,
                  "endLine": 321,
                  "endColumn": 338
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseMiddleMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1109,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1110,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1111,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1112,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1113,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1114,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1115,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1116,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1117,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1118,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1119,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1120,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1121,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1122,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1123,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1170,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.lang3.jmh_generated.StringUtilsIsMixedCaseTest_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 1237,
          "message": {
            "text": "The class name 'StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 53,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1238,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseNoneMatch_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1239,
          "message": {
            "text": "The static method name 'oldIsMixedCaseNoneMatch_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 293,
                  "endLine": 116,
                  "endColumn": 324
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1240,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseNoneMatch_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 48,
                  "endLine": 140,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1241,
          "message": {
            "text": "The static method name 'oldIsMixedCaseNoneMatch_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 292,
                  "endLine": 185,
                  "endColumn": 323
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1242,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseNoneMatch_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 48,
                  "endLine": 209,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 22,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 51,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1243,
          "message": {
            "text": "The static method name 'oldIsMixedCaseNoneMatch_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 365,
                  "endLine": 255,
                  "endColumn": 396
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1244,
          "message": {
            "text": "The instance method name 'oldIsMixedCaseNoneMatch_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 1173,
          "message": {
            "text": "The local variable name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 48,
                  "endLine": 297,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1245,
          "message": {
            "text": "The static method name 'oldIsMixedCaseNoneMatch_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1175,
          "message": {
            "text": "The method parameter name 'l_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 305,
                  "endLine": 321,
                  "endColumn": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 1182,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_stringutilsismixedcasetest0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 40,
                  "endLine": 335,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 1128,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-lang/tag_4/commons-lang-commons-lang-3.15.0-RC1/target/generated-test-sources/test-annotations/org/apache/commons/lang3/jmh_generated/StringUtilsIsMixedCaseTest_oldIsMixedCaseNoneMatch_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        }
      ],
      "invocations": [
        {
          "executionSuccessful": true,
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": []
        }
      ]
    }
  ]
}

{
  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PMD",
          "version": "7.8.0",
          "informationUri": "https://docs.pmd-code.org/latest/",
          "rules": [
            {
              "id": "UseUtilityClass",
              "shortDescription": {
                "text": "This utility class has a non-private constructor"
              },
              "fullDescription": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#useutilityclass",
              "help": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The final method parameter name 'Default' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this StringReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnnecessaryConstructor",
              "shortDescription": {
                "text": "Avoid unnecessary constructors - the compiler will generate these for you"
              },
              "fullDescription": {
                "text": "\nThis rule detects when a constructor is not necessary; i.e., when there is only one constructor and the\nconstructor is identical to the default constructor. The default constructor should has same access\nmodifier as the declaring class. In an enum type, the default constructor is implicitly private.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryconstructor",
              "help": {
                "text": "\nThis rule detects when a constructor is not necessary; i.e., when there is only one constructor and the\nconstructor is identical to the default constructor. The default constructor should has same access\nmodifier as the declaring class. In an enum type, the default constructor is implicitly private.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UncommentedEmptyConstructor",
              "shortDescription": {
                "text": "Document empty constructor"
              },
              "fullDescription": {
                "text": "\nUncommented Empty Constructor finds instances where a constructor does not\ncontain statements, but there is no comment. By explicitly commenting empty\nconstructors it is easier to distinguish between intentional (commented)\nand unintentional empty constructors.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_documentation.html#uncommentedemptyconstructor",
              "help": {
                "text": "\nUncommented Empty Constructor finds instances where a constructor does not\ncontain statements, but there is no comment. By explicitly commenting empty\nconstructors it is easier to distinguish between intentional (commented)\nand unintentional empty constructors.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'Thread': 'MAX_PRIORITY' is already in scope because it is inherited by an enclosing type"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidUsingVolatile",
              "shortDescription": {
                "text": "Use of modifier volatile is not recommended."
              },
              "fullDescription": {
                "text": "\nUse of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires\na good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,\nthe volatile keyword should not be used for maintenance purpose and portability.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_multithreading.html#avoidusingvolatile",
              "help": {
                "text": "\nUse of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires\na good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,\nthe volatile keyword should not be used for maintenance purpose and portability.\n        "
              },
              "properties": {
                "ruleset": "Multithreading",
                "priority": 2,
                "tags": [
                  "Multithreading"
                ]
              }
            },
            {
              "id": "SimplifyBooleanReturns",
              "shortDescription": {
                "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
              },
              "fullDescription": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#simplifybooleanreturns",
              "help": {
                "text": "\nAvoid unnecessary if-then-else statements when returning a boolean. The result of\nthe conditional test can be returned instead.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'out'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'err'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'FileUtils': 'deleteQuietly' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LiteralsFirstInComparisons",
              "shortDescription": {
                "text": "Position literals first in String comparisons"
              },
              "fullDescription": {
                "text": "\n            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions\n            can be avoided, they will just return false. Note that switching literal positions for compareTo and\n            compareToIgnoreCase may change the result, see examples.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#literalsfirstincomparisons",
              "help": {
                "text": "\n            Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions\n            can be avoided, they will just return false. Note that switching literal positions for compareTo and\n            compareToIgnoreCase may change the result, see examples.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The local variable name 'display_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The local variable name 'chars_read' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The final method parameter name '_cbuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The final method parameter name '_lbuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'IOCase': 'values' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CompareObjectsWithEquals",
              "shortDescription": {
                "text": "Use equals() to compare object references."
              },
              "fullDescription": {
                "text": "\nUse `equals()` to compare object references; avoid comparing them with `==`.\n\nSince comparing objects with named constants is useful in some cases (eg, when\ndefining constants for sentinel values), the rule ignores comparisons against\nfields with all-caps name (eg `this == SENTINEL`), which is a common naming\nconvention for constant fields.\n\nYou may allow some types to be compared by reference by listing the exceptions\nin the `typesThatCompareByReference` property.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#compareobjectswithequals",
              "help": {
                "text": "\nUse `equals()` to compare object references; avoid comparing them with `==`.\n\nSince comparing objects with named constants is useful in some cases (eg, when\ndefining constants for sentinel values), the rule ignores comparisons against\nfields with all-caps name (eg `this == SENTINEL`), which is a common naming\nconvention for constant fields.\n\nYou may allow some types to be compared by reference by listing the exceptions\nin the `typesThatCompareByReference` property.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'IOUtils': 'byteArray' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "EmptyCatchBlock",
              "shortDescription": {
                "text": "Avoid empty catch blocks"
              },
              "fullDescription": {
                "text": "\nEmpty Catch Block finds instances where an exception is caught, but nothing is done.\nIn most circumstances, this swallows an exception which should either be acted on\nor reported.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#emptycatchblock",
              "help": {
                "text": "\nEmpty Catch Block finds instances where an exception is caught, but nothing is done.\nIn most circumstances, this swallows an exception which should either be acted on\nor reported.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'Counters': 'bigIntegerCounter' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'Counters': 'longCounter' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'Counters': 'noopCounter' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
              "shortDescription": {
                "text": "This class has only private constructors and may be final"
              },
              "fullDescription": {
                "text": "\nReports classes that may be made final because they cannot be extended from outside\ntheir compilation unit anyway. This is because all their constructors are private,\nso a subclass could not call the super constructor.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal",
              "help": {
                "text": "\nReports classes that may be made final because they cannot be extended from outside\ntheir compilation unit anyway. This is because all their constructors are private,\nso a subclass could not call the super constructor.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 1,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'PathUtils': 'noFollowLinkOptionArray' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'StandardDeleteOption': 'OVERRIDE_READ_ONLY' is already in scope because it is declared in an enclosing type"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FinalParameterInAbstractMethod",
              "shortDescription": {
                "text": "Final parameter in abstract method"
              },
              "fullDescription": {
                "text": "\n            Declaring a method parameter as final for an interface method is useless because the implementation may choose to not respect it.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#finalparameterinabstractmethod",
              "help": {
                "text": "\n            Declaring a method parameter as final for an interface method is useless because the implementation may choose to not respect it.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `target::equals`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `closeHandler::run`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidAccessibilityAlteration",
              "shortDescription": {
                "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
              },
              "fullDescription": {
                "text": "\nMethods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also\nreturn private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`.\nThis gives access to normally protected data which violates the principle of encapsulation.\n\nThis rule detects calls to `setAccessible` and finds possible accessibility alterations.\nIf the call to `setAccessible` is wrapped within a `PrivilegedAction`, then the access alteration\nis assumed to be deliberate and is not reported.\n\nNote that with Java 17 the Security Manager, which is used for `PrivilegedAction` execution,\nis deprecated: [JEP 411: Deprecate the Security Manager for Removal](https://openjdk.org/jeps/411).\nFor future-proof code, deliberate access alteration should be suppressed using the usual\nsuppression methods (e.g. by using `@SuppressWarnings` annotation).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidaccessibilityalteration",
              "help": {
                "text": "\nMethods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also\nreturn private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`.\nThis gives access to normally protected data which violates the principle of encapsulation.\n\nThis rule detects calls to `setAccessible` and finds possible accessibility alterations.\nIf the call to `setAccessible` is wrapped within a `PrivilegedAction`, then the access alteration\nis assumed to be deliberate and is not reported.\n\nNote that with Java 17 the Security Manager, which is used for `PrivilegedAction` execution,\nis deprecated: [JEP 411: Deprecate the Security Manager for Removal](https://openjdk.org/jeps/411).\nFor future-proof code, deliberate access alteration should be suppressed using the usual\nsuppression methods (e.g. by using `@SuppressWarnings` annotation).\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "PreserveStackTrace",
              "shortDescription": {
                "text": "Thrown exception does not preserve the stack trace of exception 'e1' on all code paths"
              },
              "fullDescription": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#preservestacktrace",
              "help": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this InputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AvoidMessageDigestField",
              "shortDescription": {
                "text": "You shouldnt declare field of MessageDigest type, because unsynchronized access could cause problems"
              },
              "fullDescription": {
                "text": "\n            Declaring a MessageDigest instance as a field make this instance directly available to multiple threads.\n            Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results\n            if the access is not synchronized correctly.\n            Just create a new instance and use it locally, where you need it.\n            Creating a new instance is easier than synchronizing access to a shared instance.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#avoidmessagedigestfield",
              "help": {
                "text": "\n            Declaring a MessageDigest instance as a field make this instance directly available to multiple threads.\n            Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results\n            if the access is not synchronized correctly.\n            Just create a new instance and use it locally, where you need it.\n            Creating a new instance is easier than synchronizing access to a shared instance.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "OneDeclarationPerLine",
              "shortDescription": {
                "text": "Use one line for each declaration, it enhances code readability."
              },
              "fullDescription": {
                "text": "\nJava allows the use of several variables declaration of the same type on one line.\nHowever, it can lead to quite messy code. This rule looks for several declarations on the same line.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#onedeclarationperline",
              "help": {
                "text": "\nJava allows the use of several variables declaration of the same type on one line.\nHowever, it can lead to quite messy code. This rule looks for several declarations on the same line.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 4,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "AvoidCatchingThrowable",
              "shortDescription": {
                "text": "A catch statement should never catch throwable since it includes errors."
              },
              "fullDescription": {
                "text": "\nCatching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as\nOutOfMemoryError that should be exposed and managed separately.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidcatchingthrowable",
              "help": {
                "text": "\nCatching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as\nOutOfMemoryError that should be exposed and managed separately.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AvoidInstanceofChecksInCatchClause",
              "shortDescription": {
                "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
              },
              "fullDescription": {
                "text": "\nEach caught exception type should be handled in its own catch clause.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause",
              "help": {
                "text": "\nEach caught exception type should be handled in its own catch clause.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AssignmentInOperand",
              "shortDescription": {
                "text": "Avoid assignments in operands"
              },
              "fullDescription": {
                "text": "\nAvoid assignments in operands; this can make code more complicated and harder to read.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#assignmentinoperand",
              "help": {
                "text": "\nAvoid assignments in operands; this can make code more complicated and harder to read.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "AvoidProtectedFieldInFinalClass",
              "shortDescription": {
                "text": "Avoid protected fields in a final class.  Change to private or package access."
              },
              "fullDescription": {
                "text": "\nDo not use protected fields in final classes since they cannot be subclassed.\nClarify your intent by using private or package access modifiers instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass",
              "help": {
                "text": "\nDo not use protected fields in final classes since they cannot be subclassed.\nClarify your intent by using private or package access modifiers instead.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this BufferedReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this OutputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'FileWriterWithEncoding': 'initWriter' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidStringBufferField",
              "shortDescription": {
                "text": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
              },
              "fullDescription": {
                "text": "\nStringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks\nif held within objects with long lifetimes.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#avoidstringbufferfield",
              "help": {
                "text": "\nStringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks\nif held within objects with long lifetimes.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'TEST_STRING_2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "PreserveStackTrace",
              "shortDescription": {
                "text": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths"
              },
              "fullDescription": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#preservestacktrace",
              "help": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIso8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharset_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharset_String_Charset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_byteArrayToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_byteArrayToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_inputStreamToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_inputStreamToWriterWithEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_readerToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this InputStreamReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_stringToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_stringToOutputStreamString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'copy_stringToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_byteArrayToWriterWithEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStreamString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'DirectoryWalkerTestCaseJava4' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileCleanerDirectory_ForceStrategy_FileSource' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileCleanerDirectory_ForceStrategy_PathSource' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileCleanerDirectory_NullStrategy' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileCleanerExitWhenFinished_NoTrackAfter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this RandomAccessFile object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "DoNotCallGarbageCollectionExplicitly",
              "shortDescription": {
                "text": "Do not explicitly trigger a garbage collection."
              },
              "fullDescription": {
                "text": "\nCalls to `System.gc()`, `Runtime.getRuntime().gc()`, and `System.runFinalization()` are not advised.\nCode should have the same behavior whether the garbage collection is disabled using the option\n`-Xdisableexplicitgc` or not.\n\nMoreover, \"modern\" JVMs do a very good job handling garbage collections. If memory usage issues unrelated to memory\nleaks develop within an application, it should be dealt with JVM options rather than within the code itself.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly",
              "help": {
                "text": "\nCalls to `System.gc()`, `Runtime.getRuntime().gc()`, and `System.runFinalization()` are not advised.\nCode should have the same behavior whether the garbage collection is disabled using the option\n`-Xdisableexplicitgc` or not.\n\nMoreover, \"modern\" JVMs do a very good job handling garbage collections. If memory usage issues unrelated to memory\nleaks develop within an application, it should be dealt with JVM options rather than within the code itself.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 2,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UncommentedEmptyMethodBody",
              "shortDescription": {
                "text": "Document empty method body"
              },
              "fullDescription": {
                "text": "\nUncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_documentation.html#uncommentedemptymethodbody",
              "help": {
                "text": "\nUncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpace_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_InitError' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_NullPath' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_Other' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_Unix' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_Windows' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_EmptyPath' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_EmptyResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse3' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse4' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_LongResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_LongResponseKb' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseFreeBSD' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseKbLinux' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseKbSolaris' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseLinux' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_EmptyMultiLineResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_EmptyPath' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_EmptyResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_InvalidTextResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_NormalResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_NoSuchDirectoryResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_ParseCommaFormatBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Big' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Small' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_quoted' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_StripDrive' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'TWO_SECOND' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'openOutputStream_noParent' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openInputStream_exists' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openInputStream_existsButIsDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openInputStream_notExists' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_exists' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_existsButIsDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_intoExistingSymlinkedDir' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_noParentCreateFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_noParentNoFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_notExists' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_openOutputStream_notExistsCannotCreate' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'KB1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'MB1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'GB1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'GB2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'TB1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'PB1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'EB1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyDirectoryToDirectory_NonExistingDest' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'output1': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'java.util': 'Date' is already in scope because it is imported in this file"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'expected_A' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'expected_B' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The final local variable name 'expected_C' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFile_Parent' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'filesCount'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveDirectory_CopyDelete' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveDirectory_Rename' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveDirectoryToDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete_Failed' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete_WithFileDatePreservation' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete_WithoutFileDatePreservation' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFile_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFile_Rename' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveFileToDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMoveToDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithOffsetAndLength' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_3arg_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_4arg' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_4arg_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_4arg_Writer_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'testFile1' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'testFile2' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'testFile1Size' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'testFile2Size' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testEquals_fullControl' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testEqualsNormalizedError_IO_128' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetBaseName_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFullPathNoEndSeparator_IO_248' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetPath_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetPathNoEndSeparator_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetPrefix_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIsExtension_injection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidUsingHardCodedIP",
              "shortDescription": {
                "text": "Do not hard code the IP address ${variableName}"
              },
              "fullDescription": {
                "text": "\nApplication with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#avoidusinghardcodedip",
              "help": {
                "text": "\nApplication with hard-coded IP addresses can become impossible to deploy in some cases.\nExternalizing IP adresses is preferable.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testNormalize_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_IO_246' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'out': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkCompare_case' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkCompare_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkEndsWith_case' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkEndsWith_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkEquals_case' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkEquals_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkIndexOf_case' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkIndexOf_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkRegionMatches_case' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkRegionMatches_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkStartsWith_case' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_checkStartsWith_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_forName' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getName' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getScratchByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getScratchByteArrayWriteOnly' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getScratchCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_getScratchCharArrayWriteOnly' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isCaseSensitive' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_isCaseSensitive_static' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_serialization' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_toString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_byteArrayOutputStreamToInputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_byteArrayOutputStreamToInputStream_nullOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStreamWithBufferSize' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testCopy_inputStreamToOutputStreamWithBufferSize' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToAppendable' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToAppendable_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this Reader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToAppendable_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToAppendable_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToWriter_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this Writer object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToWriter_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_readerToWriter_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_URLToFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_URLToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'inflate': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this ExecutorService object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFullyOnInflaterInputStream_New_bytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFullyOnInflaterInputStream_ThreadLocal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "PreserveStackTrace",
              "shortDescription": {
                "text": "Thrown exception does not preserve the stack trace of exception 'ioe' on all code paths"
              },
              "fullDescription": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#preservestacktrace",
              "help": {
                "text": "\nReports exceptions that are thrown from within a catch block, yet don't refer to the\nexception parameter declared by that catch block. The stack trace of the original\nexception could be lost, which makes the thrown exception less informative.\n\nTo preserve the stack trace, the original exception may be used as the cause of\nthe new exception, using `Throwable#initCause`, or passed as a constructor argument\nto the new exception. It may also be preserved using `Throwable#addSuppressed`.\nThe rule actually assumes that any method or constructor that takes the original\nexception as argument preserves the original stack trace.\n\nThe rule allows `InvocationTargetException` and `PrivilegedActionException` to be\nreplaced by their cause exception. The discarded part of the stack trace is in those\ncases only JDK-internal code, which is not very useful. The rule also ignores exceptions\nwhose name starts with `ignored`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this BufferedInputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this BufferedWriter object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this Closeable object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_AllCloseableIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_CloseableIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_Selector' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this Selector object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_SelectorIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_SelectorNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_SelectorTwice' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_ServerSocket' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_ServerSocketIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_Socket' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCloseQuietly_SocketIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContentEquals_InputStream_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'input1': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'input2': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'input2'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testContentEquals_Reader_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this CharArrayReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_ByteArray_OutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_ByteArray_Writer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopy_String_Writer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_CharExtraLength' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_CharFullLength' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_CharNoSkip' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_CharSkip' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_CharSkipInvalid' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_ExtraLength' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_FullLength' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_NoSkip' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_Skip' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_SkipInvalid' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCopyLarge_SkipWithInvalidOffset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRead_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this FileInputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this FileChannel object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadFully_InputStream__ReturnByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadFully_InputStream_ByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadFully_InputStream_Offset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadFully_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadFully_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadFully_Reader_Offset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadLines_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadLines_InputStream_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadLines_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtRootPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtRootPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtSubPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtSubPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_NonExistingResource' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_NonExistingResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToByteArray_Null_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtRootPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtRootPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtSubPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtSubPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_NonExistingResource' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_NonExistingResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_NullCharset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_NullCharset_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_NullResource' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToString_NullResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtRootPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtRootPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtSubPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtSubPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_NonExistingResource' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_NonExistingResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testResourceToURL_Null_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkip_FileReader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkip_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkip_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFully_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFully_InputStream_Buffer_New_bytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFully_InputStream_Buffer_Reuse_bytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFully_InputStream_Buffer_Reuse_ThreadLocal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFully_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkipFully_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToBufferedInputStream_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "it is recommended to wrap resource 'in' in try-with-resource declaration directly"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToBufferedInputStreamWithBufferSize_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_LongerThanIntegerMaxValue' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_NegativeSize' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_Size' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeIllegal' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeLong' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeOne' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeZero' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_URI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_URL' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToByteArray_URLConnection' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharArray_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharArray_InputStream_CharsetName' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharArray_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToInputStream_CharSequence' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToInputStream_String' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_ByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_InputStreamSupplier' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testToString_URI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URI_CharsetName' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URI_CharsetNameNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URL' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testToString_URL' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URL_CharsetName' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToString_URL_CharsetNameNull' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding_nullWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_nullWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charArrayToWriter_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_charSequenceToWriter_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWrite_stringToWriter_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_Writer' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_Writer_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_Writer_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testWriteLines_Writer_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ReturnEmptyCollectionRatherThanNull",
              "shortDescription": {
                "text": "Return an empty collection rather than null."
              },
              "fullDescription": {
                "text": "\nFor any method that returns an collection (such as an array, Collection or Map), it is better to return\nan empty one rather than a null reference. This removes the need for null checking all results and avoids\ninadvertent NullPointerExceptions.\n\nSee Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#returnemptycollectionratherthannull",
              "help": {
                "text": "\nFor any method that returns an collection (such as an array, Collection or Map), it is better to return\nan empty one rather than a null reference. This removes the need for null checking all results and avoids\ninadvertent NullPointerExceptions.\n\nSee Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 1,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCR_getBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCRLF_getBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLF_getBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetByteArrayAt_0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetByteArrayAt_0_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetByteArrayAt_1_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'writer': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharsetDecoders_default' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharsetDecoders_ISO_8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharsetDecoders_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharsetEncoders_default' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharsetEncoders_ISO_8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testToCharsetEncoders_null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructorArray_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructorIterable_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructorIterable_order' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'smallerFile' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'largerFile' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'directoryStream': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'probeContentType'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedPrivateMethod",
              "shortDescription": {
                "text": "Avoid unused private methods such as 'testDeleteEmptyDirectory(PathCounters)'."
              },
              "fullDescription": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedprivatemethod",
              "help": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'targetArchive': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_File_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_Path_Absent' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_Path_FileTime_Absent' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_Path_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_URI_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_URL_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "EmptyControlStatement",
              "shortDescription": {
                "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
              },
              "fullDescription": {
                "text": "\n            Reports control statements whose body is empty, as well as empty initializers.\n\n            The checked code constructs are the following:\n            - bodies of `try` statements\n            - `finally` clauses of `try` statements\n            - `switch` statements\n            - `synchronized` statements\n            - `if` statements\n            - loop statements: `while`, `for`, `do .. while`\n            - initializers\n            - blocks used as statements (for scoping)\n\n            This rule replaces the rules EmptyFinallyBlock, \n            EmptyIfStmt, EmptyInitializer, EmptyStatementBlock, \n            EmptySwitchStatements, EmptySynchronizedBlock, EmptyTryBlock, and EmptyWhileStmt.\n\n            Notice that {% rule java/errorprone/EmptyCatchBlock %} is still an independent rule.\n\n            EmptyStatementNotInLoop is replaced by {% rule java/codestyle/UnnecessarySemicolon %}.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#emptycontrolstatement",
              "help": {
                "text": "\n            Reports control statements whose body is empty, as well as empty initializers.\n\n            The checked code constructs are the following:\n            - bodies of `try` statements\n            - `finally` clauses of `try` statements\n            - `switch` statements\n            - `synchronized` statements\n            - `if` statements\n            - loop statements: `while`, `for`, `do .. while`\n            - initializers\n            - blocks used as statements (for scoping)\n\n            This rule replaces the rules EmptyFinallyBlock, \n            EmptyIfStmt, EmptyInitializer, EmptyStatementBlock, \n            EmptySwitchStatements, EmptySynchronizedBlock, EmptyTryBlock, and EmptyWhileStmt.\n\n            Notice that {% rule java/errorprone/EmptyCatchBlock %} is still an independent rule.\n\n            EmptyStatementNotInLoop is replaced by {% rule java/codestyle/UnnecessarySemicolon %}.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'outputStream'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFileSystemProvider_all' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFileSystemProvider_filePath' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFileSystemProvider_fileScheme' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFileSystemProvider_fileURI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testGetFileSystemProvider_fileURL' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilterUtils_and' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilterUtils_or' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFilterArray_fromList' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFilterArray_IOFileFilter' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFilterArray_PathVisitorFileFilter_FileExistsNo' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFilterArray_PathVisitorFileFilter_FileExistsYes' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFilterList_fromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFilterSet_fromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'java.util.regex': 'Pattern' is already in scope because it is imported in this file"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedFormalParameter",
              "shortDescription": {
                "text": "Avoid unused method parameters such as 'target'."
              },
              "fullDescription": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedformalparameter",
              "help": {
                "text": "\nReports parameters of methods and constructors that are not referenced them in the method body.\nParameters whose name starts with `ignored` or `unused` are filtered out.\n\nRemoving unused formal parameters from public methods could cause a ripple effect through the code base.\nHence, by default, this rule only considers private methods. To include non-private methods, set the\n`checkAll` property to `true`.\n\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilter_HardDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilter_HardFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilter_Link' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilter_missingFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileFilter_PathLink' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileNameFilter_HardDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileNameFilter_HardFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileNameFilter_Link' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileNameFilter_missingFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testFileNameFilter_PathLink' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPathFilter_HardDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPathFilter_HardFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPathFilter_Link' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPathFilter_missingFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testPathFilter_PathLink' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `intRef::get`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this BaseStream<Path, ?> object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedPrivateMethod",
              "shortDescription": {
                "text": "Avoid unused private methods such as 'testParallelParallel(BaseStream<?, ?>)'."
              },
              "fullDescription": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedprivatemethod",
              "help": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnusedPrivateMethod",
              "shortDescription": {
                "text": "Avoid unused private methods such as 'testSequentialSequential(BaseStream<?, ?>)'."
              },
              "fullDescription": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedprivatemethod",
              "help": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'IOIntStreamAdapter': 'adapt' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "OverrideBothEqualsAndHashcode",
              "shortDescription": {
                "text": "Ensure you override both equals() and hashCode()"
              },
              "fullDescription": {
                "text": "\nOverride both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#overridebothequalsandhashcode",
              "help": {
                "text": "\nOverride both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither.  Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `TestConstants::throwIOException`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stream::skip`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stream::read`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'read'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "EmptyControlStatement",
              "shortDescription": {
                "text": "Empty while statement"
              },
              "fullDescription": {
                "text": "\n            Reports control statements whose body is empty, as well as empty initializers.\n\n            The checked code constructs are the following:\n            - bodies of `try` statements\n            - `finally` clauses of `try` statements\n            - `switch` statements\n            - `synchronized` statements\n            - `if` statements\n            - loop statements: `while`, `for`, `do .. while`\n            - initializers\n            - blocks used as statements (for scoping)\n\n            This rule replaces the rules EmptyFinallyBlock, \n            EmptyIfStmt, EmptyInitializer, EmptyStatementBlock, \n            EmptySwitchStatements, EmptySynchronizedBlock, EmptyTryBlock, and EmptyWhileStmt.\n\n            Notice that {% rule java/errorprone/EmptyCatchBlock %} is still an independent rule.\n\n            EmptyStatementNotInLoop is replaced by {% rule java/codestyle/UnnecessarySemicolon %}.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#emptycontrolstatement",
              "help": {
                "text": "\n            Reports control statements whose body is empty, as well as empty initializers.\n\n            The checked code constructs are the following:\n            - bodies of `try` statements\n            - `finally` clauses of `try` statements\n            - `switch` statements\n            - `synchronized` statements\n            - `if` statements\n            - loop statements: `while`, `for`, `do .. while`\n            - initializers\n            - blocks used as statements (for scoping)\n\n            This rule replaces the rules EmptyFinallyBlock, \n            EmptyIfStmt, EmptyInitializer, EmptyStatementBlock, \n            EmptySwitchStatements, EmptySynchronizedBlock, EmptyTryBlock, and EmptyWhileStmt.\n\n            Notice that {% rule java/errorprone/EmptyCatchBlock %} is still an independent rule.\n\n            EmptyStatementNotInLoop is replaced by {% rule java/codestyle/UnnecessarySemicolon %}.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedPrivateMethod",
              "shortDescription": {
                "text": "Avoid unused private methods such as 'parseXml(Reader)'."
              },
              "fullDescription": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedprivatemethod",
              "help": {
                "text": "\nUnused Private Method detects when a private method is declared but is unused.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'in'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'bomInputStream': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CheckSkipResult",
              "shortDescription": {
                "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
              },
              "fullDescription": {
                "text": "\nThe skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#checkskipresult",
              "help": {
                "text": "\nThe skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'mr'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stream::available`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stream::close`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stream::reset`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenReader::close`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenReader::read`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenReader::ready`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenReader::reset`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBufferedRead_AvailableCharset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBufferedRead_RequiredCharset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testBufferedRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testCharsetMismatchInfiniteLoop_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testIO_356' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S0_UTF16' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S0_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S1_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S2_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D13_S0_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D13_S1_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_B10_D20_S0_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testIO_356_Loop' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_Loop_UTF16' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testIO_356_Loop_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLargeBufferedRead_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLargeBufferedRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLargeSingleByteRead_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLargeSingleByteRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMarkReset_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMarkReset_USASCII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testMarkReset_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadZero_EmptyString' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testReadZero_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSingleByteRead_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSingleByteRead_UTF16' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSingleByteRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkip_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkip_USASCII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSkip_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UselessParentheses",
              "shortDescription": {
                "text": "Useless parentheses."
              },
              "fullDescription": {
                "text": "\n            Parenthesized expressions are used to override the default operator precedence\n            rules. Parentheses whose removal would not change the relative nesting of operators\n            are unnecessary, because they don't change the semantics of the enclosing expression.\n\n            Some parentheses that strictly speaking are unnecessary, may still be considered useful\n            for readability. This rule allows to ignore violations on two kinds of unnecessary parentheses:\n            - \"Clarifying\" parentheses, which separate operators of difference precedence. While\n            unnecessary, they make precedence rules explicit, which may be useful for rarely used\n            operators. For example:\n            ```java\n                (a + b) & c // is equivalent to `a + b & c`, but probably clearer\n            ```\n            Unset the property `ignoreClarifying` to report them.\n\n            - \"Balancing\" parentheses, which are unnecessary but visually balance out another pair\n            of parentheses around an equality operator. For example, those two expressions are equivalent:\n            ```java\n                (a == null) != (b == null)\n                a == null != (b == null)\n            ```\n            The parentheses on the right are required, and the parentheses on the left are\n            just more visually pleasing. Unset the property `ignoreBalancing` to report them.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#uselessparentheses",
              "help": {
                "text": "\n            Parenthesized expressions are used to override the default operator precedence\n            rules. Parentheses whose removal would not change the relative nesting of operators\n            are unnecessary, because they don't change the semantics of the enclosing expression.\n\n            Some parentheses that strictly speaking are unnecessary, may still be considered useful\n            for readability. This rule allows to ignore violations on two kinds of unnecessary parentheses:\n            - \"Clarifying\" parentheses, which separate operators of difference precedence. While\n            unnecessary, they make precedence rules explicit, which may be useful for rarely used\n            operators. For example:\n            ```java\n                (a + b) & c // is equivalent to `a + b & c`, but probably clearer\n            ```\n            Unset the property `ignoreClarifying` to report them.\n\n            - \"Balancing\" parentheses, which are unnecessary but visually balance out another pair\n            of parentheses around an equality operator. For example, those two expressions are equivalent:\n            ```java\n                (a == null) != (b == null)\n                a == null != (b == null)\n            ```\n            The parentheses on the right are required, and the parentheses on the left are\n            just more visually pleasing. Unset the property `ignoreBalancing` to report them.\n\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UselessOverridingMethod",
              "shortDescription": {
                "text": "Overriding method merely calls super"
              },
              "fullDescription": {
                "text": "\nThe overriding method merely calls the same method defined in a superclass.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#uselessoverridingmethod",
              "help": {
                "text": "\nThe overriding method merely calls the same method defined in a superclass.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'oos': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLargeFiles_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'msis': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `input::read`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this TestNullInputStream object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `reader::read`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this TestNullReader object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDataByteCalled_add' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testDataByteCalled_ctor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'ois': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stopwatch::toString`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'in': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'ReversedLinesFileReaderTestParamBlockSize' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'ReversedLinesFileReaderTestParamFile' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'Stack'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this FileSystem object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'ReversedLinesFileReaderTestSimple' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'bais': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'sdis': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'tailer'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "Ensure that resources like this ScheduledThreadPoolExecutor object are closed after use"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'e'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'ois'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'baos': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'lf': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_available' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `bis::available`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_close' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'buf'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "CloseResource",
              "shortDescription": {
                "text": "it is recommended to wrap resource 'bufin' in try-with-resource declaration directly"
              },
              "fullDescription": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#closeresource",
              "help": {
                "text": "\nEnsure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects\nand any subtype of `java.lang.AutoCloseable`) are always closed after use.\nFailing to do so might result in resource leaks.\n\nNote: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers\non any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting\nthe types, if the type resolution / auxclasspath is not correctly setup.\n\nNote: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects\nnow cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour,\njust remove \"AutoCloseable\" from the types.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_ConstructorLjava_io_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `str::read`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_ConstructorLjava_io_InputStreamI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `is::read`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_markI' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_markSupported' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_read' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidDollarSigns",
              "shortDescription": {
                "text": "Avoid using dollar signs in variable/method/class/interface names"
              },
              "fullDescription": {
                "text": "\nAvoid using dollar signs in variable/method/class/interface names.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#avoiddollarsigns",
              "help": {
                "text": "\nAvoid using dollar signs in variable/method/class/interface names.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_read$BII' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_read$BII_Exception' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_reset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_reset_Exception' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `bis::reset`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_reset_scenario1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_reset_scenario2' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_skip_NullInputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_skipJ' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'test_read$B' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `is::reset`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnsynchronizedStaticFormatter",
              "shortDescription": {
                "text": "Static Formatter objects should be accessed in a synchronized manner"
              },
              "fullDescription": {
                "text": "\nInstances of `java.text.Format` are generally not synchronized.\nSun recommends using separate format instances for each thread.\nIf multiple threads must access a static formatter, the formatter must be\nsynchronized on block level.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter",
              "help": {
                "text": "\nInstances of `java.text.Format` are generally not synchronized.\nSun recommends using separate format instances for each thread.\nIf multiple threads must access a static formatter, the formatter must be\nsynchronized on block level.\n        "
              },
              "properties": {
                "ruleset": "Multithreading",
                "priority": 3,
                "tags": [
                  "Multithreading"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'reader'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testLowerCaseEncodingWithTurkishLocale_IO_557' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'is': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testRawNoBomIso8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'cbis': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'contentEquals_release_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileRelease_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringRelease_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FinalFieldCouldBeStatic",
              "shortDescription": {
                "text": "This final field could be made static"
              },
              "fullDescription": {
                "text": "\nIf a final field is assigned to a compile-time constant, it could be made static, thus saving overhead\nin each object at runtime.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#finalfieldcouldbestatic",
              "help": {
                "text": "\nIf a final field is assigned to a compile-time constant, it could be made static, thus saving overhead\nin each object at runtime.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `stream::flush`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenWriter::close`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "EqualsNull",
              "shortDescription": {
                "text": "Avoid using equals() to compare against null"
              },
              "fullDescription": {
                "text": "\nTests for null should not use the equals() method. The '==' operator should be used instead.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_errorprone.html#equalsnull",
              "help": {
                "text": "\nTests for null should not use the equals() method. The '==' operator should be used instead.\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 1,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenWriter::flush`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenWriter::hashCode`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LambdaCanBeMethodReference",
              "shortDescription": {
                "text": "Lambda expression could be written as a method reference: `brokenWriter::toString`"
              },
              "fullDescription": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference",
              "help": {
                "text": "\n            This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance:\n            ```java\n                x -> Foo.call(x) // can be Foo::call\n                x -> call(x)     // can be this::call, if call is an instance method\n                (x, y, z) -> call(x, y, z) // can be this::call\n                () -> foo.get() // can be foo::get\n                x -> x.foo()    // can be XType::foo (where XType is the type of x)\n            ```\n\n            In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`.\n\n            The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`.\n\n            Scope limitations:\n            - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation.\n            - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'ref': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'baos2': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'chunked': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'negative_chunkSize_not_permitted' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'write_four_chunks' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'write_two_chunks_default_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'fis': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructor_File_directory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'writer'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructor_File_encoding_badEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructor_File_existingFile_withContent' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructor_File_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructor_fileName_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'constructorAppend_File_existingFile_withContent' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_Charset_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_CharsetEncoder_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_null_Charset_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_null_CharsetEncoder_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_null_CharsetName_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_string_Charset_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_string_CharsetEncoder_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_string_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'sameEncoding_string_string_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "SingularField",
              "shortDescription": {
                "text": "Perhaps 'lockDir' could be replaced by a local variable."
              },
              "fullDescription": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_design.html#singularfield",
              "help": {
                "text": "\nReports fields which may be converted to a local variable. This is so because\nin every method where the field is used, it is assigned before it is first read.\nHence, the value that the field had before the method call may not be observed,\nso it might as well not be stored in the enclosing object.\n\nLimitations:\n* We can only check private fields for now.\n* The rule is not aware of threading, so it may cause false positives in concurrent code.\nSuch FPs are best handled by suppression (see also the `ignoredAnnotations` property).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'lfw2'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_File_directory' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_File_encoding_badEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_File_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testConstructor_fileName_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'lfw1'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'lfw3'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'appendCharSequence_with_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_append_char' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryModifier",
              "shortDescription": {
                "text": "Unnecessary modifier 'final' on resource specification 'osw': resource specifications are implicitly final"
              },
              "fullDescription": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessarymodifier",
              "help": {
                "text": "\nFields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`.\nClasses, interfaces or annotations nested in an interface or annotation are automatically `public static`\n(all nested interfaces and annotations are automatically static).\nNested enums are automatically `static`.\nFor historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_append_charSequence' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_append_charSequence_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_close' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'proxy'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_flush' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_write_char_array' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_write_int' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_write_offset_char_array' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_write_string' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'exceptions_in_write_string_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'inputStream'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'StandardCharsets': 'UTF_8' is already in scope because it is imported in this file"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSetByteCount_Stream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testSetByteCount_OutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The JUnit 5 test method name 'testEUC_JPEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "Unnecessary qualifier 'java.io': 'PrintWriter' is already in scope because it is imported in this file"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.apache.commons.io.jmh.IOUtilsContentEqualsInputStreamsBenchmark'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.List'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.Collection'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.ArrayList'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.results.Result'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.lang.reflect.Field'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileCurrent_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ControlStatementBraces",
              "shortDescription": {
                "text": "This statement should have braces"
              },
              "fullDescription": {
                "text": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#controlstatementbraces",
              "help": {
                "text": "\n            Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else'\n            statements and loop statements, even if they are optional. This usually makes the code clearer, and\n            helps prepare the future when you need to add another statement. That said, this rule lets you control\n            which statements are required to have braces via properties.\n\n            From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,\n            and IfElseStmtMustUseBraces.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileCurrent_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileCurrent_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileCurrent_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileCurrent_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileCurrent_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileCurrent_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileCurrent_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFilePr118_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFilePr118_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFilePr118_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFilePr118_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFilePr118_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFilePr118_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFilePr118_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFilePr118_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileRelease_2_8_0_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileRelease_2_8_0_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileRelease_2_8_0_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileRelease_2_8_0_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileRelease_2_8_0_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileRelease_2_8_0_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testFileRelease_2_8_0_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testFileRelease_2_8_0_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringCurrent_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringCurrent_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringCurrent_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringCurrent_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringCurrent_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringCurrent_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringCurrent_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringCurrent_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringPr118_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringPr118_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringPr118_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringPr118_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringPr118_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringPr118_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringPr118_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringPr118_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringRelease_2_8_0_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringRelease_2_8_0_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringRelease_2_8_0_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringRelease_2_8_0_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringRelease_2_8_0_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringRelease_2_8_0_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'testStringRelease_2_8_0_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The static method name 'testStringRelease_2_8_0_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.apache.commons.io.jmh.IOUtilsContentEqualsReadersBenchmark'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableNamingConventions",
              "shortDescription": {
                "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#localvariablenamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for local variable declarations and other locally-scoped\n            variables. This rule reports variable declarations which do not match the regex that applies to their\n            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.8.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/Charsets.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1,
          "message": {
            "text": "The final method parameter name 'Default' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CloseableURLConnection.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 66,
                  "endLine": 146,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1,
          "message": {
            "text": "The final method parameter name 'Default' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CloseableURLConnection.java"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 63,
                  "endLine": 151,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 1,
          "message": {
            "text": "The final method parameter name 'Default' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CloseableURLConnection.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 66,
                  "endLine": 161,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CopyUtils.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 8,
                  "endLine": 114,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CopyUtils.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 28,
                  "endLine": 303,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CopyUtils.java"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 28,
                  "endLine": 330,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CopyUtils.java"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 12,
                  "endLine": 353,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/CopyUtils.java"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 12,
                  "endLine": 353,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/EndianUtils.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 8,
                  "endLine": 42,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/EndianUtils.java"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 12,
                  "endLine": 435,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/EndianUtils.java"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 12,
                  "endLine": 435,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileCleaner.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 8,
                  "endLine": 38,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 5,
          "message": {
            "text": "Unnecessary qualifier 'Thread': 'MAX_PRIORITY' is already in scope because it is inherited by an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileCleaningTracker.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 25,
                  "endLine": 57,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileCleaningTracker.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 22,
                  "endLine": 152,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileExistsException.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 12,
                  "endLine": 37,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileSystem.java"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 9,
                  "endLine": 284,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileSystem.java"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 9,
                  "endLine": 457,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileSystemUtils.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 12,
                  "endLine": 246,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileSystemUtils.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 12,
                  "endLine": 246,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 8,
          "message": {
            "text": "Avoid unused local variables such as 'out'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileSystemUtils.java"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 30,
                  "endLine": 481,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 9,
          "message": {
            "text": "Avoid unused local variables such as 'err'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileSystemUtils.java"
                },
                "region": {
                  "startLine": 483,
                  "startColumn": 29,
                  "endLine": 483,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileUtils.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 8,
                  "endLine": 114,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 10,
          "message": {
            "text": "Unnecessary qualifier 'FileUtils': 'deleteQuietly' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileUtils.java"
                },
                "region": {
                  "startLine": 2401,
                  "startColumn": 17,
                  "endLine": 2401,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FileUtils.java"
                },
                "region": {
                  "startLine": 3553,
                  "startColumn": 12,
                  "endLine": 3553,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FilenameUtils.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 11,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FilenameUtils.java"
                },
                "region": {
                  "startLine": 1498,
                  "startColumn": 15,
                  "endLine": 1498,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FilenameUtils.java"
                },
                "region": {
                  "startLine": 1600,
                  "startColumn": 21,
                  "endLine": 1600,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FilenameUtils.java"
                },
                "region": {
                  "startLine": 1608,
                  "startColumn": 28,
                  "endLine": 1608,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FilenameUtils.java"
                },
                "region": {
                  "startLine": 1681,
                  "startColumn": 12,
                  "endLine": 1681,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/FilenameUtils.java"
                },
                "region": {
                  "startLine": 1681,
                  "startColumn": 12,
                  "endLine": 1681,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 8,
                  "endLine": 37,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 13,
          "message": {
            "text": "The local variable name 'display_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 14,
                  "endLine": 118,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 14,
          "message": {
            "text": "The local variable name 'chars_read' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 17,
                  "endLine": 129,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 15,
          "message": {
            "text": "The final method parameter name '_cbuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 59,
                  "endLine": 206,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 16,
          "message": {
            "text": "The final method parameter name '_lbuffer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 59,
                  "endLine": 220,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 12,
                  "endLine": 231,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/HexDump.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 12,
                  "endLine": 231,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IO.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 17,
          "message": {
            "text": "Unnecessary qualifier 'IOCase': 'values' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOCase.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 26,
                  "endLine": 79,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 8,
                  "endLine": 124,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 902,
                  "startColumn": 13,
                  "endLine": 902,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 973,
                  "startColumn": 13,
                  "endLine": 973,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 1019,
                  "startColumn": 13,
                  "endLine": 1019,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 1030,
                  "startColumn": 13,
                  "endLine": 1030,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 1056,
                  "startColumn": 13,
                  "endLine": 1056,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 19,
          "message": {
            "text": "Unnecessary qualifier 'IOUtils': 'byteArray' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 1107,
                  "startColumn": 53,
                  "endLine": 1107,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/IOUtils.java"
                },
                "region": {
                  "startLine": 3934,
                  "startColumn": 12,
                  "endLine": 3934,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/RandomAccessFiles.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/ThreadMonitor.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 11,
                  "endLine": 107,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/ThreadUtils.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 14,
                  "endLine": 27,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8,
                  "endLine": 28,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 21,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'bigIntegerCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 19,
                  "endLine": 176,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 21,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'bigIntegerCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 49,
                  "endLine": 176,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 21,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'bigIntegerCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 79,
                  "endLine": 176,
                  "endColumn": 87
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 22,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'longCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 19,
                  "endLine": 298,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 22,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'longCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 43,
                  "endLine": 298,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 22,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'longCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 67,
                  "endLine": 298,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 23,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'noopCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 19,
                  "endLine": 359,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 23,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'noopCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 43,
                  "endLine": 359,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 23,
          "message": {
            "text": "Unnecessary qualifier 'Counters': 'noopCounter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/Counters.java"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 67,
                  "endLine": 359,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/NoopPathVisitor.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 12,
                  "endLine": 41,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/PathUtils.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 20,
                  "endLine": 93,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 25,
          "message": {
            "text": "Unnecessary qualifier 'PathUtils': 'noFollowLinkOptionArray' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/PathUtils.java"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 42,
                  "endLine": 500,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/PathUtils.java"
                },
                "region": {
                  "startLine": 1045,
                  "startColumn": 9,
                  "endLine": 1047,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/PathUtils.java"
                },
                "region": {
                  "startLine": 1106,
                  "startColumn": 9,
                  "endLine": 1108,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/PathUtils.java"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 9,
                  "endLine": 1241,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/StandardDeleteOption.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 47,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 26,
          "message": {
            "text": "Unnecessary qualifier 'StandardDeleteOption': 'OVERRIDE_READ_ONLY' is already in scope because it is declared in an enclosing type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/StandardDeleteOption.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 49,
                  "endLine": 48,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/file/spi/FileSystemProviders.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 13,
                  "endLine": 78,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 11,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/AndFileFilter.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 33,
                  "endLine": 67,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 15,
                  "endLine": 84,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 15,
                  "endLine": 96,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/FalseFileFilter.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 15,
                  "endLine": 57,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 15,
                  "endLine": 89,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 8,
                  "endLine": 44,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 12,
                  "endLine": 741,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 12,
                  "endLine": 741,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 15,
                  "endLine": 92,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 11,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/OrFileFilter.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 32,
                  "endLine": 63,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilter.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 15,
                  "endLine": 93,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/TrueFileFilter.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 15,
                  "endLine": 57,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 9,
                  "endLine": 136,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/function/IOFunction.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 7,
                  "endLine": 121,
                  "endColumn": 12
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 28,
          "message": {
            "text": "Lambda expression could be written as a method reference: `target::equals`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/function/IOPredicate.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 51,
                  "endLine": 64,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 29,
          "message": {
            "text": "Lambda expression could be written as a method reference: `closeHandler::run`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/function/UncheckedIOBaseStream.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 49,
                  "endLine": 62,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ByteBufferCleaner.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ByteBufferCleaner.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 20,
                  "endLine": 41,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ByteBufferCleaner.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 20,
                  "endLine": 60,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidAccessibilityAlteration",
          "ruleIndex": 30,
          "message": {
            "text": "You should not modify visibility of constructors, methods or fields using setAccessible()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ByteBufferCleaner.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 13,
                  "endLine": 68,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 31,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'e1' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ByteBufferCleaner.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 23,
                  "endLine": 102,
                  "endColumn": 86
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/DemuxInputStream.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 27,
                  "endLine": 65,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidMessageDigestField",
          "ruleIndex": 33,
          "message": {
            "text": "You shouldnt declare field of MessageDigest type, because unsynchronized access could cause problems"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "endLine": 62,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidMessageDigestField",
          "ruleIndex": 33,
          "message": {
            "text": "You shouldnt declare field of MessageDigest type, because unsynchronized access could cause problems"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 23,
                  "endLine": 120,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidMessageDigestField",
          "ruleIndex": 33,
          "message": {
            "text": "You shouldnt declare field of MessageDigest type, because unsynchronized access could cause problems"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/MessageDigestCalculatingInputStream.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 19,
                  "endLine": 171,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReadAheadInputStream.java"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 17,
                  "endLine": 398,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReadAheadInputStream.java"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 38,
                  "endLine": 411,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReadAheadInputStream.java"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 21,
                  "endLine": 413,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 13,
                  "endLine": 95,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 21,
                  "endLine": 192,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 20,
                  "endLine": 381,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 383,
                  "startColumn": 17,
                  "endLine": 383,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 17,
                  "endLine": 384,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 17,
                  "endLine": 385,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 17,
                  "endLine": 386,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 11,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/ReversedLinesFileReader.java"
                },
                "region": {
                  "startLine": 505,
                  "startColumn": 15,
                  "endLine": 505,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/Tailer.java"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 13,
                  "endLine": 367,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/Tailer.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 14,
                  "endLine": 379,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/Tailer.java"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 36,
                  "endLine": 396,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/Tailer.java"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 17,
                  "endLine": 405,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/Tailer.java"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 30,
                  "endLine": 687,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/TimestampedObserver.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 30,
                  "endLine": 45,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsupportedOperationExceptions.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidProtectedFieldInFinalClass",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid protected fields in a final class.  Change to private or package access."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 31,
                  "endLine": 105,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 31,
                  "endLine": 105,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidProtectedFieldInFinalClass",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid protected fields in a final class.  Change to private or package access."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 19,
                  "endLine": 110,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidProtectedFieldInFinalClass",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid protected fields in a final class.  Change to private or package access."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "endLine": 115,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidProtectedFieldInFinalClass",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid protected fields in a final class.  Change to private or package access."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidProtectedFieldInFinalClass",
          "ruleIndex": 38,
          "message": {
            "text": "Avoid protected fields in a final class.  Change to private or package access."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 19,
                  "endLine": 125,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 27,
                  "endLine": 152,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 27,
                  "endLine": 167,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 27,
                  "endLine": 249,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 13,
                  "endLine": 259,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 27,
                  "endLine": 301,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 21,
                  "endLine": 336,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStream.java"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 27,
                  "endLine": 388,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/UnsynchronizedFilterInputStream.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 36,
                  "endLine": 101,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 39,
          "message": {
            "text": "Ensure that resources like this BufferedReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 38,
                  "endLine": 310,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 33,
                  "endLine": 330,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 67,
                  "endLine": 330,
                  "endColumn": 101
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 105,
                  "endLine": 330,
                  "endColumn": 158
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 33,
                  "endLine": 341,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 60,
                  "endLine": 341,
                  "endColumn": 106
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 27,
                  "endLine": 636,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 13,
                  "endLine": 699,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 699,
                  "startColumn": 39,
                  "endLine": 699,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 13,
                  "endLine": 708,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 13,
                  "endLine": 717,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 717,
                  "startColumn": 39,
                  "endLine": 717,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 13,
                  "endLine": 726,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 17,
                  "endLine": 753,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 43,
                  "endLine": 753,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 75,
                  "endLine": 753,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 13,
                  "endLine": 760,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 761,
                  "startColumn": 41,
                  "endLine": 761,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 765,
                  "startColumn": 36,
                  "endLine": 765,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 13,
                  "endLine": 773,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 773,
                  "startColumn": 40,
                  "endLine": 773,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 778,
                  "startColumn": 36,
                  "endLine": 778,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 13,
                  "endLine": 786,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 786,
                  "startColumn": 40,
                  "endLine": 786,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 36,
                  "endLine": 791,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 17,
                  "endLine": 198,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 13,
                  "endLine": 219,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/input/buffer/CircularByteBuffer.java"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 17,
                  "endLine": 260,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 10,
                  "endLine": 36,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 10,
                  "endLine": 57,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 10,
                  "endLine": 64,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 10,
                  "endLine": 71,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 10,
                  "endLine": 78,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationListener.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 10,
                  "endLine": 85,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/monitor/FileAlterationMonitor.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 30,
                  "endLine": 45,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 11,
                  "endLine": 79,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 26,
                  "endLine": 298,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 25,
                  "endLine": 311,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 26,
                  "endLine": 314,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/AbstractByteArrayOutputStream.java"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 26,
                  "endLine": 388,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/DeferredFileOutputStream.java"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 28,
                  "endLine": 418,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/DemuxOutputStream.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 28,
                  "endLine": 64,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/DemuxOutputStream.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 28,
                  "endLine": 81,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 41,
          "message": {
            "text": "Unnecessary qualifier 'FileWriterWithEncoding': 'initWriter' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/FileWriterWithEncoding.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 47,
                  "endLine": 107,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/NullOutputStream.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 12,
                  "endLine": 53,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/NullOutputStream.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 12,
                  "endLine": 53,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/NullWriter.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 12,
                  "endLine": 50,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/NullWriter.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 12,
                  "endLine": 50,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidStringBufferField",
          "ruleIndex": 42,
          "message": {
            "text": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/StringBuilderWriter.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 19,
                  "endLine": 40,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 43,
          "message": {
            "text": "The final local variable name 'TEST_STRING_2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/WriterOutputStream.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 22,
                  "endLine": 190,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 44,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/WriterOutputStream.java"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 23,
                  "endLine": 204,
                  "endColumn": 119
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/main/java/org/apache/commons/io/output/XmlStreamWriter.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 17,
                  "endLine": 216,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/AbstractFileUtilsDeleteDirectoryTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 32,
                  "endLine": 37,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 45,
          "message": {
            "text": "The JUnit 5 test method name 'testIso8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CharsetsTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 46,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharset_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CharsetsTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 47,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharset_String_Charset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CharsetsTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 48,
          "message": {
            "text": "The JUnit 5 test method name 'copy_byteArrayToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "endLine": 58,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 28,
                  "endLine": 60,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 49,
          "message": {
            "text": "The JUnit 5 test method name 'copy_byteArrayToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 17,
                  "endLine": 69,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 28,
                  "endLine": 71,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 22,
                  "endLine": 72,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 51,
          "message": {
            "text": "The JUnit 5 test method name 'copy_inputStreamToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 17,
                  "endLine": 83,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 28,
                  "endLine": 88,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 22,
                  "endLine": 89,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 52,
          "message": {
            "text": "The JUnit 5 test method name 'copy_inputStreamToWriterWithEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 53,
          "message": {
            "text": "The JUnit 5 test method name 'copy_readerToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 22,
                  "endLine": 113,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 28,
                  "endLine": 116,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 22,
                  "endLine": 117,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 55,
          "message": {
            "text": "The JUnit 5 test method name 'copy_stringToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "endLine": 127,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 28,
                  "endLine": 131,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 56,
          "message": {
            "text": "The JUnit 5 test method name 'copy_stringToOutputStreamString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 28,
                  "endLine": 150,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 57,
          "message": {
            "text": "The JUnit 5 test method name 'copy_stringToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "endLine": 165,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 28,
                  "endLine": 169,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 22,
                  "endLine": 170,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 58,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_byteArrayToWriterWithEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 17,
                  "endLine": 180,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 59,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 17,
                  "endLine": 190,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 28,
                  "endLine": 195,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 60,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 17,
                  "endLine": 207,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 22,
                  "endLine": 210,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 28,
                  "endLine": 213,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 61,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStreamString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 17,
                  "endLine": 229,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 22,
                  "endLine": 232,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/CopyUtilsTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 28,
                  "endLine": 235,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidStringBufferField",
          "ruleIndex": 42,
          "message": {
            "text": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 23,
                  "endLine": 43,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 62,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "endLine": 115,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 62,
          "message": {
            "text": "Avoid using implementation types like 'HashMap'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 19,
                  "endLine": 117,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 27,
                  "endLine": 143,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 14,
                  "endLine": 157,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 14,
                  "endLine": 175,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DemuxInputStreamTest.java"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 14,
                  "endLine": 193,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 65,
          "message": {
            "text": "The class name 'DirectoryWalkerTestCaseJava4' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/DirectoryWalkerTestCaseJava4.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 8,
                  "endLine": 44,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 66,
          "message": {
            "text": "The JUnit 5 test method name 'testFileCleanerDirectory_ForceStrategy_FileSource' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "endLine": 115,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 67,
          "message": {
            "text": "The JUnit 5 test method name 'testFileCleanerDirectory_ForceStrategy_PathSource' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 68,
          "message": {
            "text": "The JUnit 5 test method name 'testFileCleanerDirectory_NullStrategy' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 17,
                  "endLine": 171,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 69,
          "message": {
            "text": "The JUnit 5 test method name 'testFileCleanerExitWhenFinished_NoTrackAfter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 70,
          "message": {
            "text": "Ensure that resources like this RandomAccessFile object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 26,
                  "endLine": 252,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 70,
          "message": {
            "text": "Ensure that resources like this RandomAccessFile object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 26,
                  "endLine": 284,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 70,
          "message": {
            "text": "Ensure that resources like this RandomAccessFile object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 26,
                  "endLine": 333,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotCallGarbageCollectionExplicitly",
          "ruleIndex": 71,
          "message": {
            "text": "Do not explicitly trigger a garbage collection."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 9,
                  "endLine": 359,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 38,
                  "endLine": 371,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotCallGarbageCollectionExplicitly",
          "ruleIndex": 71,
          "message": {
            "text": "Do not explicitly trigger a garbage collection."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileCleaningTrackerTest.java"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 13,
                  "endLine": 374,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 72,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 39,
                  "endLine": 64,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 73,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpace_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 17,
                  "endLine": 97,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 74,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_InitError' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 75,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_NullPath' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 17,
                  "endLine": 153,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 76,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_Other' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 17,
                  "endLine": 160,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 77,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_Unix' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 17,
                  "endLine": 168,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 78,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceOS_String_Windows' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 17,
                  "endLine": 180,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 79,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_EmptyPath' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "endLine": 192,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 80,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_EmptyResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 17,
                  "endLine": 205,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 81,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 17,
                  "endLine": 215,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 82,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 17,
                  "endLine": 227,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 83,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse3' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 17,
                  "endLine": 239,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 84,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_InvalidResponse4' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 17,
                  "endLine": 251,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 85,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_LongResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 17,
                  "endLine": 263,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 86,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_LongResponseKb' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 17,
                  "endLine": 273,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 87,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseFreeBSD' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 17,
                  "endLine": 283,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 88,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 17,
                  "endLine": 293,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 89,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseKbLinux' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 17,
                  "endLine": 304,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 90,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseKbSolaris' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 17,
                  "endLine": 315,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 91,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceUnix_String_NormalResponseLinux' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 326,
                  "startColumn": 17,
                  "endLine": 326,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 92,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_EmptyMultiLineResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 17,
                  "endLine": 336,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 93,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_EmptyPath' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 17,
                  "endLine": 343,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 94,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_EmptyResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 17,
                  "endLine": 361,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 95,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_InvalidTextResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 17,
                  "endLine": 368,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 96,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_NormalResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "endLine": 375,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 97,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_NoSuchDirectoryResponse' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 17,
                  "endLine": 392,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 98,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_ParseCommaFormatBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 17,
                  "endLine": 404,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 99,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Big' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 17,
                  "endLine": 424,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 100,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_ParseCommaFormatBytes_Small' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 17,
                  "endLine": 443,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 101,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_quoted' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 17,
                  "endLine": 462,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 102,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFreeSpaceWindows_String_StripDrive' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileSystemUtilsTest.java"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 17,
                  "endLine": 480,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsDeleteDirectoryWindowsTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 27,
                  "endLine": 52,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 103,
          "message": {
            "text": "The final local variable name 'TWO_SECOND' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsFileNewerTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 20,
                  "endLine": 84,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryConstructor",
          "ruleIndex": 3,
          "message": {
            "text": "Avoid unnecessary constructors - the compiler will generate these for you"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 9,
                  "endLine": 103,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyConstructor",
          "ruleIndex": 4,
          "message": {
            "text": "Document empty constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 9,
                  "endLine": 103,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 11,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 104,
          "message": {
            "text": "The instance method name 'openOutputStream_noParent' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 10,
                  "endLine": 303,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 105,
          "message": {
            "text": "The JUnit 5 test method name 'test_openInputStream_exists' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "endLine": 375,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 106,
          "message": {
            "text": "The JUnit 5 test method name 'test_openInputStream_existsButIsDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 17,
                  "endLine": 384,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 107,
          "message": {
            "text": "The JUnit 5 test method name 'test_openInputStream_notExists' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 17,
                  "endLine": 391,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 108,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_exists' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 17,
                  "endLine": 397,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 109,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_existsButIsDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 17,
                  "endLine": 407,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 110,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_intoExistingSymlinkedDir' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 421,
                  "startColumn": 17,
                  "endLine": 421,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 111,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_noParentCreateFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 17,
                  "endLine": 432,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 112,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_noParentNoFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 17,
                  "endLine": 437,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 113,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_notExists' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 17,
                  "endLine": 442,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 114,
          "message": {
            "text": "The JUnit 5 test method name 'test_openOutputStream_notExistsCannotCreate' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 451,
                  "startColumn": 17,
                  "endLine": 451,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 115,
          "message": {
            "text": "The final local variable name 'KB1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 26,
                  "endLine": 469,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 116,
          "message": {
            "text": "The final local variable name 'MB1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 470,
                  "startColumn": 26,
                  "endLine": 470,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 117,
          "message": {
            "text": "The final local variable name 'GB1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 26,
                  "endLine": 471,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 118,
          "message": {
            "text": "The final local variable name 'GB2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 26,
                  "endLine": 472,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 119,
          "message": {
            "text": "The final local variable name 'TB1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 26,
                  "endLine": 473,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 120,
          "message": {
            "text": "The final local variable name 'PB1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 26,
                  "endLine": 474,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 121,
          "message": {
            "text": "The final local variable name 'EB1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 26,
                  "endLine": 475,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 122,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyDirectoryToDirectory_NonExistingDest' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 914,
                  "startColumn": 17,
                  "endLine": 914,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 123,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output1': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 919,
                  "startColumn": 14,
                  "endLine": 919,
                  "endColumn": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 926,
                  "startColumn": 14,
                  "endLine": 926,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 123,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output1': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 14,
                  "endLine": 955,
                  "endColumn": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 962,
                  "startColumn": 14,
                  "endLine": 962,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 123,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output1': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1013,
                  "startColumn": 14,
                  "endLine": 1013,
                  "endColumn": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 14,
                  "endLine": 1020,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 124,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Date' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1158,
                  "startColumn": 46,
                  "endLine": 1158,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 14,
                  "endLine": 1163,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 124,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Date' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1166,
                  "startColumn": 46,
                  "endLine": 1166,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 124,
          "message": {
            "text": "Unnecessary qualifier 'java.util': 'Date' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1168,
                  "startColumn": 46,
                  "endLine": 1168,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1409,
                  "startColumn": 14,
                  "endLine": 1409,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 14,
                  "endLine": 1427,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 125,
          "message": {
            "text": "The final local variable name 'expected_A' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1579,
                  "startColumn": 20,
                  "endLine": 1579,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 126,
          "message": {
            "text": "The final local variable name 'expected_B' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1580,
                  "startColumn": 20,
                  "endLine": 1580,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 127,
          "message": {
            "text": "The final local variable name 'expected_C' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1581,
                  "startColumn": 20,
                  "endLine": 1581,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 128,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFile_Parent' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1590,
                  "startColumn": 17,
                  "endLine": 1590,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 125,
          "message": {
            "text": "The final local variable name 'expected_A' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1592,
                  "startColumn": 20,
                  "endLine": 1592,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 126,
          "message": {
            "text": "The final local variable name 'expected_B' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1593,
                  "startColumn": 20,
                  "endLine": 1593,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 127,
          "message": {
            "text": "The final local variable name 'expected_C' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1594,
                  "startColumn": 20,
                  "endLine": 1594,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1712,
                  "startColumn": 14,
                  "endLine": 1712,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1717,
                  "startColumn": 14,
                  "endLine": 1717,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1733,
                  "startColumn": 14,
                  "endLine": 1733,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 129,
          "message": {
            "text": "Avoid unused local variables such as 'filesCount'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1933,
                  "startColumn": 23,
                  "endLine": 1933,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 1980,
                  "startColumn": 22,
                  "endLine": 1980,
                  "endColumn": 123
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2039,
                  "startColumn": 18,
                  "endLine": 2039,
                  "endColumn": 120
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 130,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveDirectory_CopyDelete' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2063,
                  "startColumn": 17,
                  "endLine": 2063,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2082,
                  "startColumn": 14,
                  "endLine": 2082,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 131,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2101,
                  "startColumn": 17,
                  "endLine": 2101,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2110,
                  "startColumn": 14,
                  "endLine": 2110,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 132,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveDirectory_Rename' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2124,
                  "startColumn": 17,
                  "endLine": 2124,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2134,
                  "startColumn": 14,
                  "endLine": 2134,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2163,
                  "startColumn": 14,
                  "endLine": 2163,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 133,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveDirectoryToDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2185,
                  "startColumn": 17,
                  "endLine": 2185,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 123,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output1': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2193,
                  "startColumn": 14,
                  "endLine": 2193,
                  "endColumn": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2199,
                  "startColumn": 14,
                  "endLine": 2199,
                  "endColumn": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 134,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2209,
                  "startColumn": 17,
                  "endLine": 2209,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 135,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete_Failed' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2227,
                  "startColumn": 17,
                  "endLine": 2227,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 136,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete_WithFileDatePreservation' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2253,
                  "startColumn": 17,
                  "endLine": 2253,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 137,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFile_CopyDelete_WithoutFileDatePreservation' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2280,
                  "startColumn": 17,
                  "endLine": 2280,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 138,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFile_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2316,
                  "startColumn": 17,
                  "endLine": 2316,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2326,
                  "startColumn": 36,
                  "endLine": 2326,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2333,
                  "startColumn": 36,
                  "endLine": 2333,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 140,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFile_Rename' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2344,
                  "startColumn": 17,
                  "endLine": 2344,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 141,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveFileToDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2365,
                  "startColumn": 17,
                  "endLine": 2365,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 123,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output1': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2373,
                  "startColumn": 14,
                  "endLine": 2373,
                  "endColumn": 118
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2379,
                  "startColumn": 36,
                  "endLine": 2379,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2401,
                  "startColumn": 36,
                  "endLine": 2401,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 142,
          "message": {
            "text": "The JUnit 5 test method name 'testMoveToDirectory_Errors' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2426,
                  "startColumn": 17,
                  "endLine": 2426,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2597,
                  "startColumn": 28,
                  "endLine": 2597,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 143,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2774,
                  "startColumn": 17,
                  "endLine": 2774,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 144,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2786,
                  "startColumn": 17,
                  "endLine": 2786,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 145,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2807,
                  "startColumn": 17,
                  "endLine": 2807,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 146,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2819,
                  "startColumn": 17,
                  "endLine": 2819,
                  "endColumn": 95
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 147,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithOffsetAndLength' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2832,
                  "startColumn": 17,
                  "endLine": 2832,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 148,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2842,
                  "startColumn": 17,
                  "endLine": 2842,
                  "endColumn": 112
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 149,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2855,
                  "startColumn": 17,
                  "endLine": 2855,
                  "endColumn": 115
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 150,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_3arg_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2885,
                  "startColumn": 17,
                  "endLine": 2885,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 151,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2901,
                  "startColumn": 17,
                  "endLine": 2901,
                  "endColumn": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 152,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2916,
                  "startColumn": 17,
                  "endLine": 2916,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 153,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_4arg' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2932,
                  "startColumn": 17,
                  "endLine": 2932,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 154,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_4arg_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2946,
                  "startColumn": 17,
                  "endLine": 2946,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 155,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_4arg_Writer_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2962,
                  "startColumn": 17,
                  "endLine": 2962,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 156,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2970,
                  "startColumn": 17,
                  "endLine": 2970,
                  "endColumn": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 157,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 2985,
                  "startColumn": 17,
                  "endLine": 2985,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 158,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3001,
                  "startColumn": 17,
                  "endLine": 3001,
                  "endColumn": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 159,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3016,
                  "startColumn": 17,
                  "endLine": 3016,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 160,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3032,
                  "startColumn": 17,
                  "endLine": 3032,
                  "endColumn": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 161,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3047,
                  "startColumn": 17,
                  "endLine": 3047,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 162,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3063,
                  "startColumn": 17,
                  "endLine": 3063,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 163,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3075,
                  "startColumn": 17,
                  "endLine": 3075,
                  "endColumn": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 164,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3122,
                  "startColumn": 17,
                  "endLine": 3122,
                  "endColumn": 102
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 165,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3134,
                  "startColumn": 17,
                  "endLine": 3134,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 166,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3163,
                  "startColumn": 17,
                  "endLine": 3163,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 167,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FileUtilsTest.java"
                },
                "region": {
                  "startLine": 3175,
                  "startColumn": 17,
                  "endLine": 3175,
                  "endColumn": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 168,
          "message": {
            "text": "Perhaps 'testFile1' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 18,
                  "endLine": 52,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 169,
          "message": {
            "text": "Perhaps 'testFile2' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 18,
                  "endLine": 53,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 170,
          "message": {
            "text": "Perhaps 'testFile1Size' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "endLine": 55,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 171,
          "message": {
            "text": "Perhaps 'testFile2Size' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "endLine": 56,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 172,
          "message": {
            "text": "The JUnit 5 test method name 'testEquals_fullControl' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "endLine": 166,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 173,
          "message": {
            "text": "The JUnit 5 test method name 'testEqualsNormalizedError_IO_128' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 17,
                  "endLine": 189,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 174,
          "message": {
            "text": "The JUnit 5 test method name 'testGetBaseName_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 17,
                  "endLine": 230,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 175,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFullPathNoEndSeparator_IO_248' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 17,
                  "endLine": 348,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 176,
          "message": {
            "text": "The JUnit 5 test method name 'testGetPath_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 17,
                  "endLine": 412,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 177,
          "message": {
            "text": "The JUnit 5 test method name 'testGetPathNoEndSeparator_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 17,
                  "endLine": 454,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 178,
          "message": {
            "text": "The JUnit 5 test method name 'testGetPrefix_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 17,
                  "endLine": 504,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 179,
          "message": {
            "text": "The JUnit 5 test method name 'testIsExtension_injection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 17,
                  "endLine": 640,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 180,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 898,
                  "startColumn": 34,
                  "endLine": 898,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 180,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 34,
                  "endLine": 899,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 180,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 34,
                  "endLine": 900,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 180,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 905,
                  "startColumn": 34,
                  "endLine": 905,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingHardCodedIP",
          "ruleIndex": 180,
          "message": {
            "text": "Do not hard code the IP address ${variableName}"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 909,
                  "startColumn": 34,
                  "endLine": 909,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 181,
          "message": {
            "text": "The JUnit 5 test method name 'testNormalize_with_null_character' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsTest.java"
                },
                "region": {
                  "startLine": 930,
                  "startColumn": 17,
                  "endLine": 930,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 182,
          "message": {
            "text": "The JUnit 5 test method name 'test_IO_246' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/FilenameUtilsWildcardTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 183,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'out': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 14,
                  "endLine": 55,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 184,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkCompare_case' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 185,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkCompare_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 186,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkEndsWith_case' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 17,
                  "endLine": 94,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 187,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkEndsWith_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 188,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkEquals_case' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 189,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkEquals_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 190,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkIndexOf_case' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 17,
                  "endLine": 153,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 191,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkIndexOf_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "endLine": 165,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 192,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkRegionMatches_case' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 17,
                  "endLine": 209,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 193,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkRegionMatches_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 17,
                  "endLine": 221,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 194,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkStartsWith_case' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 17,
                  "endLine": 251,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 195,
          "message": {
            "text": "The JUnit 5 test method name 'test_checkStartsWith_functionality' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 17,
                  "endLine": 263,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 196,
          "message": {
            "text": "The JUnit 5 test method name 'test_forName' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 17,
                  "endLine": 280,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 197,
          "message": {
            "text": "The JUnit 5 test method name 'test_getName' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 17,
                  "endLine": 289,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 198,
          "message": {
            "text": "The JUnit 5 test method name 'test_getScratchByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 17,
                  "endLine": 296,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 199,
          "message": {
            "text": "The JUnit 5 test method name 'test_getScratchByteArrayWriteOnly' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 17,
                  "endLine": 304,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 200,
          "message": {
            "text": "The JUnit 5 test method name 'test_getScratchCharArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 17,
                  "endLine": 312,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 201,
          "message": {
            "text": "The JUnit 5 test method name 'test_getScratchCharArrayWriteOnly' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 17,
                  "endLine": 320,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 202,
          "message": {
            "text": "The JUnit 5 test method name 'test_isCaseSensitive' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 17,
                  "endLine": 328,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 203,
          "message": {
            "text": "The JUnit 5 test method name 'test_isCaseSensitive_static' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 17,
                  "endLine": 335,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 204,
          "message": {
            "text": "The JUnit 5 test method name 'test_serialization' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 17,
                  "endLine": 342,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 205,
          "message": {
            "text": "The JUnit 5 test method name 'test_toString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOCaseTest.java"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 17,
                  "endLine": 349,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 206,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_byteArrayOutputStreamToInputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 27,
                  "endLine": 69,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 207,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_byteArrayOutputStreamToInputStream_nullOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 17,
                  "endLine": 80,
                  "endColumn": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 59,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "endLine": 86,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 28,
                  "endLine": 91,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 208,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 17,
                  "endLine": 105,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 28,
                  "endLine": 107,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 28,
                  "endLine": 108,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 209,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 17,
                  "endLine": 121,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 28,
                  "endLine": 122,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 210,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStream_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "endLine": 127,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 211,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToOutputStreamWithBufferSize' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 17,
                  "endLine": 133,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 212,
          "message": {
            "text": "The instance method name 'testCopy_inputStreamToOutputStreamWithBufferSize' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 18,
                  "endLine": 152,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 28,
                  "endLine": 157,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 213,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 17,
                  "endLine": 169,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 22,
                  "endLine": 175,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 214,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 17,
                  "endLine": 188,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 22,
                  "endLine": 194,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 215,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 22,
                  "endLine": 214,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 216,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 17,
                  "endLine": 226,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 28,
                  "endLine": 228,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 22,
                  "endLine": 229,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 217,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_Encoding_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 17,
                  "endLine": 234,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 218,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 17,
                  "endLine": 241,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 28,
                  "endLine": 243,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 22,
                  "endLine": 244,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 219,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_inputStreamToWriter_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 17,
                  "endLine": 250,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 220,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToAppendable' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 17,
                  "endLine": 257,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 22,
                  "endLine": 260,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 22,
                  "endLine": 264,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 221,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToAppendable_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 17,
                  "endLine": 275,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 22,
                  "endLine": 277,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 223,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToAppendable_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 17,
                  "endLine": 291,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 28,
                  "endLine": 293,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 26,
                  "endLine": 294,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 224,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToAppendable_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 17,
                  "endLine": 300,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 22,
                  "endLine": 303,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 60,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 17,
                  "endLine": 309,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 22,
                  "endLine": 312,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 28,
                  "endLine": 315,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 225,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 17,
                  "endLine": 331,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 22,
                  "endLine": 334,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 28,
                  "endLine": 337,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 226,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 17,
                  "endLine": 350,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 353,
                  "startColumn": 22,
                  "endLine": 353,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 28,
                  "endLine": 356,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 227,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 17,
                  "endLine": 367,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 28,
                  "endLine": 369,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 228,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_Encoding_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 17,
                  "endLine": 375,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 22,
                  "endLine": 378,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 229,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 17,
                  "endLine": 384,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 28,
                  "endLine": 386,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 230,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToOutputStream_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 17,
                  "endLine": 392,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 22,
                  "endLine": 395,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 231,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 17,
                  "endLine": 401,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 22,
                  "endLine": 404,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 22,
                  "endLine": 408,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 232,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToWriter_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 17,
                  "endLine": 422,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 22,
                  "endLine": 424,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 22,
                  "endLine": 425,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 234,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToWriter_nullIn' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 17,
                  "endLine": 438,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 28,
                  "endLine": 440,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 441,
                  "startColumn": 22,
                  "endLine": 441,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 235,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_readerToWriter_nullOut' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 17,
                  "endLine": 447,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 22,
                  "endLine": 450,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 236,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_URLToFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 17,
                  "endLine": 455,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 237,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_URLToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsCopyTest.java"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 17,
                  "endLine": 467,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsMultithreadedSkipTest.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 14,
                  "endLine": 87,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 239,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inflate': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsMultithreadedSkipTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 14,
                  "endLine": 94,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 240,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsMultithreadedSkipTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 31,
                  "endLine": 100,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 241,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFullyOnInflaterInputStream_New_bytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsMultithreadedSkipTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 17,
                  "endLine": 138,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 242,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFullyOnInflaterInputStream_ThreadLocal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsMultithreadedSkipTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 40,
                  "endLine": 150,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "PreserveStackTrace",
          "ruleIndex": 243,
          "message": {
            "text": "Thrown exception does not preserve the stack trace of exception 'ioe' on all code paths"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 19,
                  "endLine": 158,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 27,
                  "endLine": 175,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 244,
          "message": {
            "text": "Ensure that resources like this BufferedInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 35,
                  "endLine": 181,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 27,
                  "endLine": 188,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 244,
          "message": {
            "text": "Ensure that resources like this BufferedInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 35,
                  "endLine": 194,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 28,
                  "endLine": 211,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 72,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 63,
                  "endLine": 214,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 36,
                  "endLine": 216,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 28,
                  "endLine": 223,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 72,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 63,
                  "endLine": 226,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 139,
          "message": {
            "text": "Ensure that resources like this BufferedOutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 36,
                  "endLine": 228,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 22,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 72,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 52,
                  "endLine": 239,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 39,
          "message": {
            "text": "Ensure that resources like this BufferedReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 30,
                  "endLine": 246,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 22,
                  "endLine": 253,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 72,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 52,
                  "endLine": 256,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 39,
          "message": {
            "text": "Ensure that resources like this BufferedReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 30,
                  "endLine": 263,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 22,
                  "endLine": 271,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 245,
          "message": {
            "text": "Ensure that resources like this BufferedWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 30,
                  "endLine": 272,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 22,
                  "endLine": 279,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 245,
          "message": {
            "text": "Ensure that resources like this BufferedWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 30,
                  "endLine": 280,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 246,
          "message": {
            "text": "Ensure that resources like this Closeable object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 25,
                  "endLine": 325,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 246,
          "message": {
            "text": "Ensure that resources like this Closeable object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 25,
                  "endLine": 351,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 247,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_AllCloseableIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 17,
                  "endLine": 361,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 246,
          "message": {
            "text": "Ensure that resources like this Closeable object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 25,
                  "endLine": 362,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 248,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_CloseableIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 17,
                  "endLine": 370,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 249,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_Selector' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 17,
                  "endLine": 381,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 250,
          "message": {
            "text": "Ensure that resources like this Selector object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 18,
                  "endLine": 382,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 11,
                  "endLine": 386,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 251,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_SelectorIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 17,
                  "endLine": 393,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 250,
          "message": {
            "text": "Ensure that resources like this Selector object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 24,
                  "endLine": 394,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 252,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_SelectorNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 17,
                  "endLine": 405,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 250,
          "message": {
            "text": "Ensure that resources like this Selector object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 24,
                  "endLine": 406,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 253,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_SelectorTwice' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 17,
                  "endLine": 412,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 250,
          "message": {
            "text": "Ensure that resources like this Selector object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 413,
                  "startColumn": 18,
                  "endLine": 413,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 11,
                  "endLine": 417,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 254,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_ServerSocket' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 17,
                  "endLine": 424,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 255,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_ServerSocketIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 17,
                  "endLine": 430,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 256,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_Socket' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 17,
                  "endLine": 442,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 257,
          "message": {
            "text": "The JUnit 5 test method name 'testCloseQuietly_SocketIOException' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 17,
                  "endLine": 448,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 27,
                  "endLine": 487,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 28,
                  "endLine": 488,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 22,
                  "endLine": 503,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 22,
                  "endLine": 504,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 258,
          "message": {
            "text": "The JUnit 5 test method name 'testContentEquals_InputStream_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 17,
                  "endLine": 517,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 259,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input1': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 13,
                  "endLine": 565,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 260,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input2': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 13,
                  "endLine": 567,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 35,
                  "endLine": 566,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 262,
          "message": {
            "text": "The JUnit 5 test method name 'testContentEquals_Reader_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 573,
                  "startColumn": 17,
                  "endLine": 573,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 32,
                  "endLine": 578,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 32,
                  "endLine": 582,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 586,
                  "startColumn": 32,
                  "endLine": 586,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 32,
                  "endLine": 590,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 26,
                  "endLine": 609,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 613,
                  "startColumn": 26,
                  "endLine": 613,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 26,
                  "endLine": 617,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 26,
                  "endLine": 621,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 264,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_ByteArray_OutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 651,
                  "startColumn": 17,
                  "endLine": 651,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 265,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_ByteArray_Writer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 17,
                  "endLine": 671,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 266,
          "message": {
            "text": "The JUnit 5 test method name 'testCopy_String_Writer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 17,
                  "endLine": 689,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 267,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_CharExtraLength' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 17,
                  "endLine": 708,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 25,
                  "endLine": 709,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 268,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_CharFullLength' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 735,
                  "startColumn": 17,
                  "endLine": 735,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 25,
                  "endLine": 736,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 269,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_CharNoSkip' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 761,
                  "startColumn": 17,
                  "endLine": 761,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 25,
                  "endLine": 762,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 270,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_CharSkip' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 787,
                  "startColumn": 17,
                  "endLine": 787,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 25,
                  "endLine": 788,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 271,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_CharSkipInvalid' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 813,
                  "startColumn": 17,
                  "endLine": 813,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 272,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_ExtraLength' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 17,
                  "endLine": 820,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 273,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_FullLength' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 840,
                  "startColumn": 17,
                  "endLine": 840,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 274,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_NoSkip' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 857,
                  "startColumn": 17,
                  "endLine": 857,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 275,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_Skip' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 874,
                  "startColumn": 17,
                  "endLine": 874,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 276,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_SkipInvalid' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 17,
                  "endLine": 891,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 277,
          "message": {
            "text": "The JUnit 5 test method name 'testCopyLarge_SkipWithInvalidOffset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 900,
                  "startColumn": 17,
                  "endLine": 900,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 278,
          "message": {
            "text": "The JUnit 5 test method name 'testRead_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 926,
                  "startColumn": 17,
                  "endLine": 926,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 279,
          "message": {
            "text": "Ensure that resources like this FileInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 31,
                  "endLine": 928,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 280,
          "message": {
            "text": "Ensure that resources like this FileChannel object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 929,
                  "startColumn": 27,
                  "endLine": 929,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 281,
          "message": {
            "text": "The JUnit 5 test method name 'testReadFully_InputStream__ReturnByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 943,
                  "startColumn": 17,
                  "endLine": 943,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 282,
          "message": {
            "text": "The JUnit 5 test method name 'testReadFully_InputStream_ByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 17,
                  "endLine": 955,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 283,
          "message": {
            "text": "The JUnit 5 test method name 'testReadFully_InputStream_Offset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 17,
                  "endLine": 969,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 970,
                  "startColumn": 27,
                  "endLine": 970,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 284,
          "message": {
            "text": "The JUnit 5 test method name 'testReadFully_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 978,
                  "startColumn": 17,
                  "endLine": 978,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 279,
          "message": {
            "text": "Ensure that resources like this FileInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 980,
                  "startColumn": 31,
                  "endLine": 980,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 280,
          "message": {
            "text": "Ensure that resources like this FileChannel object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 981,
                  "startColumn": 27,
                  "endLine": 981,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 285,
          "message": {
            "text": "The JUnit 5 test method name 'testReadFully_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 17,
                  "endLine": 1000,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 263,
          "message": {
            "text": "Ensure that resources like this CharArrayReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 22,
                  "endLine": 1003,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 286,
          "message": {
            "text": "The JUnit 5 test method name 'testReadFully_Reader_Offset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1013,
                  "startColumn": 17,
                  "endLine": 1013,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1014,
                  "startColumn": 22,
                  "endLine": 1014,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 287,
          "message": {
            "text": "The JUnit 5 test method name 'testReadLines_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 17,
                  "endLine": 1022,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1024,
                  "startColumn": 21,
                  "endLine": 1024,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 288,
          "message": {
            "text": "The JUnit 5 test method name 'testReadLines_InputStream_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 17,
                  "endLine": 1040,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 21,
                  "endLine": 1042,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 289,
          "message": {
            "text": "The JUnit 5 test method name 'testReadLines_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1058,
                  "startColumn": 17,
                  "endLine": 1058,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1060,
                  "startColumn": 16,
                  "endLine": 1060,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 290,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtRootPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 17,
                  "endLine": 1076,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 291,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtRootPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 17,
                  "endLine": 1084,
                  "endColumn": 86
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 292,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtSubPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1093,
                  "startColumn": 17,
                  "endLine": 1093,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 293,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_ExistingResourceAtSubPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 17,
                  "endLine": 1101,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 294,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_NonExistingResource' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1110,
                  "startColumn": 17,
                  "endLine": 1110,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 295,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_NonExistingResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1115,
                  "startColumn": 17,
                  "endLine": 1115,
                  "endColumn": 76
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 296,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 17,
                  "endLine": 1121,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 297,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToByteArray_Null_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 17,
                  "endLine": 1126,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 298,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtRootPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1132,
                  "startColumn": 17,
                  "endLine": 1132,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 299,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtRootPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1142,
                  "startColumn": 17,
                  "endLine": 1142,
                  "endColumn": 83
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 300,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtSubPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1152,
                  "startColumn": 17,
                  "endLine": 1152,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 301,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_ExistingResourceAtSubPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1164,
                  "startColumn": 17,
                  "endLine": 1164,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 302,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_NonExistingResource' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1174,
                  "startColumn": 17,
                  "endLine": 1174,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 303,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_NonExistingResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1180,
                  "startColumn": 17,
                  "endLine": 1180,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 304,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_NullCharset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1187,
                  "startColumn": 17,
                  "endLine": 1187,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 305,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_NullCharset_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1193,
                  "startColumn": 17,
                  "endLine": 1193,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 306,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_NullResource' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1198,
                  "startColumn": 17,
                  "endLine": 1198,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 307,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToString_NullResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1203,
                  "startColumn": 17,
                  "endLine": 1203,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 308,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtRootPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1209,
                  "startColumn": 17,
                  "endLine": 1209,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 309,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtRootPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1216,
                  "startColumn": 17,
                  "endLine": 1216,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 310,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtSubPackage' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1224,
                  "startColumn": 17,
                  "endLine": 1224,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 311,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_ExistingResourceAtSubPackage_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1231,
                  "startColumn": 17,
                  "endLine": 1231,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 312,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_NonExistingResource' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1240,
                  "startColumn": 17,
                  "endLine": 1240,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 313,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_NonExistingResource_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1245,
                  "startColumn": 17,
                  "endLine": 1245,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 314,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1251,
                  "startColumn": 17,
                  "endLine": 1251,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 315,
          "message": {
            "text": "The JUnit 5 test method name 'testResourceToURL_Null_WithClassLoader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1256,
                  "startColumn": 17,
                  "endLine": 1256,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 316,
          "message": {
            "text": "The JUnit 5 test method name 'testSkip_FileReader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1280,
                  "startColumn": 17,
                  "endLine": 1280,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 317,
          "message": {
            "text": "The JUnit 5 test method name 'testSkip_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1289,
                  "startColumn": 17,
                  "endLine": 1289,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 318,
          "message": {
            "text": "The JUnit 5 test method name 'testSkip_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1298,
                  "startColumn": 17,
                  "endLine": 1298,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 279,
          "message": {
            "text": "Ensure that resources like this FileInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 31,
                  "endLine": 1299,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 280,
          "message": {
            "text": "Ensure that resources like this FileChannel object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1300,
                  "startColumn": 27,
                  "endLine": 1300,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 319,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFully_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1311,
                  "startColumn": 17,
                  "endLine": 1311,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1314,
                  "startColumn": 14,
                  "endLine": 1314,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 320,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFully_InputStream_Buffer_New_bytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1324,
                  "startColumn": 17,
                  "endLine": 1324,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1327,
                  "startColumn": 14,
                  "endLine": 1327,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 321,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFully_InputStream_Buffer_Reuse_bytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1337,
                  "startColumn": 17,
                  "endLine": 1337,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1341,
                  "startColumn": 14,
                  "endLine": 1341,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 322,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFully_InputStream_Buffer_Reuse_ThreadLocal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1351,
                  "startColumn": 17,
                  "endLine": 1351,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1354,
                  "startColumn": 14,
                  "endLine": 1354,
                  "endColumn": 80
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 323,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFully_ReadableByteChannel' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1364,
                  "startColumn": 17,
                  "endLine": 1364,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 279,
          "message": {
            "text": "Ensure that resources like this FileInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1365,
                  "startColumn": 31,
                  "endLine": 1365,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 280,
          "message": {
            "text": "Ensure that resources like this FileChannel object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1366,
                  "startColumn": 27,
                  "endLine": 1366,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 324,
          "message": {
            "text": "The JUnit 5 test method name 'testSkipFully_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1378,
                  "startColumn": 17,
                  "endLine": 1378,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 63,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'input': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 14,
                  "endLine": 1380,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 325,
          "message": {
            "text": "The JUnit 5 test method name 'testToBufferedInputStream_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1413,
                  "startColumn": 17,
                  "endLine": 1413,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 326,
          "message": {
            "text": "it is recommended to wrap resource 'in' in try-with-resource declaration directly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1415,
                  "startColumn": 31,
                  "endLine": 1415,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 327,
          "message": {
            "text": "The JUnit 5 test method name 'testToBufferedInputStreamWithBufferSize_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1425,
                  "startColumn": 17,
                  "endLine": 1425,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 326,
          "message": {
            "text": "it is recommended to wrap resource 'in' in try-with-resource declaration directly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1427,
                  "startColumn": 31,
                  "endLine": 1427,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 328,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1437,
                  "startColumn": 17,
                  "endLine": 1437,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 329,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_LongerThanIntegerMaxValue' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1449,
                  "startColumn": 17,
                  "endLine": 1449,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 330,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_NegativeSize' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1455,
                  "startColumn": 17,
                  "endLine": 1455,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 331,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_Size' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1465,
                  "startColumn": 17,
                  "endLine": 1465,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 332,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeIllegal' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1476,
                  "startColumn": 17,
                  "endLine": 1476,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 333,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeLong' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1485,
                  "startColumn": 17,
                  "endLine": 1485,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 334,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeOne' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1495,
                  "startColumn": 17,
                  "endLine": 1495,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 335,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_InputStream_SizeZero' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1504,
                  "startColumn": 17,
                  "endLine": 1504,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 336,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1513,
                  "startColumn": 17,
                  "endLine": 1513,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 337,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1523,
                  "startColumn": 17,
                  "endLine": 1523,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 338,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_URI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1534,
                  "startColumn": 17,
                  "endLine": 1534,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 339,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_URL' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1541,
                  "startColumn": 17,
                  "endLine": 1541,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 340,
          "message": {
            "text": "The JUnit 5 test method name 'testToByteArray_URLConnection' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1548,
                  "startColumn": 17,
                  "endLine": 1548,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 341,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharArray_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1557,
                  "startColumn": 17,
                  "endLine": 1557,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 342,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharArray_InputStream_CharsetName' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1568,
                  "startColumn": 17,
                  "endLine": 1568,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 343,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharArray_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1579,
                  "startColumn": 17,
                  "endLine": 1579,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 344,
          "message": {
            "text": "The JUnit 5 test method name 'testToInputStream_CharSequence' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1596,
                  "startColumn": 17,
                  "endLine": 1596,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1598,
                  "startColumn": 21,
                  "endLine": 1598,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 345,
          "message": {
            "text": "The JUnit 5 test method name 'testToInputStream_String' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1617,
                  "startColumn": 17,
                  "endLine": 1617,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1619,
                  "startColumn": 21,
                  "endLine": 1619,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 346,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_ByteArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1631,
                  "startColumn": 17,
                  "endLine": 1631,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 347,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1641,
                  "startColumn": 17,
                  "endLine": 1641,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 348,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_InputStreamSupplier' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1651,
                  "startColumn": 17,
                  "endLine": 1651,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 349,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_Reader' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1661,
                  "startColumn": 17,
                  "endLine": 1661,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 350,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1670,
                  "startColumn": 17,
                  "endLine": 1670,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 351,
          "message": {
            "text": "The instance method name 'testToString_URI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1677,
                  "startColumn": 18,
                  "endLine": 1677,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 352,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URI_CharsetName' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1685,
                  "startColumn": 17,
                  "endLine": 1685,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 353,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URI_CharsetNameNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1690,
                  "startColumn": 17,
                  "endLine": 1690,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 354,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URL' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1695,
                  "startColumn": 17,
                  "endLine": 1695,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 355,
          "message": {
            "text": "The instance method name 'testToString_URL' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1702,
                  "startColumn": 18,
                  "endLine": 1702,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 356,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URL_CharsetName' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1710,
                  "startColumn": 17,
                  "endLine": 1710,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 357,
          "message": {
            "text": "The JUnit 5 test method name 'testToString_URL_CharsetNameNull' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsTest.java"
                },
                "region": {
                  "startLine": 1715,
                  "startColumn": 17,
                  "endLine": 1715,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 358,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 17,
                  "endLine": 48,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 359,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 360,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 17,
                  "endLine": 73,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 361,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 22,
                  "endLine": 82,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 362,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 17,
                  "endLine": 93,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 22,
                  "endLine": 97,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 363,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 17,
                  "endLine": 109,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 22,
                  "endLine": 113,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 364,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 17,
                  "endLine": 123,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 22,
                  "endLine": 127,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 365,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_Encoding_nullWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 17,
                  "endLine": 138,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 366,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 17,
                  "endLine": 143,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 22,
                  "endLine": 147,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 367,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_byteArrayToWriter_nullWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 17,
                  "endLine": 157,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 368,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 17,
                  "endLine": 162,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 369,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 17,
                  "endLine": 177,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 370,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 17,
                  "endLine": 193,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 371,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 17,
                  "endLine": 205,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 372,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 17,
                  "endLine": 211,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 373,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 17,
                  "endLine": 223,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 374,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 17,
                  "endLine": 238,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 375,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 17,
                  "endLine": 244,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 22,
                  "endLine": 250,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 376,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 17,
                  "endLine": 261,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 22,
                  "endLine": 265,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 377,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charArrayToWriter_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 17,
                  "endLine": 275,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 378,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 17,
                  "endLine": 281,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 379,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 17,
                  "endLine": 296,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 380,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 17,
                  "endLine": 312,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 381,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 17,
                  "endLine": 324,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 382,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 17,
                  "endLine": 330,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 383,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 17,
                  "endLine": 342,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 384,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 17,
                  "endLine": 357,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 385,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 17,
                  "endLine": 363,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 22,
                  "endLine": 369,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 386,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 17,
                  "endLine": 380,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 384,
                  "startColumn": 22,
                  "endLine": 384,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 387,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_charSequenceToWriter_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 17,
                  "endLine": 394,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 388,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 17,
                  "endLine": 400,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 389,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 17,
                  "endLine": 415,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 390,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 17,
                  "endLine": 431,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 391,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 17,
                  "endLine": 443,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 392,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 17,
                  "endLine": 449,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 393,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 17,
                  "endLine": 461,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 394,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToOutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 17,
                  "endLine": 476,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 395,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToWriter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 17,
                  "endLine": 482,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 22,
                  "endLine": 488,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 396,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToWriter_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 499,
                  "startColumn": 17,
                  "endLine": 499,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 503,
                  "startColumn": 22,
                  "endLine": 503,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 397,
          "message": {
            "text": "The JUnit 5 test method name 'testWrite_stringToWriter_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 513,
                  "startColumn": 17,
                  "endLine": 513,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 398,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 17,
                  "endLine": 519,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 399,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 538,
                  "startColumn": 17,
                  "endLine": 538,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 400,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 17,
                  "endLine": 557,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 401,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 17,
                  "endLine": 569,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 402,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 17,
                  "endLine": 588,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 403,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_Encoding_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 17,
                  "endLine": 605,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 404,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 612,
                  "startColumn": 17,
                  "endLine": 612,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 405,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 17,
                  "endLine": 624,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 406,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_OutputStream_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 641,
                  "startColumn": 17,
                  "endLine": 641,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 407,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_Writer' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 648,
                  "startColumn": 17,
                  "endLine": 648,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 22,
                  "endLine": 656,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 408,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_Writer_nullData' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 17,
                  "endLine": 669,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 673,
                  "startColumn": 22,
                  "endLine": 673,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 409,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_Writer_nullSeparator' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 683,
                  "startColumn": 17,
                  "endLine": 683,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 50,
          "message": {
            "text": "Ensure that resources like this OutputStreamWriter object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 22,
                  "endLine": 690,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 410,
          "message": {
            "text": "The JUnit 5 test method name 'testWriteLines_Writer_nullStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/IOUtilsWriteTest.java"
                },
                "region": {
                  "startLine": 702,
                  "startColumn": 17,
                  "endLine": 702,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 39,
          "message": {
            "text": "Ensure that resources like this BufferedReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/LineIteratorTest.java"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 22,
                  "endLine": 207,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/LineIteratorTest.java"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 22,
                  "endLine": 219,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 411,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/RandomAccessFilesTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 14,
                  "endLine": 39,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 411,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/RandomAccessFilesTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 14,
                  "endLine": 43,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 411,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/RandomAccessFilesTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 14,
                  "endLine": 47,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 411,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/RandomAccessFilesTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 14,
                  "endLine": 51,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 411,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/RandomAccessFilesTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 14,
                  "endLine": 55,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 411,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'raf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/RandomAccessFilesTest.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 14,
                  "endLine": 59,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 72,
          "message": {
            "text": "Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/SelectorAdapter.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 44,
                  "endLine": 32,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 412,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/SelectorAdapter.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 16,
                  "endLine": 41,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "ReturnEmptyCollectionRatherThanNull",
          "ruleIndex": 412,
          "message": {
            "text": "Return an empty collection rather than null."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/SelectorAdapter.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 16,
                  "endLine": 61,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 413,
          "message": {
            "text": "The JUnit 5 test method name 'testCR_getBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/StandardLineSeparatorTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 17,
                  "endLine": 41,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 414,
          "message": {
            "text": "The JUnit 5 test method name 'testCRLF_getBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/StandardLineSeparatorTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "endLine": 51,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 415,
          "message": {
            "text": "The JUnit 5 test method name 'testLF_getBytes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/StandardLineSeparatorTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/TestResources.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 416,
          "message": {
            "text": "The JUnit 5 test method name 'testGetByteArrayAt_0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 17,
                  "endLine": 72,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 417,
          "message": {
            "text": "The JUnit 5 test method name 'testGetByteArrayAt_0_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 17,
                  "endLine": 77,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 418,
          "message": {
            "text": "The JUnit 5 test method name 'testGetByteArrayAt_1_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 14,
                  "endLine": 98,
                  "endColumn": 76
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 64,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'output': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 14,
                  "endLine": 105,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 419,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 14,
                  "endLine": 117,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 420,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'writer': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/build/AbstractOriginTest.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 14,
                  "endLine": 124,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 421,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharsetDecoders_default' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/charset/CharsetDecodersTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 422,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharsetDecoders_ISO_8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/charset/CharsetDecodersTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 423,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharsetDecoders_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/charset/CharsetDecodersTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 424,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharsetEncoders_default' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/charset/CharsetEncodersTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 425,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharsetEncoders_ISO_8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/charset/CharsetEncodersTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 426,
          "message": {
            "text": "The JUnit 5 test method name 'testToCharsetEncoders_null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/charset/CharsetEncodersTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 17,
                  "endLine": 49,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 427,
          "message": {
            "text": "The JUnit 5 test method name 'constructorArray_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 17,
                  "endLine": 43,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 428,
          "message": {
            "text": "The JUnit 5 test method name 'constructorIterable_Null' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "endLine": 54,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 429,
          "message": {
            "text": "The JUnit 5 test method name 'constructorIterable_order' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/comparator/CompositeFileComparatorTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 430,
          "message": {
            "text": "Perhaps 'smallerFile' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 18,
                  "endLine": 40,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 431,
          "message": {
            "text": "Perhaps 'largerFile' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/comparator/SizeFileComparatorTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 18,
                  "endLine": 41,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/AccumulatorPathVisitorTest.java"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 19,
                  "endLine": 191,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 240,
          "message": {
            "text": "Ensure that resources like this ExecutorService object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/AccumulatorPathVisitorTest.java"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 31,
                  "endLine": 195,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/CounterAssertions.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 432,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'directoryStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/FilesUncheckTest.java"
                },
                "region": {
                  "startLine": 294,
                  "startColumn": 18,
                  "endLine": 294,
                  "endColumn": 108
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 432,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'directoryStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/FilesUncheckTest.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 18,
                  "endLine": 303,
                  "endColumn": 119
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 432,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'directoryStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/FilesUncheckTest.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 18,
                  "endLine": 312,
                  "endColumn": 117
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 433,
          "message": {
            "text": "Avoid unused local variables such as 'probeContentType'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/FilesUncheckTest.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 16,
                  "endLine": 341,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedPrivateMethod",
          "ruleIndex": 434,
          "message": {
            "text": "Avoid unused private methods such as 'testDeleteEmptyDirectory(PathCounters)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsDeleteTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 18,
                  "endLine": 149,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 435,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'targetArchive': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 68,
                  "endLine": 157,
                  "endColumn": 154
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 436,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_File_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 17,
                  "endLine": 249,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 437,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_Path_Absent' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 17,
                  "endLine": 254,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 438,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_Path_FileTime_Absent' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 17,
                  "endLine": 259,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 439,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_Path_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 17,
                  "endLine": 265,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 440,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_URI_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 17,
                  "endLine": 270,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 441,
          "message": {
            "text": "The JUnit 5 test method name 'testGetLastModifiedFileTime_URL_Present' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 275,
                  "startColumn": 17,
                  "endLine": 275,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 9,
                  "endLine": 372,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 443,
          "message": {
            "text": "Avoid unused local variables such as 'outputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 27,
                  "endLine": 370,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 9,
                  "endLine": 375,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 443,
          "message": {
            "text": "Avoid unused local variables such as 'outputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 27,
                  "endLine": 373,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 9,
                  "endLine": 378,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 443,
          "message": {
            "text": "Avoid unused local variables such as 'outputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 27,
                  "endLine": 376,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 9,
                  "endLine": 381,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 443,
          "message": {
            "text": "Avoid unused local variables such as 'outputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/PathUtilsTest.java"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 27,
                  "endLine": 379,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/TempDirectory.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/TempFile.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 8,
                  "endLine": 30,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/TestArguments.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 444,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFileSystemProvider_all' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/spi/FileSystemProvidersTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "endLine": 37,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 445,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFileSystemProvider_filePath' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/spi/FileSystemProvidersTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "endLine": 46,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 446,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFileSystemProvider_fileScheme' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/spi/FileSystemProvidersTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "endLine": 51,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 447,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFileSystemProvider_fileURI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/spi/FileSystemProvidersTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 17,
                  "endLine": 56,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 448,
          "message": {
            "text": "The JUnit 5 test method name 'testGetFileSystemProvider_fileURL' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/file/spi/FileSystemProvidersTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 11,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/AbstractFilterTest.java"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 15,
                  "endLine": 141,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 15,
                  "endLine": 81,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 15,
                  "endLine": 98,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 449,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilterUtils_and' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 17,
                  "endLine": 457,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 450,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilterUtils_or' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 467,
                  "startColumn": 17,
                  "endLine": 467,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 451,
          "message": {
            "text": "The JUnit 5 test method name 'testFilterArray_fromList' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 17,
                  "endLine": 504,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 452,
          "message": {
            "text": "The JUnit 5 test method name 'testFilterArray_IOFileFilter' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 17,
                  "endLine": 522,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 453,
          "message": {
            "text": "The JUnit 5 test method name 'testFilterArray_PathVisitorFileFilter_FileExistsNo' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 17,
                  "endLine": 539,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 454,
          "message": {
            "text": "The JUnit 5 test method name 'testFilterArray_PathVisitorFileFilter_FileExistsYes' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 17,
                  "endLine": 556,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 455,
          "message": {
            "text": "The JUnit 5 test method name 'testFilterList_fromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 17,
                  "endLine": 608,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 456,
          "message": {
            "text": "The JUnit 5 test method name 'testFilterSet_fromArray' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/FileFilterTest.java"
                },
                "region": {
                  "startLine": 676,
                  "startColumn": 17,
                  "endLine": 676,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 457,
          "message": {
            "text": "Unnecessary qualifier 'java.util.regex': 'Pattern' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTest.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 96,
                  "endLine": 154,
                  "endColumn": 119
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedFormalParameter",
          "ruleIndex": 458,
          "message": {
            "text": "Avoid unused method parameters such as 'target'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 76,
                  "endLine": 76,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 459,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilter_HardDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 460,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilter_HardFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 17,
                  "endLine": 141,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 461,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilter_Link' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 462,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilter_missingFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 17,
                  "endLine": 151,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 463,
          "message": {
            "text": "The JUnit 5 test method name 'testFileFilter_PathLink' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "endLine": 156,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 464,
          "message": {
            "text": "The JUnit 5 test method name 'testFileNameFilter_HardDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 17,
                  "endLine": 161,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 465,
          "message": {
            "text": "The JUnit 5 test method name 'testFileNameFilter_HardFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 17,
                  "endLine": 166,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 466,
          "message": {
            "text": "The JUnit 5 test method name 'testFileNameFilter_Link' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 17,
                  "endLine": 171,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 467,
          "message": {
            "text": "The JUnit 5 test method name 'testFileNameFilter_missingFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 17,
                  "endLine": 176,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 468,
          "message": {
            "text": "The JUnit 5 test method name 'testFileNameFilter_PathLink' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 17,
                  "endLine": 181,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 469,
          "message": {
            "text": "The JUnit 5 test method name 'testPathFilter_HardDirectory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 17,
                  "endLine": 186,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 470,
          "message": {
            "text": "The JUnit 5 test method name 'testPathFilter_HardFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "endLine": 192,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 471,
          "message": {
            "text": "The JUnit 5 test method name 'testPathFilter_Link' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 17,
                  "endLine": 198,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 472,
          "message": {
            "text": "The JUnit 5 test method name 'testPathFilter_missingFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 17,
                  "endLine": 205,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 473,
          "message": {
            "text": "The JUnit 5 test method name 'testPathFilter_PathLink' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/filefilter/SymbolicLinkFileFilterTest.java"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 17,
                  "endLine": 211,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 474,
          "message": {
            "text": "Lambda expression could be written as a method reference: `intRef::get`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/EraseTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 35,
                  "endLine": 75,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 20,
                  "endLine": 62,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 20,
                  "endLine": 70,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 20,
                  "endLine": 78,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 475,
          "message": {
            "text": "Ensure that resources like this BaseStream<Path, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 35,
                  "endLine": 211,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 14,
                  "endLine": 220,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 14,
                  "endLine": 223,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 14,
                  "endLine": 226,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 14,
                  "endLine": 229,
                  "endColumn": 92
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedPrivateMethod",
          "ruleIndex": 477,
          "message": {
            "text": "Avoid unused private methods such as 'testParallelParallel(BaseStream<?, ?>)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 18,
                  "endLine": 235,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 478,
          "message": {
            "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 32,
                  "endLine": 236,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 478,
          "message": {
            "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 32,
                  "endLine": 238,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 478,
          "message": {
            "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 32,
                  "endLine": 240,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 14,
                  "endLine": 271,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 14,
                  "endLine": 274,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 476,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'stream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 14,
                  "endLine": 277,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedPrivateMethod",
          "ruleIndex": 479,
          "message": {
            "text": "Avoid unused private methods such as 'testSequentialSequential(BaseStream<?, ?>)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 18,
                  "endLine": 283,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 478,
          "message": {
            "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 32,
                  "endLine": 284,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 478,
          "message": {
            "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 32,
                  "endLine": 286,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 478,
          "message": {
            "text": "Ensure that resources like this BaseStream<?, ?> object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOBaseStreamTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 246,
          "message": {
            "text": "Ensure that resources like this Closeable object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOConsumerTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 25,
                  "endLine": 149,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOFunctionTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 20,
                  "endLine": 41,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOIntStreamAdapter.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 480,
          "message": {
            "text": "Unnecessary qualifier 'IOIntStreamAdapter': 'adapt' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOIntStreamAdapter.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 46,
                  "endLine": 38,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "OverrideBothEqualsAndHashcode",
          "ruleIndex": 481,
          "message": {
            "text": "Ensure you override both equals() and hashCode()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/IOPredicateTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 24,
                  "endLine": 50,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/TestConstants.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "endLine": 29,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 482,
          "message": {
            "text": "Lambda expression could be written as a method reference: `TestConstants::throwIOException`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/TestConstants.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 53,
                  "endLine": 47,
                  "endColumn": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 482,
          "message": {
            "text": "Lambda expression could be written as a method reference: `TestConstants::throwIOException`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/TestConstants.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 55,
                  "endLine": 49,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 482,
          "message": {
            "text": "Lambda expression could be written as a method reference: `TestConstants::throwIOException`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/TestConstants.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "endLine": 55,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 482,
          "message": {
            "text": "Lambda expression could be written as a method reference: `TestConstants::throwIOException`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/TestConstants.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 54,
                  "endLine": 57,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/TestUtils.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 25,
                  "endColumn": 6
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 483,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::skip`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/UncheckTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 24,
                  "endLine": 80,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 483,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::skip`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/UncheckTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 39,
                  "endLine": 130,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 484,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/function/UncheckTest.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 39,
                  "endLine": 152,
                  "endColumn": 72
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 32,
                  "endLine": 63,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 32,
                  "endLine": 73,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 32,
                  "endLine": 81,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 32,
                  "endLine": 94,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 32,
                  "endLine": 111,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 32,
                  "endLine": 126,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 27,
                  "endLine": 135,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 485,
          "message": {
            "text": "Avoid unused local variables such as 'read'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 13,
                  "endLine": 137,
                  "endColumn": 17
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 486,
          "message": {
            "text": "Empty while statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 9,
                  "endLine": 140,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AbstractInputStreamTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 32,
                  "endLine": 148,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 14,
                  "endLine": 129,
                  "endColumn": 124
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 14,
                  "endLine": 136,
                  "endColumn": 123
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 14,
                  "endLine": 143,
                  "endColumn": 115
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/AutoCloseInputStreamTest.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 14,
                  "endLine": 150,
                  "endColumn": 151
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 20,
                  "endLine": 55,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedPrivateMethod",
          "ruleIndex": 487,
          "message": {
            "text": "Avoid unused private methods such as 'parseXml(Reader)'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 18,
                  "endLine": 180,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 13,
                  "endLine": 248,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 488,
          "message": {
            "text": "Avoid unused local variables such as 'in'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 30,
                  "endLine": 246,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 489,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'bomInputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 14,
                  "endLine": 412,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 713,
                  "startColumn": 13,
                  "endLine": 713,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BOMInputStreamTest.java"
                },
                "region": {
                  "startLine": 722,
                  "startColumn": 13,
                  "endLine": 722,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BoundedReaderTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 491,
          "message": {
            "text": "Avoid unused local variables such as 'mr'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BoundedReaderTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 32,
                  "endLine": 67,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 486,
          "message": {
            "text": "Empty while statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BoundedReaderTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 13,
                  "endLine": 201,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 492,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::available`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 65,
                  "endLine": 45,
                  "endColumn": 89
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 493,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::close`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 65,
                  "endLine": 50,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 484,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 65,
                  "endLine": 55,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 494,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::reset`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenInputStreamTest.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 65,
                  "endLine": 62,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 495,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenReader::close`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenReaderTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 65,
                  "endLine": 46,
                  "endColumn": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 496,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenReader::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenReaderTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 65,
                  "endLine": 61,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 497,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenReader::ready`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenReaderTest.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 65,
                  "endLine": 76,
                  "endColumn": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 498,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenReader::reset`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/BrokenReaderTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 65,
                  "endLine": 81,
                  "endColumn": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 499,
          "message": {
            "text": "The JUnit 5 test method name 'testBufferedRead_AvailableCharset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 17,
                  "endLine": 161,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 500,
          "message": {
            "text": "The JUnit 5 test method name 'testBufferedRead_RequiredCharset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 17,
                  "endLine": 171,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 501,
          "message": {
            "text": "The JUnit 5 test method name 'testBufferedRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 17,
                  "endLine": 178,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 502,
          "message": {
            "text": "The JUnit 5 test method name 'testCharsetMismatchInfiniteLoop_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 17,
                  "endLine": 195,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 503,
          "message": {
            "text": "The instance method name 'testIO_356' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 18,
                  "endLine": 204,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 504,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S0_UTF16' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 505,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S0_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 17,
                  "endLine": 236,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 506,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S1_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 17,
                  "endLine": 241,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 507,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D10_S2_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 17,
                  "endLine": 246,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 508,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D13_S0_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 17,
                  "endLine": 251,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 509,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D13_S1_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 17,
                  "endLine": 256,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 510,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_B10_D20_S0_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 17,
                  "endLine": 261,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 511,
          "message": {
            "text": "The instance method name 'testIO_356_Loop' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 18,
                  "endLine": 265,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 512,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_Loop_UTF16' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 17,
                  "endLine": 274,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 513,
          "message": {
            "text": "The JUnit 5 test method name 'testIO_356_Loop_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 17,
                  "endLine": 280,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 514,
          "message": {
            "text": "The JUnit 5 test method name 'testLargeBufferedRead_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 17,
                  "endLine": 286,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 515,
          "message": {
            "text": "The JUnit 5 test method name 'testLargeBufferedRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 17,
                  "endLine": 293,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 516,
          "message": {
            "text": "The JUnit 5 test method name 'testLargeSingleByteRead_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 17,
                  "endLine": 298,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 517,
          "message": {
            "text": "The JUnit 5 test method name 'testLargeSingleByteRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 17,
                  "endLine": 305,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 518,
          "message": {
            "text": "The JUnit 5 test method name 'testMarkReset_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 17,
                  "endLine": 328,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 519,
          "message": {
            "text": "The JUnit 5 test method name 'testMarkReset_USASCII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 17,
                  "endLine": 335,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 520,
          "message": {
            "text": "The JUnit 5 test method name 'testMarkReset_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 17,
                  "endLine": 340,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 521,
          "message": {
            "text": "The JUnit 5 test method name 'testReadZero_EmptyString' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 17,
                  "endLine": 387,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 522,
          "message": {
            "text": "The JUnit 5 test method name 'testReadZero_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 17,
                  "endLine": 395,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 14,
                  "endLine": 423,
                  "endColumn": 121
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 523,
          "message": {
            "text": "The JUnit 5 test method name 'testSingleByteRead_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 17,
                  "endLine": 457,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 524,
          "message": {
            "text": "The JUnit 5 test method name 'testSingleByteRead_UTF16' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 17,
                  "endLine": 464,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 525,
          "message": {
            "text": "The JUnit 5 test method name 'testSingleByteRead_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 469,
                  "startColumn": 17,
                  "endLine": 469,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 479,
                  "startColumn": 13,
                  "endLine": 479,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 526,
          "message": {
            "text": "The JUnit 5 test method name 'testSkip_RequiredCharsets' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 486,
                  "startColumn": 17,
                  "endLine": 486,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 527,
          "message": {
            "text": "The JUnit 5 test method name 'testSkip_USASCII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 17,
                  "endLine": 493,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 528,
          "message": {
            "text": "The JUnit 5 test method name 'testSkip_UTF8' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceInputStreamTest.java"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 17,
                  "endLine": 498,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "UselessParentheses",
          "ruleIndex": 529,
          "message": {
            "text": "Useless parentheses."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 38,
                  "endLine": 40,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "endLine": 56,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 22,
                  "endLine": 61,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 22,
                  "endLine": 199,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 22,
                  "endLine": 216,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 22,
                  "endLine": 283,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharSequenceReaderTest.java"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 22,
                  "endLine": 295,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterFilterReaderTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 28,
                  "endLine": 38,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterFilterReaderTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 15,
                  "endLine": 39,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 28,
                  "endLine": 46,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 15,
                  "endLine": 47,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 19,
                  "endLine": 65,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 28,
                  "endLine": 75,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "endLine": 76,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 28,
                  "endLine": 85,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 15,
                  "endLine": 86,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 28,
                  "endLine": 96,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 15,
                  "endLine": 97,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 28,
                  "endLine": 107,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 15,
                  "endLine": 108,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 28,
                  "endLine": 119,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 15,
                  "endLine": 120,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 28,
                  "endLine": 131,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 530,
          "message": {
            "text": "Avoid using implementation types like 'HashSet'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CharacterSetFilterReaderTest.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 15,
                  "endLine": 132,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UselessOverridingMethod",
          "ruleIndex": 531,
          "message": {
            "text": "Overriding method merely calls super"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 20,
                  "endLine": 77,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 532,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'oos': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ClassLoaderObjectInputStreamTest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 14,
                  "endLine": 126,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 533,
          "message": {
            "text": "The JUnit 5 test method name 'testLargeFiles_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/CountingInputStreamTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 17,
                  "endLine": 113,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 64,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 488,
          "message": {
            "text": "Avoid unused local variables such as 'in'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/InfiniteCircularInputStreamTest.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 26,
                  "endLine": 62,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 534,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'msis': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 14,
                  "endLine": 54,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 534,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'msis': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/MarkShieldInputStreamTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 14,
                  "endLine": 66,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotCallGarbageCollectionExplicitly",
          "ruleIndex": 71,
          "message": {
            "text": "Do not explicitly trigger a garbage collection."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/MemoryMappedFileInputStreamTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 9,
                  "endLine": 51,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotCallGarbageCollectionExplicitly",
          "ruleIndex": 71,
          "message": {
            "text": "Do not explicitly trigger a garbage collection."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/MemoryMappedFileInputStreamTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 9,
                  "endLine": 53,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotCallGarbageCollectionExplicitly",
          "ruleIndex": 71,
          "message": {
            "text": "Do not explicitly trigger a garbage collection."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/MemoryMappedFileInputStreamTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 9,
                  "endLine": 55,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "DoNotCallGarbageCollectionExplicitly",
          "ruleIndex": 71,
          "message": {
            "text": "Do not explicitly trigger a garbage collection."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/MemoryMappedFileInputStreamTest.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 535,
          "message": {
            "text": "Lambda expression could be written as a method reference: `input::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullInputStreamTest.java"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 46,
                  "endLine": 64,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 536,
          "message": {
            "text": "Ensure that resources like this TestNullInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullInputStreamTest.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 27,
                  "endLine": 109,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 536,
          "message": {
            "text": "Ensure that resources like this TestNullInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullInputStreamTest.java"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 27,
                  "endLine": 123,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 536,
          "message": {
            "text": "Ensure that resources like this TestNullInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullInputStreamTest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 27,
                  "endLine": 146,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 536,
          "message": {
            "text": "Ensure that resources like this TestNullInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullInputStreamTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 27,
                  "endLine": 185,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 537,
          "message": {
            "text": "Lambda expression could be written as a method reference: `reader::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullReaderTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 46,
                  "endLine": 65,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 538,
          "message": {
            "text": "Ensure that resources like this TestNullReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullReaderTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 22,
                  "endLine": 110,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 538,
          "message": {
            "text": "Ensure that resources like this TestNullReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/NullReaderTest.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 22,
                  "endLine": 156,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 20,
                  "endLine": 38,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 20,
                  "endLine": 58,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 539,
          "message": {
            "text": "The JUnit 5 test method name 'testDataByteCalled_add' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 17,
                  "endLine": 155,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 540,
          "message": {
            "text": "The JUnit 5 test method name 'testDataByteCalled_ctor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 17,
                  "endLine": 187,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 541,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'ois': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ObservableInputStreamTest.java"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 13,
                  "endLine": 222,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 17,
                  "endLine": 103,
                  "endColumn": 84
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 17,
                  "endLine": 115,
                  "endColumn": 134
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 134
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 17,
                  "endLine": 158,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 443,
          "message": {
            "text": "Avoid unused local variables such as 'outputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 41,
                  "endLine": 158,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "endLine": 184,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 443,
          "message": {
            "text": "Avoid unused local variables such as 'outputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 41,
                  "endLine": 184,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 543,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stopwatch::toString`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 73,
                  "endLine": 190,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 17,
                  "endLine": 198,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 542,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'outputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/QueueInputStreamTest.java"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 17,
                  "endLine": 210,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/RandomAccessFileInputStreamTest.java"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 13,
                  "endLine": 221,
                  "endColumn": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 544,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'in': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 14,
                  "endLine": 136,
                  "endColumn": 101
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 544,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'in': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 14,
                  "endLine": 142,
                  "endColumn": 141
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 14,
                  "endLine": 209,
                  "endColumn": 138
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReaderInputStreamTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 28,
                  "endLine": 217,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 545,
          "message": {
            "text": "The class name 'ReversedLinesFileReaderTestParamBlockSize' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamBlockSize.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 8,
                  "endLine": 39,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamBlockSize.java"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 11,
                  "endLine": 105,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 546,
          "message": {
            "text": "The class name 'ReversedLinesFileReaderTestParamFile' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 8,
                  "endLine": 48,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 547,
          "message": {
            "text": "Avoid using implementation types like 'Stack'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 15,
                  "endLine": 90,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 548,
          "message": {
            "text": "Ensure that resources like this FileSystem object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 20,
                  "endLine": 118,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 549,
          "message": {
            "text": "The class name 'ReversedLinesFileReaderTestSimple' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestSimple.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 8,
                  "endLine": 35,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/SequenceReaderTest.java"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 22,
                  "endLine": 98,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/SequenceReaderTest.java"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 22,
                  "endLine": 202,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 550,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'bais': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/SwappedDataInputStreamTest.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 13,
                  "endLine": 68,
                  "endColumn": 78
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 551,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'sdis': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/SwappedDataInputStreamTest.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 13,
                  "endLine": 69,
                  "endColumn": 81
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 28,
                  "endLine": 125,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 22,
                  "endLine": 127,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 22,
                  "endLine": 129,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 22,
                  "endLine": 131,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 22,
                  "endLine": 133,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 70,
          "message": {
            "text": "Ensure that resources like this RandomAccessFile object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 26,
                  "endLine": 202,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 19,
                  "endLine": 209,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 40,
                  "endLine": 235,
                  "endColumn": 87
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 21,
                  "endLine": 263,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 21,
                  "endLine": 273,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 21,
                  "endLine": 283,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 21,
                  "endLine": 293,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 21,
                  "endLine": 303,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 21,
                  "endLine": 313,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 21,
                  "endLine": 323,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 40,
                  "endLine": 402,
                  "endColumn": 87
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 552,
          "message": {
            "text": "Avoid unused local variables such as 'tailer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 21,
                  "endLine": 544,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 553,
          "message": {
            "text": "Ensure that resources like this ScheduledThreadPoolExecutor object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TailerTest.java"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 28,
                  "endLine": 566,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeInputStreamTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 28,
                  "endLine": 63,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeInputStreamTest.java"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 27,
                  "endLine": 80,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeReaderTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 22,
                  "endLine": 50,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 2,
          "message": {
            "text": "Ensure that resources like this StringReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeReaderTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 28,
                  "endLine": 61,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeReaderTest.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 22,
                  "endLine": 62,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 554,
          "message": {
            "text": "Avoid unused local variables such as 'e'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeReaderTest.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 27,
                  "endLine": 69,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 222,
          "message": {
            "text": "Ensure that resources like this Reader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TeeReaderTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 22,
                  "endLine": 79,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 555,
          "message": {
            "text": "Avoid unused local variables such as 'ois'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TimestampedObserverTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 36,
                  "endLine": 55,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TimestampedObserverTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 9,
                  "endLine": 76,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 555,
          "message": {
            "text": "Avoid unused local variables such as 'ois'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/TimestampedObserverTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 36,
                  "endLine": 73,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 556,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'baos': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnixLineEndingInputStreamTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 14,
                  "endLine": 65,
                  "endColumn": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 557,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'lf': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnixLineEndingInputStreamTest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 13,
                  "endLine": 66,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 558,
          "message": {
            "text": "The JUnit 5 test method name 'test_available' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 17,
                  "endLine": 90,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 559,
          "message": {
            "text": "Lambda expression could be written as a method reference: `bis::available`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 41,
                  "endLine": 99,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 560,
          "message": {
            "text": "The JUnit 5 test method name 'test_close' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 17,
                  "endLine": 108,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 9,
                  "endLine": 114,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 561,
          "message": {
            "text": "Avoid unused local variables such as 'buf'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 34,
                  "endLine": 112,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 23,
                  "endLine": 138,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 562,
          "message": {
            "text": "it is recommended to wrap resource 'bufin' in try-with-resource declaration directly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 39,
                  "endLine": 143,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 19,
                  "endLine": 150,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 563,
          "message": {
            "text": "The JUnit 5 test method name 'test_ConstructorLjava_io_InputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 17,
                  "endLine": 161,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 564,
          "message": {
            "text": "Lambda expression could be written as a method reference: `str::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 45,
                  "endLine": 163,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 565,
          "message": {
            "text": "The JUnit 5 test method name 'test_ConstructorLjava_io_InputStreamI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 17,
                  "endLine": 171,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 564,
          "message": {
            "text": "Lambda expression could be written as a method reference: `str::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 45,
                  "endLine": 173,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 9,
                  "endLine": 187,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 566,
          "message": {
            "text": "Lambda expression could be written as a method reference: `is::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 41,
                  "endLine": 190,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 567,
          "message": {
            "text": "The JUnit 5 test method name 'test_markI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 17,
                  "endLine": 201,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 9,
                  "endLine": 204,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 9,
                  "endLine": 217,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 9,
                  "endLine": 224,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 9,
                  "endLine": 226,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 568,
          "message": {
            "text": "The JUnit 5 test method name 'test_markSupported' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 17,
                  "endLine": 262,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 569,
          "message": {
            "text": "The JUnit 5 test method name 'test_read' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 17,
                  "endLine": 272,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 54,
          "message": {
            "text": "Ensure that resources like this InputStreamReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 33,
                  "endLine": 273,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidDollarSigns",
          "ruleIndex": 570,
          "message": {
            "text": "Avoid using dollar signs in variable/method/class/interface names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 17,
                  "endLine": 295,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 571,
          "message": {
            "text": "The JUnit 5 test method name 'test_read$BII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 17,
                  "endLine": 295,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 9,
                  "endLine": 297,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 17,
                  "endLine": 303,
                  "endColumn": 21
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidDollarSigns",
          "ruleIndex": 570,
          "message": {
            "text": "Avoid using dollar signs in variable/method/class/interface names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 17,
                  "endLine": 346,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 572,
          "message": {
            "text": "The JUnit 5 test method name 'test_read$BII_Exception' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 17,
                  "endLine": 346,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 244,
          "message": {
            "text": "Ensure that resources like this BufferedInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 35,
                  "endLine": 347,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 573,
          "message": {
            "text": "The JUnit 5 test method name 'test_reset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 17,
                  "endLine": 365,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 574,
          "message": {
            "text": "The JUnit 5 test method name 'test_reset_Exception' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 17,
                  "endLine": 389,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 244,
          "message": {
            "text": "Ensure that resources like this BufferedInputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 390,
                  "startColumn": 35,
                  "endLine": 390,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 575,
          "message": {
            "text": "Lambda expression could be written as a method reference: `bis::reset`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 41,
                  "endLine": 393,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 575,
          "message": {
            "text": "Lambda expression could be written as a method reference: `bis::reset`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 41,
                  "endLine": 402,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 576,
          "message": {
            "text": "The JUnit 5 test method name 'test_reset_scenario1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 17,
                  "endLine": 411,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 9,
                  "endLine": 416,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 577,
          "message": {
            "text": "The JUnit 5 test method name 'test_reset_scenario2' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 17,
                  "endLine": 426,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 9,
                  "endLine": 430,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 578,
          "message": {
            "text": "The JUnit 5 test method name 'test_skip_NullInputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 17,
                  "endLine": 440,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 579,
          "message": {
            "text": "The JUnit 5 test method name 'test_skipJ' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 17,
                  "endLine": 452,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedBufferedInputStreamTest.java"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 9,
                  "endLine": 455,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 558,
          "message": {
            "text": "The JUnit 5 test method name 'test_available' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 560,
          "message": {
            "text": "The JUnit 5 test method name 'test_close' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 566,
          "message": {
            "text": "Lambda expression could be written as a method reference: `is::read`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 41,
                  "endLine": 94,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 567,
          "message": {
            "text": "The JUnit 5 test method name 'test_markI' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 17,
                  "endLine": 101,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 568,
          "message": {
            "text": "The JUnit 5 test method name 'test_markSupported' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 17,
                  "endLine": 109,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 569,
          "message": {
            "text": "The JUnit 5 test method name 'test_read' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidDollarSigns",
          "ruleIndex": 570,
          "message": {
            "text": "Avoid using dollar signs in variable/method/class/interface names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "endLine": 130,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 580,
          "message": {
            "text": "The JUnit 5 test method name 'test_read$B' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 17,
                  "endLine": 130,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidDollarSigns",
          "ruleIndex": 570,
          "message": {
            "text": "Avoid using dollar signs in variable/method/class/interface names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "endLine": 142,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 571,
          "message": {
            "text": "The JUnit 5 test method name 'test_read$BII' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "endLine": 142,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 573,
          "message": {
            "text": "The JUnit 5 test method name 'test_reset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 17,
                  "endLine": 154,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 581,
          "message": {
            "text": "Lambda expression could be written as a method reference: `is::reset`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 41,
                  "endLine": 155,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 579,
          "message": {
            "text": "The JUnit 5 test method name 'test_skipJ' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 17,
                  "endLine": 165,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "CheckSkipResult",
          "ruleIndex": 490,
          "message": {
            "text": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/UnsynchronizedFilterInputStreamTest.java"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 9,
                  "endLine": 167,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 29,
                  "endLine": 128,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 14,
                  "endLine": 186,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 9,
                  "endLine": 202,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 30,
                  "endLine": 200,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 9,
                  "endLine": 205,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 30,
                  "endLine": 203,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 9,
                  "endLine": 217,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 30,
                  "endLine": 215,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 9,
                  "endLine": 220,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 30,
                  "endLine": 218,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 9,
                  "endLine": 228,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 30,
                  "endLine": 226,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 9,
                  "endLine": 232,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 25,
                  "endLine": 230,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 9,
                  "endLine": 244,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 30,
                  "endLine": 242,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 9,
                  "endLine": 247,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 30,
                  "endLine": 245,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 9,
                  "endLine": 259,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 257,
                  "startColumn": 30,
                  "endLine": 257,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 9,
                  "endLine": 271,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 583,
          "message": {
            "text": "Avoid unused local variables such as 'reader'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 30,
                  "endLine": 269,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 18,
                  "endLine": 423,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 584,
          "message": {
            "text": "The JUnit 5 test method name 'testLowerCaseEncodingWithTurkishLocale_IO_557' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 437,
                  "startColumn": 17,
                  "endLine": 437,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 27,
                  "endLine": 452,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 18,
                  "endLine": 508,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 46,
                  "endLine": 508,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 585,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'is': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 14,
                  "endLine": 532,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 586,
          "message": {
            "text": "The JUnit 5 test method name 'testRawNoBomIso8859_1' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 17,
                  "endLine": 540,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 32,
          "message": {
            "text": "Ensure that resources like this InputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/XmlStreamReaderTest.java"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 21,
                  "endLine": 575,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 587,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'cbis': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/buffer/CircularBufferInputStreamTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 76,
                  "endLine": 44,
                  "endColumn": 150
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 39,
          "message": {
            "text": "Ensure that resources like this BufferedReader object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 38,
                  "endLine": 242,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 21,
                  "endLine": 262,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 28,
                  "endLine": 263,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 28,
                  "endLine": 265,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 21,
                  "endLine": 272,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 273,
                  "startColumn": 28,
                  "endLine": 273,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 52,
                  "endLine": 548,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 25,
                  "endLine": 562,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 562,
                  "startColumn": 51,
                  "endLine": 562,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 52,
                  "endLine": 563,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 24,
                  "endLine": 567,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 56,
                  "endLine": 569,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 25,
                  "endLine": 576,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 51,
                  "endLine": 576,
                  "endColumn": 73
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 52,
                  "endLine": 577,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 581,
                  "startColumn": 24,
                  "endLine": 581,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 583,
                  "startColumn": 56,
                  "endLine": 583,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 24,
                  "endLine": 603,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 25,
                  "endLine": 604,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 57,
                  "endLine": 605,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 24,
                  "endLine": 607,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 25,
                  "endLine": 608,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 57,
                  "endLine": 609,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 614,
                  "startColumn": 20,
                  "endLine": 614,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 41,
                  "endLine": 615,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 52,
                  "endLine": 616,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 36,
                  "endLine": 620,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 621,
                  "startColumn": 52,
                  "endLine": 621,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 17,
                  "endLine": 627,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 44,
                  "endLine": 627,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 629,
                  "startColumn": 56,
                  "endLine": 629,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 40,
                  "endLine": 632,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 56,
                  "endLine": 634,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 24,
                  "endLine": 638,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 51,
                  "endLine": 638,
                  "endColumn": 74
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 56,
                  "endLine": 640,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LiteralsFirstInComparisons",
          "ruleIndex": 12,
          "message": {
            "text": "Position literals first in String comparisons"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 40,
                  "endLine": 643,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 645,
                  "startColumn": 56,
                  "endLine": 645,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnsynchronizedStaticFormatter",
          "ruleIndex": 582,
          "message": {
            "text": "Static Formatter objects should be accessed in a synchronized manner"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/input/compatibility/XmlStreamReader.java"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 52,
                  "endLine": 650,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 588,
          "message": {
            "text": "The static method name 'contentEquals_release_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 27,
                  "endLine": 82,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 13,
                  "endLine": 84,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 13,
                  "endLine": 105,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 25,
                  "endLine": 151,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 25,
                  "endLine": 169,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 589,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 22,
                  "endLine": 184,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 25,
                  "endLine": 187,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 590,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsInputStreamsBenchmark.java"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 17,
                  "endLine": 226,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 588,
          "message": {
            "text": "The static method name 'contentEquals_release_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 27,
                  "endLine": 84,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 13,
                  "endLine": 85,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "CompareObjectsWithEquals",
          "ruleIndex": 18,
          "message": {
            "text": "Use equals() to compare object references."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 20,
                  "endLine": 153,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 20,
                  "endLine": 172,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 589,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 22,
                  "endLine": 187,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 261,
          "message": {
            "text": "Avoid unused local variables such as 'input2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 20,
                  "endLine": 190,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 590,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/jmh/IOUtilsContentEqualsReadersBenchmark.java"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 17,
                  "endLine": 230,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 591,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/monitor/AbstractMonitorTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 26,
                  "endLine": 51,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 493,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::close`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 65,
                  "endLine": 45,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 592,
          "message": {
            "text": "Lambda expression could be written as a method reference: `stream::flush`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenOutputStreamTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 65,
                  "endLine": 50,
                  "endColumn": 85
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 593,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::close`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenWriterTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 65,
                  "endLine": 61,
                  "endColumn": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "EqualsNull",
          "ruleIndex": 594,
          "message": {
            "text": "Avoid using equals() to compare against null"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenWriterTest.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 71,
                  "endLine": 67,
                  "endColumn": 96
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 595,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::flush`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenWriterTest.java"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 65,
                  "endLine": 72,
                  "endColumn": 91
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 596,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::hashCode`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenWriterTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 65,
                  "endLine": 78,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 597,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::toString`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/BrokenWriterTest.java"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 65,
                  "endLine": 84,
                  "endColumn": 94
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalParameterInAbstractMethod",
          "ruleIndex": 27,
          "message": {
            "text": "Final parameter in abstract method"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 11,
                  "endLine": 46,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 20,
                  "endLine": 49,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 20,
                  "endLine": 61,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 598,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'ref': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 13,
                  "endLine": 179,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 599,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'baos2': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 21,
                  "endLine": 222,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 598,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'ref': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 13,
                  "endLine": 264,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 544,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'in': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 13,
                  "endLine": 300,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 598,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'ref': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ByteArrayOutputStreamTest.java"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 13,
                  "endLine": 311,
                  "endColumn": 90
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 600,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'chunked': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ChunkedOutputStreamTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 600,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'chunked': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ChunkedOutputStreamTest.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "endLine": 58,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 600,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'chunked': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ChunkedOutputStreamTest.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 17,
                  "endLine": 77,
                  "endColumn": 86
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 601,
          "message": {
            "text": "The JUnit 5 test method name 'negative_chunkSize_not_permitted' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ChunkedWriterTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 17,
                  "endLine": 47,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 602,
          "message": {
            "text": "The JUnit 5 test method name 'write_four_chunks' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ChunkedWriterTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 603,
          "message": {
            "text": "The JUnit 5 test method name 'write_two_chunks_default_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ChunkedWriterTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 65,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 533,
          "message": {
            "text": "The JUnit 5 test method name 'testLargeFiles_IO84' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/CountingOutputStreamTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "FinalFieldCouldBeStatic",
          "ruleIndex": 591,
          "message": {
            "text": "This final field could be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 26,
                  "endLine": 54,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 604,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'fis': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/DeferredFileOutputStreamTest.java"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 14,
                  "endLine": 427,
                  "endColumn": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 605,
          "message": {
            "text": "The JUnit 5 test method name 'constructor_File_directory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "endLine": 55,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 13,
                  "endLine": 59,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 606,
          "message": {
            "text": "Avoid unused local variables such as 'writer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 25,
                  "endLine": 57,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 13,
                  "endLine": 65,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 606,
          "message": {
            "text": "Avoid unused local variables such as 'writer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 25,
                  "endLine": 63,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 607,
          "message": {
            "text": "The JUnit 5 test method name 'constructor_File_encoding_badEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "endLine": 71,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 13,
                  "endLine": 75,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 606,
          "message": {
            "text": "Avoid unused local variables such as 'writer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 25,
                  "endLine": 73,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 608,
          "message": {
            "text": "The JUnit 5 test method name 'constructor_File_existingFile_withContent' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 17,
                  "endLine": 81,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 609,
          "message": {
            "text": "The JUnit 5 test method name 'constructor_File_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 17,
                  "endLine": 102,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 13,
                  "endLine": 106,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 606,
          "message": {
            "text": "Avoid unused local variables such as 'writer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 25,
                  "endLine": 104,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 610,
          "message": {
            "text": "The JUnit 5 test method name 'constructor_fileName_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 17,
                  "endLine": 112,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 13,
                  "endLine": 116,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 606,
          "message": {
            "text": "Avoid unused local variables such as 'writer'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 25,
                  "endLine": 114,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 611,
          "message": {
            "text": "The JUnit 5 test method name 'constructorAppend_File_existingFile_withContent' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 612,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_Charset_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 17,
                  "endLine": 148,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 613,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_CharsetEncoder_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 17,
                  "endLine": 163,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 614,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_null_Charset_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 17,
                  "endLine": 178,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 615,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_null_CharsetEncoder_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 17,
                  "endLine": 185,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 616,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_null_CharsetName_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 17,
                  "endLine": 198,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 617,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_string_Charset_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 17,
                  "endLine": 205,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 618,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_string_CharsetEncoder_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 619,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_string_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 17,
                  "endLine": 227,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 620,
          "message": {
            "text": "The JUnit 5 test method name 'sameEncoding_string_string_constructor' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 17,
                  "endLine": 234,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 19,
                  "endLine": 285,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyCatchBlock",
          "ruleIndex": 20,
          "message": {
            "text": "Avoid empty catch blocks"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/FileWriterWithEncodingTest.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 19,
                  "endLine": 300,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "SingularField",
          "ruleIndex": 621,
          "message": {
            "text": "Perhaps 'lockDir' could be replaced by a local variable."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 18,
                  "endLine": 47,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 622,
          "message": {
            "text": "Avoid unused local variables such as 'lfw2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 33,
                  "endLine": 91,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 623,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_File_directory' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 17,
                  "endLine": 102,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 624,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_File_encoding_badEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 17,
                  "endLine": 112,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 625,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_File_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 17,
                  "endLine": 129,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 626,
          "message": {
            "text": "The JUnit 5 test method name 'testConstructor_fileName_nullFile' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 17,
                  "endLine": 147,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 627,
          "message": {
            "text": "Avoid unused local variables such as 'lfw1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 33,
                  "endLine": 160,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 622,
          "message": {
            "text": "Avoid unused local variables such as 'lfw2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 37,
                  "endLine": 165,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 628,
          "message": {
            "text": "Avoid unused local variables such as 'lfw3'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 37,
                  "endLine": 175,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 627,
          "message": {
            "text": "Avoid unused local variables such as 'lfw1'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 33,
                  "endLine": 191,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 622,
          "message": {
            "text": "Avoid unused local variables such as 'lfw2'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/LockableFileWriterTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 33,
                  "endLine": 199,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 22,
                  "endLine": 42,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 22,
                  "endLine": 59,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 22,
                  "endLine": 76,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 22,
                  "endLine": 93,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 22,
                  "endLine": 110,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 22,
                  "endLine": 127,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 22,
                  "endLine": 144,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 22,
                  "endLine": 160,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 22,
                  "endLine": 176,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 22,
                  "endLine": 192,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 22,
                  "endLine": 208,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 22,
                  "endLine": 225,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 22,
                  "endLine": 242,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 22,
                  "endLine": 259,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 22,
                  "endLine": 276,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 22,
                  "endLine": 293,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 22,
                  "endLine": 310,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 22,
                  "endLine": 327,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 22,
                  "endLine": 345,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 362,
                  "startColumn": 22,
                  "endLine": 362,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyCollectionWriterTest.java"
                },
                "region": {
                  "startLine": 380,
                  "startColumn": 22,
                  "endLine": 380,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 17,
                  "endLine": 37,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "endLine": 46,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 630,
          "message": {
            "text": "The JUnit 5 test method name 'appendCharSequence_with_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 17,
                  "endLine": 53,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "endLine": 55,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 631,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_append_char' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "endLine": 63,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 632,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'osw': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 633,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_append_charSequence' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 634,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_append_charSequence_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 635,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_close' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "EmptyControlStatement",
          "ruleIndex": 442,
          "message": {
            "text": "Empty try-with-resources statement. Rename the resource to `ignored`, `unused` or `_` (Java 22+)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 116,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 636,
          "message": {
            "text": "Avoid unused local variables such as 'proxy'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 34,
                  "endLine": 114,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 637,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_flush' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 638,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_write_char_array' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 639,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_write_int' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 17,
                  "endLine": 150,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 640,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_write_offset_char_array' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "endLine": 164,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 641,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_write_string' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 17,
                  "endLine": 178,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 642,
          "message": {
            "text": "The JUnit 5 test method name 'exceptions_in_write_string_offset' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "endLine": 192,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 17,
                  "endLine": 231,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 17,
                  "endLine": 240,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 17,
                  "endLine": 249,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 17,
                  "endLine": 258,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 629,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'proxy': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ProxyWriterTest.java"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 17,
                  "endLine": 267,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/QueueOutputStreamTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 17,
                  "endLine": 71,
                  "endColumn": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 643,
          "message": {
            "text": "Avoid unused local variables such as 'inputStream'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/QueueOutputStreamTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 40,
                  "endLine": 71,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 644,
          "message": {
            "text": "Unnecessary qualifier 'StandardCharsets': 'UTF_8' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/QueueOutputStreamTest.java"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 55,
                  "endLine": 85,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/QueueOutputStreamTest.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 17,
                  "endLine": 102,
                  "endColumn": 88
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 238,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'inputStream': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/QueueOutputStreamTest.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 17,
                  "endLine": 112,
                  "endColumn": 110
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 28,
                  "endLine": 49,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 40,
          "message": {
            "text": "Ensure that resources like this OutputStream object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 28,
                  "endLine": 63,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 22,
                  "endLine": 43,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 22,
                  "endLine": 56,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 22,
                  "endLine": 69,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 22,
                  "endLine": 82,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 22,
                  "endLine": 95,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 22,
                  "endLine": 108,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 22,
                  "endLine": 121,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 22,
                  "endLine": 133,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 22,
                  "endLine": 145,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 22,
                  "endLine": 157,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 22,
                  "endLine": 169,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 22,
                  "endLine": 182,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 22,
                  "endLine": 195,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 22,
                  "endLine": 208,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 22,
                  "endLine": 221,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 22,
                  "endLine": 234,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 22,
                  "endLine": 246,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 22,
                  "endLine": 259,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 22,
                  "endLine": 272,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 22,
                  "endLine": 285,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "CloseResource",
          "ruleIndex": 233,
          "message": {
            "text": "Ensure that resources like this Writer object are closed after use"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/TeeWriterTest.java"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 22,
                  "endLine": 298,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 645,
          "message": {
            "text": "The JUnit 5 test method name 'testSetByteCount_Stream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ThresholdingOutputStreamTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 17,
                  "endLine": 36,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 646,
          "message": {
            "text": "The JUnit 5 test method name 'testSetByteCount_OutputStream' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/ThresholdingOutputStreamTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 17,
                  "endLine": 61,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "EqualsNull",
          "ruleIndex": 594,
          "message": {
            "text": "Avoid using equals() to compare against null"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterOutputStreamTest.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 62,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "EqualsNull",
          "ruleIndex": 594,
          "message": {
            "text": "Avoid using equals() to compare against null"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterOutputStreamTest.java"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 80,
                  "endLine": 68,
                  "endColumn": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 596,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::hashCode`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterOutputStreamTest.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 74,
                  "endLine": 89,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 597,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::toString`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterOutputStreamTest.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 74,
                  "endLine": 100,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "EqualsNull",
          "ruleIndex": 594,
          "message": {
            "text": "Avoid using equals() to compare against null"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterWriterTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 9,
                  "endLine": 93,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "EqualsNull",
          "ruleIndex": 594,
          "message": {
            "text": "Avoid using equals() to compare against null"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterWriterTest.java"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 80,
                  "endLine": 99,
                  "endColumn": 105
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 596,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::hashCode`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterWriterTest.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 74,
                  "endLine": 120,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "LambdaCanBeMethodReference",
          "ruleIndex": 597,
          "message": {
            "text": "Lambda expression could be written as a method reference: `brokenWriter::toString`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/UncheckedFilterWriterTest.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 74,
                  "endLine": 131,
                  "endColumn": 103
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 420,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'writer': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 14,
                  "endLine": 57,
                  "endColumn": 129
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 183,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'out': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 14,
                  "endLine": 108,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryModifier",
          "ruleIndex": 183,
          "message": {
            "text": "Unnecessary modifier 'final' on resource specification 'out': resource specifications are implicitly final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 14,
                  "endLine": 116,
                  "endColumn": 75
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 647,
          "message": {
            "text": "The JUnit 5 test method name 'testEUC_JPEncoding' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 17,
                  "endLine": 127,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 584,
          "message": {
            "text": "The JUnit 5 test method name 'testLowerCaseEncodingWithTurkishLocale_IO_557' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/output/XmlStreamWriterTest.java"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 17,
                  "endLine": 149,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "SimplifyBooleanReturns",
          "ruleIndex": 7,
          "message": {
            "text": "This if statement can be replaced by `return !{condition} && {elseBranch};`"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/serialization/MockSerializedClass.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 36,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
          "ruleIndex": 24,
          "message": {
            "text": "This class has only private constructors and may be final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/test/TestUtils.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 17,
                  "endLine": 46,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/test/TestUtils.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 67,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/test/TestUtils.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 13,
                  "endLine": 100,
                  "endColumn": 18
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/test/TestUtils.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 34,
                  "endLine": 154,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 648,
          "message": {
            "text": "Unnecessary qualifier 'java.io': 'PrintWriter' is already in scope because it is imported in this file"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/test/TestUtils.java"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 17,
                  "endLine": 161,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/src/test/java/org/apache/commons/io/test/TestUtils.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 34,
                  "endLine": 162,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 649,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 650,
          "message": {
            "text": "Unused import 'org.apache.commons.io.jmh.IOUtilsContentEqualsInputStreamsBenchmark'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 76
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 651,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 10,
                  "endLine": 19,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 652,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 25,
                  "endLine": 4,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 25,
                  "endLine": 9,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 25,
                  "endLine": 15,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 653,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "endLine": 3,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 669,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 670,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 671,
          "message": {
            "text": "The instance method name 'testFileCurrent_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The static method name 'testFileCurrent_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 300,
                  "endLine": 116,
                  "endColumn": 346
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 676,
          "message": {
            "text": "The instance method name 'testFileCurrent_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 63,
                  "endLine": 140,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 677,
          "message": {
            "text": "The static method name 'testFileCurrent_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 299,
                  "endLine": 185,
                  "endColumn": 345
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 678,
          "message": {
            "text": "The instance method name 'testFileCurrent_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 679,
          "message": {
            "text": "The static method name 'testFileCurrent_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 372,
                  "endLine": 255,
                  "endColumn": 418
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 680,
          "message": {
            "text": "The instance method name 'testFileCurrent_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 63,
                  "endLine": 297,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 681,
          "message": {
            "text": "The static method name 'testFileCurrent_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 312,
                  "endLine": 321,
                  "endColumn": 358
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 55,
                  "endLine": 335,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 669,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 683,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 684,
          "message": {
            "text": "The instance method name 'testFilePr118_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 685,
          "message": {
            "text": "The static method name 'testFilePr118_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 298,
                  "endLine": 116,
                  "endColumn": 344
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 686,
          "message": {
            "text": "The instance method name 'testFilePr118_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 63,
                  "endLine": 140,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 687,
          "message": {
            "text": "The static method name 'testFilePr118_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 297,
                  "endLine": 185,
                  "endColumn": 343
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 688,
          "message": {
            "text": "The instance method name 'testFilePr118_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 689,
          "message": {
            "text": "The static method name 'testFilePr118_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 370,
                  "endLine": 255,
                  "endColumn": 416
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 690,
          "message": {
            "text": "The instance method name 'testFilePr118_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 63,
                  "endLine": 297,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 691,
          "message": {
            "text": "The static method name 'testFilePr118_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 310,
                  "endLine": 321,
                  "endColumn": 356
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 55,
                  "endLine": 335,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 669,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 692,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 693,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 694,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 306,
                  "endLine": 116,
                  "endColumn": 352
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 695,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 63,
                  "endLine": 140,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 696,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 305,
                  "endLine": 185,
                  "endColumn": 351
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 697,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 698,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 378,
                  "endLine": 255,
                  "endColumn": 424
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 699,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 63,
                  "endLine": 297,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 700,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 318,
                  "endLine": 321,
                  "endColumn": 364
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 55,
                  "endLine": 335,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 669,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 701,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 702,
          "message": {
            "text": "The instance method name 'testStringCurrent_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 703,
          "message": {
            "text": "The static method name 'testStringCurrent_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 302,
                  "endLine": 116,
                  "endColumn": 348
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 704,
          "message": {
            "text": "The instance method name 'testStringCurrent_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 63,
                  "endLine": 140,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 705,
          "message": {
            "text": "The static method name 'testStringCurrent_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 301,
                  "endLine": 185,
                  "endColumn": 347
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 706,
          "message": {
            "text": "The instance method name 'testStringCurrent_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 707,
          "message": {
            "text": "The static method name 'testStringCurrent_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 374,
                  "endLine": 255,
                  "endColumn": 420
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 708,
          "message": {
            "text": "The instance method name 'testStringCurrent_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 63,
                  "endLine": 297,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 709,
          "message": {
            "text": "The static method name 'testStringCurrent_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 314,
                  "endLine": 321,
                  "endColumn": 360
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 55,
                  "endLine": 335,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 669,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 710,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 711,
          "message": {
            "text": "The instance method name 'testStringPr118_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 712,
          "message": {
            "text": "The static method name 'testStringPr118_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 300,
                  "endLine": 116,
                  "endColumn": 346
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 713,
          "message": {
            "text": "The instance method name 'testStringPr118_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 63,
                  "endLine": 140,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 714,
          "message": {
            "text": "The static method name 'testStringPr118_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 299,
                  "endLine": 185,
                  "endColumn": 345
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 715,
          "message": {
            "text": "The instance method name 'testStringPr118_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 716,
          "message": {
            "text": "The static method name 'testStringPr118_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 372,
                  "endLine": 255,
                  "endColumn": 418
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 717,
          "message": {
            "text": "The instance method name 'testStringPr118_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 63,
                  "endLine": 297,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 718,
          "message": {
            "text": "The static method name 'testStringPr118_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 312,
                  "endLine": 321,
                  "endColumn": 358
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 55,
                  "endLine": 335,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 669,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsInputStreamsBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 98
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 719,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 720,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 63,
                  "endLine": 71,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 721,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 308,
                  "endLine": 116,
                  "endColumn": 354
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 722,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 63,
                  "endLine": 140,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 723,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 307,
                  "endLine": 185,
                  "endColumn": 353
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 724,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 63,
                  "endLine": 209,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 725,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 380,
                  "endLine": 255,
                  "endColumn": 426
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 726,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 672,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 63,
                  "endLine": 297,
                  "endColumn": 109
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 727,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 675,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 320,
                  "endLine": 321,
                  "endColumn": 366
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 682,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsinputstreamsbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 55,
                  "endLine": 335,
                  "endColumn": 114
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsInputStreamsBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 728,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 729,
          "message": {
            "text": "Unused import 'org.apache.commons.io.jmh.IOUtilsContentEqualsReadersBenchmark'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 71
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 730,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType_B1' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B1.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 10,
                  "endLine": 19,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 731,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType_B2' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 8,
                  "endLine": 3,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 25,
                  "endLine": 4,
                  "endColumn": 40
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 25,
                  "endLine": 5,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 25,
                  "endLine": 9,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUsingVolatile",
          "ruleIndex": 6,
          "message": {
            "text": "Use of modifier volatile is not recommended."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B2.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 25,
                  "endLine": 15,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 732,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_jmhType_B3' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 8,
                  "endLine": 2,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 10,
                  "endLine": 3,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 10,
                  "endLine": 4,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 10,
                  "endLine": 5,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 10,
                  "endLine": 6,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 10,
                  "endLine": 8,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 10,
                  "endLine": 9,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 10,
                  "endLine": 10,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 10,
                  "endLine": 11,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 10,
                  "endLine": 12,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 10,
                  "endLine": 13,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "endLine": 14,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 10,
                  "endLine": 15,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 10,
                  "endLine": 17,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_jmhType_B3.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 16
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 733,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 734,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 671,
          "message": {
            "text": "The instance method name 'testFileCurrent_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "endLine": 71,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 674,
          "message": {
            "text": "The static method name 'testFileCurrent_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 295,
                  "endLine": 116,
                  "endColumn": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 676,
          "message": {
            "text": "The instance method name 'testFileCurrent_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 677,
          "message": {
            "text": "The static method name 'testFileCurrent_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 294,
                  "endLine": 185,
                  "endColumn": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 678,
          "message": {
            "text": "The instance method name 'testFileCurrent_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 58,
                  "endLine": 209,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 679,
          "message": {
            "text": "The static method name 'testFileCurrent_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 367,
                  "endLine": 255,
                  "endColumn": 408
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 680,
          "message": {
            "text": "The instance method name 'testFileCurrent_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 681,
          "message": {
            "text": "The static method name 'testFileCurrent_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 307,
                  "endLine": 321,
                  "endColumn": 348
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 50,
                  "endLine": 335,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 733,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 738,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 684,
          "message": {
            "text": "The instance method name 'testFilePr118_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "endLine": 71,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 685,
          "message": {
            "text": "The static method name 'testFilePr118_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 293,
                  "endLine": 116,
                  "endColumn": 334
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 686,
          "message": {
            "text": "The instance method name 'testFilePr118_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 687,
          "message": {
            "text": "The static method name 'testFilePr118_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 292,
                  "endLine": 185,
                  "endColumn": 333
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 688,
          "message": {
            "text": "The instance method name 'testFilePr118_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 58,
                  "endLine": 209,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 689,
          "message": {
            "text": "The static method name 'testFilePr118_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 365,
                  "endLine": 255,
                  "endColumn": 406
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 690,
          "message": {
            "text": "The instance method name 'testFilePr118_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 691,
          "message": {
            "text": "The static method name 'testFilePr118_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 305,
                  "endLine": 321,
                  "endColumn": 346
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 50,
                  "endLine": 335,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFilePr118_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 733,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 739,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 693,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "endLine": 71,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 694,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 301,
                  "endLine": 116,
                  "endColumn": 342
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 695,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 696,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 300,
                  "endLine": 185,
                  "endColumn": 341
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 697,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 58,
                  "endLine": 209,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 698,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 373,
                  "endLine": 255,
                  "endColumn": 414
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 699,
          "message": {
            "text": "The instance method name 'testFileRelease_2_8_0_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 68
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 700,
          "message": {
            "text": "The static method name 'testFileRelease_2_8_0_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 313,
                  "endLine": 321,
                  "endColumn": 354
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 50,
                  "endLine": 335,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testFileRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 733,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 740,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 702,
          "message": {
            "text": "The instance method name 'testStringCurrent_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "endLine": 71,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 703,
          "message": {
            "text": "The static method name 'testStringCurrent_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 297,
                  "endLine": 116,
                  "endColumn": 338
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 704,
          "message": {
            "text": "The instance method name 'testStringCurrent_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 705,
          "message": {
            "text": "The static method name 'testStringCurrent_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 296,
                  "endLine": 185,
                  "endColumn": 337
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 706,
          "message": {
            "text": "The instance method name 'testStringCurrent_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 58,
                  "endLine": 209,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 707,
          "message": {
            "text": "The static method name 'testStringCurrent_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 369,
                  "endLine": 255,
                  "endColumn": 410
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 708,
          "message": {
            "text": "The instance method name 'testStringCurrent_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 709,
          "message": {
            "text": "The static method name 'testStringCurrent_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 309,
                  "endLine": 321,
                  "endColumn": 350
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 50,
                  "endLine": 335,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringCurrent_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 733,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 741,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 711,
          "message": {
            "text": "The instance method name 'testStringPr118_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "endLine": 71,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 712,
          "message": {
            "text": "The static method name 'testStringPr118_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 295,
                  "endLine": 116,
                  "endColumn": 336
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 713,
          "message": {
            "text": "The instance method name 'testStringPr118_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 714,
          "message": {
            "text": "The static method name 'testStringPr118_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 294,
                  "endLine": 185,
                  "endColumn": 335
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 715,
          "message": {
            "text": "The instance method name 'testStringPr118_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 58,
                  "endLine": 209,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 716,
          "message": {
            "text": "The static method name 'testStringPr118_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 367,
                  "endLine": 255,
                  "endColumn": 408
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 717,
          "message": {
            "text": "The instance method name 'testStringPr118_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 718,
          "message": {
            "text": "The static method name 'testStringPr118_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 307,
                  "endLine": 321,
                  "endColumn": 348
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 50,
                  "endLine": 335,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringPr118_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 654,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 655,
          "message": {
            "text": "Unused import 'java.util.concurrent.atomic.AtomicInteger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 656,
          "message": {
            "text": "Unused import 'java.util.Collection'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 657,
          "message": {
            "text": "Unused import 'java.util.ArrayList'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 658,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.CompilerControl'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 659,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.Result'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 660,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Mode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 661,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Fork'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 662,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Measurement'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 663,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Threads'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 664,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.Warmup'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 665,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.annotations.BenchmarkMode'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 666,
          "message": {
            "text": "Unused import 'java.lang.reflect.Field'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 667,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.ScalarResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 668,
          "message": {
            "text": "Unused import 'org.openjdk.jmh.results.AggregationPolicy'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 733,
          "message": {
            "text": "Unnecessary import from the current package 'org.apache.commons.io.jmh.jmh_generated.IOUtilsContentEqualsReadersBenchmark_jmhType'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 93
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 742,
          "message": {
            "text": "The class name 'IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest' doesn't match '[A-Z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 14,
                  "endLine": 36,
                  "endColumn": 19
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 10,
                  "endLine": 39,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 10,
                  "endLine": 40,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 10,
                  "endLine": 41,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 10,
                  "endLine": 42,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 10,
                  "endLine": 43,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 10,
                  "endLine": 44,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 10,
                  "endLine": 45,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 10,
                  "endLine": 47,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 10,
                  "endLine": 48,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 10,
                  "endLine": 49,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 10,
                  "endLine": 50,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 10,
                  "endLine": 51,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 10,
                  "endLine": 52,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "OneDeclarationPerLine",
          "ruleIndex": 34,
          "message": {
            "text": "Use one line for each declaration, it enhances code readability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 10,
                  "endLine": 53,
                  "endColumn": 14
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 720,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_Throughput' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 32,
                  "endLine": 61,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 58,
                  "endLine": 71,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 42,
                  "endLine": 79,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 32,
                  "endLine": 93,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 23,
                  "endLine": 94,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 59,
                  "endLine": 94,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 13,
                  "endLine": 113,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 721,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_thrpt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 24,
                  "endLine": 116,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 303,
                  "endLine": 116,
                  "endColumn": 344
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 722,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_AverageTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 32,
                  "endLine": 130,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 58,
                  "endLine": 140,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 42,
                  "endLine": 148,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 46,
                  "endLine": 159,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 32,
                  "endLine": 162,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 23,
                  "endLine": 163,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 59,
                  "endLine": 163,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 13,
                  "endLine": 182,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 723,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_avgt_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 24,
                  "endLine": 185,
                  "endColumn": 60
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 302,
                  "endLine": 185,
                  "endColumn": 343
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 724,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_SampleTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 32,
                  "endLine": 199,
                  "endColumn": 66
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 58,
                  "endLine": 209,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 42,
                  "endLine": 217,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 46,
                  "endLine": 232,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidCatchingThrowable",
          "ruleIndex": 35,
          "message": {
            "text": "A catch statement should never catch throwable since it includes errors."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 32,
                  "endLine": 235,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidInstanceofChecksInCatchClause",
          "ruleIndex": 36,
          "message": {
            "text": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 23,
                  "endLine": 236,
                  "endColumn": 24
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 59,
                  "endLine": 236,
                  "endColumn": 67
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 13,
                  "endLine": 252,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 725,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_sample_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 24,
                  "endLine": 255,
                  "endColumn": 62
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 375,
                  "endLine": 255,
                  "endColumn": 416
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 46,
                  "endLine": 269,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "AssignmentInOperand",
          "ruleIndex": 37,
          "message": {
            "text": "Avoid assignments in operands"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 726,
          "message": {
            "text": "The instance method name 'testStringRelease_2_8_0_SingleShotTime' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 32,
                  "endLine": 288,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableNamingConventions",
          "ruleIndex": 735,
          "message": {
            "text": "The local variable name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 297,
                  "startColumn": 58,
                  "endLine": 297,
                  "endColumn": 99
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 13,
                  "endLine": 318,
                  "endColumn": 107
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 727,
          "message": {
            "text": "The static method name 'testStringRelease_2_8_0_ss_jmhStub' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 24,
                  "endLine": 321,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 736,
          "message": {
            "text": "The method parameter name 'l_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 315,
                  "endLine": 321,
                  "endColumn": 356
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 42,
                  "endLine": 325,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 737,
          "message": {
            "text": "The instance method name '_jmh_tryInit_f_ioutilscontentequalsreadersbenchmark0_0' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 50,
                  "endLine": 335,
                  "endColumn": 104
                }
              }
            }
          ]
        },
        {
          "ruleId": "ControlStatementBraces",
          "ruleIndex": 673,
          "message": {
            "text": "This statement should have braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///home/xtx/st/repos/commons-io/tag_3/commons-io-rel-commons-io-2.14.0/target/generated-test-sources/test-annotations/org/apache/commons/io/jmh/jmh_generated/IOUtilsContentEqualsReadersBenchmark_testStringRelease_2_8_0_jmhTest.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 32,
                  "endLine": 336,
                  "endColumn": 67
                }
              }
            }
          ]
        }
      ],
      "invocations": [
        {
          "executionSuccessful": true,
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": []
        }
      ]
    }
  ]
}
